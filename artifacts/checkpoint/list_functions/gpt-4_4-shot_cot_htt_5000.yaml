'[c001] find the biggest digit in the list and remove the rest.': [1, 0.0]
'[c001] find the first even number in the list.': [1, 0.0]
'[c001] find the last odd number.': [1, 0.0]
'[c001] find the minimum number in the list.': [1, 0.0]
'[c001] get the number that is in the middle of the list.': [1, 0.375]
'[c001] give the number that comes after 0 in the list.': [1, 0.25]
'[c001] output the element at the fourth position in the list.': [1, 0.0]
'[c001] pick the 4th element from the list.': [1, 0.0]
'[c001] pick the third element from right.': [1, 0.25]
'[c001] return the 3rd element from the end of the list.': [1, 0.25]
'[c001] return the fourth element in the list.': [1, 0.0]
'[c001] return the fourth element of the list.': [1, 0.0]
'[c001] return the fourth element.': [2, 0.0]
'[c001] return the number that comes before 2.': [1, 0.25]
'[c001] return the third element.': [1, 1.0]
'[c001] return the third number in the list.': [1, 1.0]
'[c001] select the middle element.': [1, 0.25]
'[c001] select the third element.': [1, 1.0]
'[c001] take the third element from the list.': [1, 1.0]
'[c002] find the smallest even number in the list.': [1, 0.375]
'[c002] keep only the first element divisible by 4, if such exists.': [1, 0.5]
'[c002] keep only the number 4 if present, else returns an empty list.': [1, 0.5]
'[c002] keep only the numbers 4 and 2, and remove all else.': [1, 0.5]
'[c002] keep the highest number when the number is 4 or more.': [1, 0.125]
'[c002] keep the single element if it is 4 or 6, otherwise provide an empty list.': [1, 0.375]
'[c002] leave only the numbers which are bigger than the preceding ones.': [1, 0.375]
'[c002] output the element following the number 1.': [1, 0.5]
'[c002] produce a list with the penultimate element only if it is an even number, else produce an empty list.': [1, 0.5]
'[c002] remove all elements except 2, if it exists.': [1, 0.375]
'[c002] remove all elements except for the last zero-based index of 2.': [1, 0.625]
'[c002] remove all elements that are not 0 or 2.': [1, 0.25]
'[c002] return a list containing the fourth element if the list has at least four elements, otherwise return an empty list.': [1, 0.5]
'[c002] return the digit 4 if it exists in the array, else return an empty array.': [1, 0.25]
'[c002] return the element one position after the 8 if it exists or return empty if it doesn''t.': [1, 0.75]
'[c002] return the first zero, two or four encountered, else return empty list.': [1, 0.375]
'[c002] return the fourth element if there are at least four elements in the list, otherwise return an empty list.': [1, 0.75]
'[c002] return the last element only if it is even, otherwise it''s an empty list.': [1, 0.375]
'[c002] return the only number between 1 and 9 that is divisible by 2 and is non-multiple of 4.': [1, 0.5]
'[c002] return the second last number if the length of the list is more than 1.': [1, 0.375]
'[c003] create a list composed of the element at the 7th position of the original list.': [1, 0.375]
'[c003] find the smallest number that isn''t in the list, starting from zero.': [1, 0.0]
'[c003] isolate the 8th element if available, if not the last element is taken.': [1, 0.125]
'[c003] keep only the first hit of the number three, and eliminate all other numbers.': [1, 0.125]
'[c003] keep only the second to the last element.': [1, 0.5]
'[c003] keep only the seventh element of the list, if it exists.': [1, 0.75]
'[c003] keep the element at index 4.': [1, 0.0]
'[c003] keep the last element.': [1, 0.125]
'[c003] pick the element at the index which is the first element of the list.': [1, 0.0]
'[c003] replace all the elements with the last even number in the input list.': [1, 0.375]
'[c003] return a list with the second last element.': [1, 0.375]
'[c003] return a list with the second smallest number.': [1, 0.125]
'[c003] return the element at 7 indexes forward, if it doesn''t contain that many elements, return the last element.': [1, 0.25]
'[c003] return the element before 0.': [1, 0.0]
'[c003] return the last element in the list.': [1, 0.0]
'[c003] return the last number before 7.': [1, 0.125]
'[c003] return the last number that isn''t 4 or 7.': [1, 0.5]
'[c003] return the seventh element.': [1, 0.625]
'[c003] select the 7th element.': [1, 0.5]
'[c003] take the element that is 2 spots left from the last element if it exists.': [1, 0.625]
'[c004] filter out all elements except 0 and 1.': [1, 0.125]
'[c004] filter out the values that are not 3.': [1, 0.375]
'[c004] generate a list with only a 5 if the list contains a 5, otherwise it gives an empty list.': [1, 0.125]
'[c004] keep only the last number present in the list from the group 0, 1, 3 and 8, if any.': [1, 0.25]
'[c004] keep only the number 0 or 5 if present in the list.': [1, 0.125]
'[c004] keep the number 3 if present in the list.': [1, 0.25]
'[c004] keep the number 6 if exists in the list and remove all the other numbers.': [1, 0.125]
'[c004] produce a list containing the 4th element of the list if it exists; otherwise, produce an empty list.': [1, 0.25]
'[c004] remove all elements except the one before the least element.': [1, 0.125]
'[c004] remove all elements up to and including the number 6.': [1, 0.5]
'[c004] return a list containing only the last element if it is less than 5, and return an empty list otherwise.': [1, 0.25]
'[c004] return a list containing the first ''4'' in the list.': [1, 0.25]
? '[c004] return element whose index in original list is the fifth element in the original list, if the list has at least 5 elements.'
: [1, 0.625]
'[c004] return the element after 3, if it exists; else return an empty list.': [1, 0.5]
'[c004] return the element immediately after the number 8 if it exists, otherwise return an empty list.': [1, 0.75]
'[c004] return the element that is less than 4 and greater than 0 if exists, otherwise return an empty list.': [1, 0.25]
'[c004] return the last element if it is divisible by 3, otherwise return an empty list.': [1, 0.25]
'[c004] return the last even number in the list, or an empty list if there is no even number.': [1, 0.125]
'[c004] return the number 5 if it exists in the list, else return the number 1, else an empty list.': [1, 0.125]
'[c004] return the number 8 if it exists in the list, otherwise return an empty list.': [1, 0.375]
'[c005] extract the fourth element from the right end of the list.': [1, 0.0]
'[c005] find the 4th-last element from any list.': [1, 0.0]
'[c005] find the first occurrence of a number in the list that is smaller than its preceding number.': [1, 0.25]
'[c005] generate a list with the element at 3rd position from the right.': [1, 0.125]
'[c005] output the last number before the number 0 appears in the list.': [1, 0.125]
'[c005] pick the last number from the input list.': [1, 0.125]
'[c005] pick the seventh element from the list or the first element if the list has fewer than seven items.': [1, 0.0]
'[c005] produce the third number in the sequence.': [1, 0.25]
'[c005] return the 3rd element.': [1, 0.375]
'[c005] return the element at the index equal to the last digit of the sum of all elements.': [1, 0.375]
'[c005] return the fourth element from right.': [1, 0.375]
'[c005] return the fourth element from the list.': [1, 0.25]
'[c005] return the last element before the appearance of the number 0.': [1, 0.375]
'[c005] return the number that follows 5 in each list.': [1, 0.375]
'[c005] return the second last element.': [1, 0.5]
'[c005] return the smallest element.': [1, 0.125]
'[c005] select the fourth element from the list.': [3, 1.0]
'[c005] select the middle elements.': [1, 0.25]
'[c006] generate a list of the first two elements.': [1, 1.0]
'[c006] get the first two elements.': [1, 1.0]
'[c006] keep only the first two elements of the list.': [4, 4.0]
'[c006] keep the first two elements and discard the rest.': [2, 2.0]
'[c006] keep the first two elements and disregard the rest.': [2, 2.0]
'[c006] keep the first two elements.': [2, 2.0]
'[c006] retain the first two elements and remove the rest.': [1, 1.0]
'[c006] retain the first two elements.': [1, 1.0]
'[c006] return just the first two elements of the list.': [1, 1.0]
'[c006] return the first two elements of the list.': [1, 1.0]
'[c006] take the first two elements from the list.': [1, 1.0]
'[c006] take the first two elements of the list.': [1, 1.0]
'[c006] take the first two elements.': [2, 2.0]
'[c007] generate a list of first two elements of the list.': [1, 1.0]
'[c007] keep only the first two elements of the list.': [2, 2.0]
'[c007] keep only the first two elements.': [5, 5.0]
'[c007] keep the first two elements and discard the rest.': [1, 1.0]
'[c007] keep the first two elements of the list and discard the remaining ones.': [1, 1.0]
'[c007] keep the first two elements of the list.': [4, 4.0]
'[c007] keep the first two elements only.': [2, 2.0]
'[c007] keep the first two elements.': [2, 2.0]
'[c007] take the first two elements from the list.': [1, 1.0]
'[c007] take the first two elements of the list.': [1, 1.0]
'[c008] delete the last three items if the list length is greater than 6, else keep the original list.': [1, 0.625]
'[c008] drop the last three elements, if there are at least more than three otherwise return the whole list.': [1, 0.5]
'[c008] exclude the last three elements in a list.': [1, 0.625]
'[c008] keep only the first six elements.': [1, 1.0]
'[c008] keep the elements until the second occurrence of number 2.': [1, 0.5]
'[c008] keep the first seven elements of the list the same.': [1, 0.125]
'[c008] keep the list up to two-thirds its length, dropping the final third.': [1, 0.25]
'[c008] remove all elements after the second occurrence of number 8.': [1, 0.75]
'[c008] remove the last 3 elements if the list has more than 3 elements.': [1, 0.75]
'[c008] remove the last element if it''s a 2, 7, or a 9.': [1, 0.375]
'[c008] remove the last three elements if the length of the list is more than five.': [1, 0.875]
'[c008] remove the last three elements if the list length is greater than five, otherwise keep the list as is.': [1, 0.75]
'[c008] remove the last three elements of the list if the list has more than 3 elements.': [1, 0.75]
'[c008] remove the last two elements if the list contains more than 2 elements, otherwise leave the array as it is.': [1, 0.25]
'[c008] remove the last two elements if the list has more than five elements.': [1, 0.875]
? '[c008] remove the last two elements if the list length is greater than 2, and keep the same list if the length is less than or equal to 2.'
: [1, 0.25]
'[c008] remove the second last element if the list''s length is more than 2, otherwise return the list as it is.': [1, 0.25]
'[c008] return the first six elements of the list.': [1, 1.0]
'[c008] return the first six elements, or return the whole list if it contains fewer than six elements.': [1, 1.0]
'[c008] truncate the list before the element 7.': [1, 0.25]
'[c009] cut the list after the first 6 elements.': [1, 1.0]
'[c009] keep the elements till 4 (exclusive).': [1, 0.375]
'[c009] keep the first 6 elements only.': [1, 1.0]
'[c009] remove elements after element 4 or keep the list as is if no element 4 is found.': [1, 0.5]
'[c009] remove the elements 9 and 2 if they are in the last position.': [1, 0.25]
'[c009] remove the last element if it exists.': [1, 0.0]
'[c009] remove the last element if it is 0 or 8.': [1, 0.5]
'[c009] remove the last element if it is 0, 2, 4 or 9.': [1, 0.25]
'[c009] remove the last element if it is 8.': [1, 0.5]
'[c009] remove the last element if it is a 0 or a 2.': [1, 0.375]
'[c009] remove the last element if it''s a 0.': [1, 0.5]
'[c009] remove the last elements 0, 4, 5, 6, and 8, if they exist.': [1, 0.25]
'[c009] remove the last number if and only if it is equal to 5 or 6.': [1, 0.5]
'[c009] remove the last three elements if the list contains more than three elements.': [1, 0.75]
? '[c009] remove the last three elements if the list is longer than 5; if it''s shorter or equal to 5, keep the list unchanged.'
: [1, 0.75]
'[c009] remove the last three elements of the list.': [1, 0.125]
'[c009] remove the last two elements from the list if the length of the list is greater than 2.': [1, 0.625]
'[c009] remove the last two elements if present, otherwise keep the list as is.': [1, 0.5]
'[c009] remove the last two elements if the list length is more than 1.': [1, 0.5]
'[c009] take the list up until the element 8 (inclusive if 8 is present).': [1, 0.5]
'[c010] remove the first element from the list.': [1, 1.0]
'[c010] remove the first element if it is 9, else remove the last element.': [1, 0.375]
'[c010] remove the first element if it is greater than 4.': [1, 0.75]
'[c010] remove the first element in the list.': [2, 1.875]
'[c010] remove the first element of the list.': [2, 1.75]
'[c010] remove the first element.': [13, 11.625]
'[c011] delete the first element if it is less than or equal to 4, and also delete any element after the 3rd element.': [1, 0.75]
'[c011] remove 1 or 0 from the list.': [1, 0.25]
'[c011] remove every even-indexed element from the list.': [1, 0.625]
'[c011] remove first element if it is 1 or 7, else remove the first two elements.': [1, 0.125]
'[c011] remove the first element from the list and every seventh element after that.': [1, 1.0]
'[c011] remove the first element from the list.': [2, 1.875]
'[c011] remove the first element if it is less than 4.': [1, 0.625]
'[c011] remove the first element only if it''s 1 or 4.': [1, 0.125]
'[c011] remove the first element.': [8, 6.75]
'[c011] remove the first half of elements.': [1, 0.75]
'[c011] remove the first instance of the number 0, 4, or 7.': [1, 0.5]
'[c011] remove the number 0 and number 1, if present.': [1, 0.125]
'[c012] remove elements till you encounter the number 7 or 5.': [1, 0.25]
'[c012] remove the first and last elements of the list.': [2, 0.25]
'[c012] remove the first and last elements.': [1, 0.125]
'[c012] remove the first and the last elements.': [1, 0.375]
'[c012] remove the first element if it is 7 or less.': [1, 0.375]
'[c012] remove the first element if it''s 0, 1, 5, 6 or 7.': [1, 0.375]
'[c012] remove the first element if it''s odd, else remove the first two elements.': [1, 0.25]
'[c012] remove the first element of the list.': [1, 0.625]
'[c012] remove the first element, retaining the rest of the array.': [1, 0.625]
'[c012] remove the first element.': [7, 3.625]
'[c012] remove the first number from the list, if it exists.': [1, 0.5]
'[c012] remove the first number of the list.': [1, 0.625]
'[c013] keep elements after the first occurrence of a number greater than 4.': [1, 0.125]
'[c013] keep only the elements that are positioned after the first occurrence of number 4.': [1, 0.375]
'[c013] remove all elements in the list that are less than 5.': [1, 0.0]
'[c013] remove any elements before and including the first number less than 4.': [1, 0.125]
'[c013] remove leading elements until encountering an element that is not 2, 4, or 6.': [1, 0.0]
'[c013] remove the element 1 and 4 and everything before them in the list.': [1, 0.125]
'[c013] remove the first and second element.': [1, 0.75]
'[c013] remove the first and second elements.': [1, 0.75]
'[c013] remove the first element if it''s smaller than 6.': [1, 0.0]
'[c013] remove the first one or two elements, depending on if they are less than 5 or not.': [1, 0.5]
'[c013] remove the first two elements from the list.': [1, 0.875]
'[c013] remove the first two elements if the length of the list is 2 or more, else return empty list.': [1, 0.875]
'[c013] remove the first two elements in the list.': [1, 0.875]
'[c013] remove the first two elements.': [7, 4.875]
'[c014] discard the elements before 5, and keep the remaining elements.': [1, 0.125]
'[c014] drop (cut off) the number at the beginning until it reaches a digit that is not 1, 4 or 0.': [1, 0.375]
'[c014] remove all elements from the start until the next number is greater than the current number.': [1, 0.5]
'[c014] remove the elements 1 if it is at first place and 4 or 7 at any place.': [1, 0.0]
'[c014] remove the first and second element.': [1, 1.0]
'[c014] remove the first element and any elements that are lower than it.': [1, 0.375]
'[c014] remove the first element if it is 4 or 8, else remove the first 2 elements.': [1, 0.75]
'[c014] remove the first element if it''s even, otherwise, remove the first two elements.': [1, 0.25]
'[c014] remove the first half of the list.': [1, 0.125]
'[c014] remove the first number unless it''s 0.': [1, 0.125]
'[c014] remove the first one or two elements if their value is smaller than 5.': [1, 0.25]
'[c014] remove the first one or two numbers until a number that is greater than 4 is encountered.': [1, 0.25]
'[c014] remove the first two elements (if available).': [1, 0.75]
'[c014] remove the first two elements from the list.': [1, 1.0]
'[c014] remove the first two elements if they exist.': [1, 1.0]
'[c014] remove the first two elements.': [4, 3.25]
'[c014] remove the first two numbers.': [1, 0.875]
'[c015] create a list starting from the third element and end on the third last element.': [1, 0.125]
'[c015] create a new list starting from the first odd number until the end of the list.': [1, 0.0]
'[c015] extract all elements starting from the 5th onward.': [1, 0.0]
'[c015] extract elements from position of repeated elements (excluding the repeating elements themselves).': [1, 0.0]
'[c015] generate a list from the last zero to the end of the list.': [1, 0.0]
'[c015] keep elements 4 through 9 of the list.': [1, 0.125]
'[c015] keep the elements starting from the one that is the same as its last digit.': [1, 0.0]
'[c015] maintain the rest of the elements after the last occurrence of 1 (if it exists).': [1, 0.0]
'[c015] output the list from the first occurrence of 0 or 9, inclusive.': [1, 0.0]
'[c015] remove all elements before and including the first appearance of the number 5.': [1, 0.0]
'[c015] remove all elements in the list up to and including the second 3 if the list contains two 3s.': [1, 0.0]
'[c015] remove repeating consecutive numbers.': [1, 0.0]
'[c015] remove the elements before and including the first occurrence of the number 9.': [1, 0.0]
'[c015] remove the first and last element of the list and every third element starting from the first one.': [1, 0.0]
'[c015] remove the first two and the last two elements.': [1, 0.0]
'[c015] select elements starting from the third element and end at the element before the last.': [1, 0.125]
'[c015] select elements to the right of an element with the numerical value greater than 4.': [1, 0.0]
'[c015] take all repeated elements in the list.': [1, 0.0]
'[c015] take the elements after the first appearance of a 9.': [1, 0.0]
'[c015] take the elements starting from the first 5 in the list (if a 5 exist) up to but not including the last element.': [1, 0.0]
'[c016] replace all instances of 6 with 8.': [1, 0.0]
'[c016] replace the number 3 with 8.': [1, 0.125]
'[c016] replace the second element with 8, if the second element exists.': [1, 1.0]
'[c016] replace the second element with 8.': [8, 8.0]
'[c016] replace the second element with an 8, if the list has more than one element.': [1, 1.0]
'[c016] replace the second element with the number 8.': [6, 6.0]
'[c016] replace the second number with 8.': [2, 2.0]
'[c017] replace 1 with 8.': [1, 0.375]
'[c017] replace the 2nd element with the number 8.': [1, 1.0]
'[c017] replace the second element of the list with 8.': [1, 1.0]
'[c017] replace the second element with 8 if it exists.': [1, 1.0]
'[c017] replace the second element with 8 if it''s not 8.': [1, 1.0]
'[c017] replace the second element with 8.': [8, 7.875]
'[c017] replace the second element with the number 8 if the original second number is 1, 7, or 9.': [1, 0.25]
'[c017] replace the second element with the number 8, if it exists.': [1, 1.0]
'[c017] replace the second element with the number 8.': [5, 5.0]
'[c018] change the sixth element into 3 if there is a sixth element; otherwise, leave the list as is.': [1, 1.0]
'[c018] replace the 6th (if exists) element with the number 3.': [1, 1.0]
'[c018] replace the 6th element in the list with 3 if it is 0.': [1, 0.5]
'[c018] replace the 6th element with 3 if the list contains at least 6 elements.': [1, 0.875]
'[c018] replace the 6th element with 3 unless the list has fewer than 6 elements, then we do nothing.': [1, 1.0]
'[c018] replace the 6th element with the number 3 if it exists.': [1, 1.0]
'[c018] replace the 6th element with the number 3.': [1, 1.0]
'[c018] replace the last element before 2 with 3.': [1, 0.125]
'[c018] replace the last even number (0 counts as an even number) in the list with 3.': [1, 0.125]
'[c018] replace the number after 1 in the list with 3.': [1, 0.5]
'[c018] replace the second last element with the number 3.': [1, 0.25]
'[c018] replace the sixth element with 3 (if the list contains six or more elements).': [1, 0.875]
'[c018] replace the sixth element with 3 if exists, else return the list itself.': [1, 1.0]
'[c018] replace the sixth element with 3.': [2, 1.875]
'[c018] replace the sixth element with a 3.': [1, 0.875]
'[c018] replace the sixth element with number 3, unless it already is 3.': [1, 0.875]
'[c018] replace the sixth element with the number 3 if the list is long enough; otherwise leave it unchanged.': [1, 1.0]
'[c018] replace the sixth element with the number 3.': [1, 1.0]
'[c019] replace 6 by 3, if the list contains 6.': [1, 0.625]
'[c019] replace 7''s with 3''s.': [1, 0.5]
'[c019] replace the 5th element with 3 if a list contains 5 or more elements.': [1, 0.5]
'[c019] replace the 5th element with 3 if the list is long enough, else leave it unchanged.': [1, 0.625]
'[c019] replace the 6th element with 3 (if it exists).': [1, 0.875]
'[c019] replace the 6th element with 3.': [1, 0.875]
'[c019] replace the 6th element with a 3 if it exists, otherwise leave the list unchanged.': [1, 0.75]
'[c019] replace the element 6 with 3 if it is present, else the list remains the same.': [1, 0.25]
'[c019] replace the fifth element with 3 or keep the list as it is if the length is less than five.': [1, 0.375]
'[c019] replace the fifth element with 3.': [1, 0.5]
'[c019] replace the number 0 with 3.': [1, 0.5]
'[c019] replace the number 0 with the number 3.': [3, 1.625]
'[c019] replace the number 6 with 3.': [1, 0.625]
'[c019] replace the number after 0 with 3, unless there is 3 after the 0 already.': [1, 0.625]
'[c019] replace the number after the first occurrence of 5 with 3, or leave as is if there is no 5.': [1, 0.75]
'[c019] replace the penultimate element with 3 if it exists; otherwise, no change is made.': [1, 0.25]
'[c019] replace the position 6 (if exists) with the number 3, else keep the list unchanged.': [1, 0.875]
'[c019] replace the sixth element with 3 if there are 6 or more elements, else the original list maintains.': [1, 0.625]
'[c020] replace the first element with the last element.': [19, 19.0]
'[c021] add 8 at the second place in the list.': [1, 1.0]
'[c021] add an 8 to the second position in the list.': [1, 1.0]
'[c021] add the number 8 after the first element.': [1, 1.0]
'[c021] append the number 8 after the first element.': [1, 1.0]
'[c021] insert 8 at the second position.': [3, 3.0]
'[c021] insert number 8 at the second position of the list.': [1, 1.0]
'[c021] insert the number 8 after the first number.': [1, 1.0]
'[c021] insert the number 8 as the second element in the list.': [1, 1.0]
'[c021] insert the number 8 at the second place of the list.': [1, 1.0]
'[c021] insert the number 8 at the second position in the list.': [3, 3.0]
'[c021] insert the number 8 at the second position of the list.': [4, 4.0]
'[c021] insert the number 8 at the second position.': [2, 2.0]
'[c022] add 5 at the second position in the list.': [1, 1.0]
'[c022] add the number 5 after the first element.': [1, 1.0]
'[c022] add the number 5 as the second element in the list.': [1, 1.0]
'[c022] add the number 5 as the second element of the list.': [1, 1.0]
'[c022] insert 5 after the first element.': [1, 1.0]
'[c022] insert 5 as the second element.': [1, 1.0]
'[c022] insert number 5 after the first element.': [1, 1.0]
'[c022] insert the number 5 after the first element.': [4, 4.0]
'[c022] insert the number 5 as the second element in the list.': [1, 1.0]
'[c022] insert the number 5 at position 2.': [1, 1.0]
'[c022] insert the number 5 at the second position in the list.': [2, 2.0]
'[c022] insert the number 5 at the second position of the list.': [1, 1.0]
'[c022] insert the number 5 at the second position.': [4, 4.0]
'[c023] add 5 after the first number, but if the first number is a 2, add 8 instead.': [1, 0.5]
'[c023] add the number 5 at the second position of the list.': [1, 0.5]
'[c023] insert 5 after the first element if the first element is an odd number, and insert 8 otherwise.': [1, 0.625]
'[c023] insert 5 after the first element if the first element is less than 5, and 8 otherwise.': [1, 0.5]
'[c023] insert 5 after the first element if the first element is not 8, and insert 8 if it is 8.': [1, 0.625]
'[c023] insert 5 after the first element, or insert 8 if the list contains only two elements.': [1, 0.75]
? '[c023] insert 5 as the second element if the first element is not 5; insert 8 as the second element if the first element is 6, 4, 8 or 9.'
: [1, 0.5]
'[c023] insert 5 at the second position if the list contains 5, else insert 8 at the second position.': [1, 0.5]
'[c023] insert 5 if the first number is less than 5, or insert 8 if the first number is greater than or equal to 5.': [1, 0.75]
'[c023] insert 5 if the second element is greater than 4 else it inserts 8.': [1, 0.5]
'[c023] insert 5 or 8 after first element depending upon if it''s odd or even.': [1, 0.5]
? '[c023] insert 5 or 8 as the second element, depending on whether the first element is bigger or smaller than 5 respectively.'
: [1, 0.5]
'[c023] insert 5, if the list contains 1, else insert 8 after the first element.': [1, 0.75]
'[c023] insert 8 after the first element if the first number is even, else insert 5.': [1, 0.5]
'[c023] insert 8 after the first element.': [1, 0.125]
? '[c023] insert the number 5 after the first element if the first element is less than 5, or insert the number 8 after the first element if the first element is greater or equal to 5.'
: [1, 0.5]
'[c023] insert the number 5 after the first element unless the first element is 8, then insert 8.': [1, 0.375]
'[c023] insert the number 5 after the first number in the list.': [1, 0.5]
? '[c023] insert the number 8 after the second element if it isn''t 8, and otherwise insert the number 5 after the second element.'
: [1, 0.0]
'[c023] place the next even number after the first position.': [1, 0.25]
'[c024] add 5 after the first element if it isn''t already 5.': [1, 0.125]
'[c024] add 5 if the first number is odd, or 8 if the first number is even, as the second element.': [1, 0.875]
'[c024] add 5 if the number prior to it is 9, otherwise add 8.': [1, 0.125]
? '[c024] add 5 or 8 at the second position of the given list depending on if the first element of the list is less than 5 or not.'
: [1, 1.0]
'[c024] add 8 or 5 after the first entry depending upon whether the first number is less than 5 or equal/greater than 5.': [1, 0.75]
? '[c024] add a number 5 after the first number if the first number is 9, or to add a number 8 after the first number if the first number is 3.'
: [1, 0.25]
'[c024] insert 5 as the second element if the first number is odd and 8 if it''s even.': [1, 0.625]
'[c024] insert 5 if the first element is 9, else insert 8 right after the first element in the list.': [1, 0.625]
'[c024] insert 5 if the first item is equal to or greater than 5, else insert 8.': [1, 1.0]
'[c024] insert 8 after the first element if the first element is odd, else insert 5.': [1, 0.375]
'[c024] insert 8 after the first element if the first element is smaller than 5, else insert 5.': [1, 1.0]
'[c024] insert 8 before 5 if the list contains a 5, else insert 8 at the second position.': [1, 0.125]
'[c024] insert 8, after the first element of the list.': [1, 0.25]
'[c024] insert number decreased by 2 from the first element before the second element.': [1, 0.0]
? '[c024] insert the number 5 after the first element (if 5 is not present in the list) or the number 8 (if 8 is not present in the list).'
: [1, 0.25]
'[c024] insert the number 5 after the first element if the first element is 9, else insert the number 8.': [1, 0.625]
'[c024] insert the number 5 or 8 after the first element.': [1, 1.0]
'[c024] insert the number 5 or 8 as the second element, based on if the second number is less than or greater than 4.': [1, 0.875]
'[c024] insert the number 8 before the second element.': [1, 0.375]
'[c024] insert the second highest number from the list after the first element.': [1, 0.125]
'[c025] remove every second element.': [1, 0.25]
'[c025] remove the element 2 if it is present.': [1, 0.0]
'[c025] remove the number 0 if it is not the first element.': [1, 0.0]
'[c025] remove the number 1 if present in the list.': [1, 0.0]
'[c025] remove the number 2 from the list.': [1, 0.0]
'[c025] remove the number 2 if it exists in the list.': [1, 0.125]
'[c025] remove the second element from the list.': [5, 5.0]
'[c025] remove the second element if it exists.': [1, 1.0]
'[c025] remove the second element in the list.': [2, 2.0]
'[c025] remove the second element of the list.': [2, 2.0]
'[c025] remove the second element.': [3, 3.0]
'[c025] remove the second position element.': [1, 1.0]
'[c026] remove 9 from the list if it''s in 3rd position.': [1, 0.75]
'[c026] remove all instances of the number 1 from the list.': [1, 0.125]
'[c026] remove all instances of the number 5.': [1, 0.125]
'[c026] remove the element ''0'' from the list.': [1, 0.25]
'[c026] remove the element 2 if it exists.': [1, 0.0]
'[c026] remove the element 7 if it is not the last element in the list.': [1, 0.125]
'[c026] remove the first occurrence of 1 in the list.': [1, 0.0]
'[c026] remove the next-to-last element from the list.': [1, 0.375]
'[c026] remove the number 1 from the list if it exists.': [1, 0.0]
'[c026] remove the number 1 from the list.': [1, 0.125]
'[c026] remove the number 1 if present.': [1, 0.25]
'[c026] remove the number 7 if exists and then leave the rest of the list as is.': [1, 0.0]
'[c026] remove the number 7 if present in the list.': [1, 0.0]
'[c026] remove the number 7 if present.': [1, 0.125]
'[c026] remove the third element (if it exists).': [1, 1.0]
'[c026] remove the third element from the list.': [3, 3.0]
'[c026] remove the third element if it exists.': [1, 1.0]
'[c026] remove the third element.': [1, 1.0]
'[c027] remove any repeated numbers in succession from the list.': [1, 0.625]
'[c027] remove occurrence of the second element in the sequence.': [1, 0.75]
'[c027] remove second number if it is duplicate of the first number only.': [1, 0.625]
'[c027] remove the consecutive duplicate numbers.': [1, 0.625]
'[c027] remove the duplicate if it follows directly after.': [1, 0.375]
'[c027] remove the repeated consecutive elements.': [1, 0.375]
'[c027] remove the repeating first element.': [1, 0.375]
'[c027] remove the second element from the list, no matter what it is.': [1, 0.625]
'[c027] remove the second element from the list.': [1, 0.75]
'[c027] remove the second element if it is the same as the first element.': [1, 0.375]
'[c027] remove the second element if it is the same as the first.': [1, 0.375]
'[c027] remove the second element in the list.': [1, 0.5]
'[c027] remove the second element of the list.': [1, 0.5]
'[c027] remove the second element.': [2, 1.0]
'[c027] remove the second instance of the first element.': [1, 0.5]
'[c027] remove the second occurrence (if exists) of the first element.': [1, 0.625]
'[c027] remove the second occurrence of the first element.': [1, 0.875]
'[c027] remove the second occurrence of the first number in the list.': [1, 0.5]
'[c027] remove the second repeated number if the list starts with two repeated numbers.': [1, 0.5]
'[c028] remove a 0 if it is not the first element of the list.': [1, 0.25]
'[c028] remove all 2s from the list.': [1, 0.0]
'[c028] remove all occurrences of the number 0.': [1, 0.125]
'[c028] remove all zeroes except for the ones located at the end of the list.': [1, 0.25]
'[c028] remove every third number in the list.': [1, 0.5]
'[c028] remove the digit 1 if it immediately follows a number.': [1, 0.0]
'[c028] remove the element 3 if it exists.': [1, 0.0]
'[c028] remove the first occurrence of number 1 from the list.': [1, 0.375]
'[c028] remove the number 0 if it''s not the only element.': [1, 0.25]
'[c028] remove the number 1 if it is the third element.': [1, 0.375]
'[c028] remove the number 2 from the list.': [1, 0.0]
'[c028] remove the number 2 if it exists in the list.': [1, 0.125]
'[c028] remove the second element if it''s 0 otherwise remove the third element.': [1, 0.875]
'[c028] remove the second element.': [2, 0.5]
'[c028] remove the second occurrence of 3 (if exists).': [1, 0.0]
'[c028] remove the third element from the list.': [2, 1.125]
'[c028] remove the third element in the list.': [1, 0.75]
'[c028] remove the zeros but only if they are not alone in the list.': [1, 0.375]
'[c029] drop the first two elements.': [1, 1.0]
'[c029] remove first two elements.': [1, 1.0]
'[c029] remove the first 2 elements.': [2, 2.0]
'[c029] remove the first one or two elements from the list.': [1, 0.875]
'[c029] remove the first two elements from the list.': [1, 1.0]
'[c029] remove the first two elements in the list.': [2, 2.0]
'[c029] remove the first two elements of the list.': [1, 1.0]
'[c029] remove the first two elements unless the first element is 0, in which case it removes the single first element.': [1, 0.75]
'[c029] remove the first two elements.': [9, 9.0]
'[c029] remove the first two numbers.': [1, 1.0]
'[c030] discard the last two elements from the list.': [1, 0.75]
'[c030] remove 6 and any element that comes after it.': [1, 0.0]
'[c030] remove all elements in the list after (and including) the first occurrence of 0.': [1, 0.125]
'[c030] remove the elements from the end until it reaches an even number.': [1, 0.5]
? '[c030] remove the last 1 or 2 elements (if the list length is more than 2), and the last element if the list length is 2 or less).'
: [1, 1.0]
'[c030] remove the last element if the list has more than one element.': [1, 0.0]
'[c030] remove the last two elements from the list.': [5, 3.875]
'[c030] remove the last two elements if the length of the list is more than 2, else remove the last element.': [1, 0.5]
? '[c030] remove the last two elements if the list has more than two elements, but if the list has two or less elements, the function returns an empty list.'
: [1, 0.875]
'[c030] remove the last two elements of the list (or all elements if there are less than 3).': [1, 0.875]
'[c030] remove the last two elements of the list.': [3, 2.25]
'[c030] remove the last two elements when the number of elements is more than two.': [1, 0.75]
'[c030] remove the last two elements.': [2, 1.5]
'[c031] exclude repeated elements at the end of the list.': [1, 0.375]
'[c031] omit the further instances if a number appears twice continuously.': [1, 0.125]
'[c031] remove all pairs of identical consecutive numbers.': [1, 0.875]
'[c031] remove any identical numbers at the start of a list.': [1, 0.375]
'[c031] remove consecutive duplicate elements.': [1, 0.0]
'[c031] remove duplicate appearances of the first element from the list but keep the first appearance.': [1, 0.25]
'[c031] remove duplicate consecutive numbers.': [1, 0.0]
'[c031] remove repeating consecutive numbers.': [1, 0.0]
'[c031] remove the duplicate numbers from the last till the second element.': [1, 0.25]
'[c031] remove the duplicated elements from the start until a non-duplicated element appears.': [1, 0.875]
'[c031] remove the first occurrence of a repeating number at the beginning of the list.': [1, 0.875]
'[c031] remove the first repeating sequential element.': [1, 0.0]
'[c031] remove the first two elements if they are the same.': [2, 0.875]
'[c031] remove the first two repeated elements at the beginning of the list.': [1, 0.875]
'[c031] remove the last two elements if the last element of the list is the same as the one before the last.': [1, 1.0]
'[c031] remove the last two elements if they are the same.': [1, 0.75]
'[c031] remove the last two elements if they''re equal.': [1, 0.25]
'[c031] remove the last two elements of the list.': [1, 0.375]
'[c031] remove the repeated element at the start of the array and the end of the array.': [1, 0.5]
'[c032] remove any 6 or 7 that are located at the start of the list.': [1, 0.125]
'[c032] remove the elements at odd indices.': [1, 0.0]
'[c032] remove the first and last element.': [1, 0.0]
'[c032] remove the first and last elements of the list.': [1, 0.0]
'[c032] remove the first and second elements if they are 6 and 8, otherwise keep them as is.': [1, 0.125]
'[c032] remove the first instance of 6 if it exists, else leave the list as is.': [1, 0.0]
'[c032] remove the first occurrence of 6 and 2, if they appear.': [1, 0.0]
'[c032] remove the first two elements from the list.': [1, 0.5]
'[c032] remove the first two elements of the list.': [1, 0.75]
'[c032] remove the first two elements.': [6, 3.625]
'[c032] remove the last number and every number before it if it already exists in the rest of the list.': [1, 0.5]
'[c032] remove the last two elements of the list.': [1, 0.125]
'[c032] remove the last two elements.': [1, 0.125]
'[c032] remove the second and last elements.': [1, 0.0]
'[c032] remove the second element from the list.': [1, 0.0]
'[c033] exchange first two elements.': [1, 0.0]
'[c033] move the third element to the first of the list.': [1, 0.0]
'[c033] swap first two elements of the list.': [1, 0.0]
'[c033] swap the first and fourth element of the list.': [1, 1.0]
'[c033] swap the first and fourth element.': [1, 1.0]
'[c033] swap the first and fourth elements.': [4, 4.0]
'[c033] swap the first and the fourth element of the list.': [1, 1.0]
'[c033] swap the first and the third element.': [1, 0.0]
'[c033] swap the first and third elements in the list.': [1, 0.0]
'[c033] swap the first and third elements.': [2, 0.0]
'[c033] swap the first element with the third element.': [1, 0.0]
'[c033] swap the first three elements.': [1, 1.0]
'[c033] swap the first two elements.': [3, 0.0]
'[c033] switch the first two elements.': [1, 0.0]
'[c034] interchange the second and third elements.': [2, 2.0]
'[c034] move the third element of the list to the second position.': [1, 1.0]
'[c034] move the third element to the second position.': [1, 1.0]
'[c034] swap element 3 with the previous element.': [1, 0.875]
'[c034] swap every two elements.': [1, 0.0]
'[c034] swap the positions of the second and third elements in the list.': [1, 1.0]
'[c034] swap the second and third element of the list.': [2, 2.0]
'[c034] swap the second and third elements in the list.': [1, 1.0]
'[c034] swap the second and third elements.': [7, 7.0]
'[c034] switch the 2nd and 3rd elements in the list.': [1, 1.0]
'[c034] switch the second and third elements.': [2, 2.0]
'[c035] bring the third element to the front.': [1, 0.25]
'[c035] move the element at the second position to the first position.': [1, 0.0]
'[c035] move the first non-repeating element to the front position of the array.': [1, 0.0]
'[c035] move the last item before the first item of the same value in the list.': [1, 0.0]
'[c035] move the second element to the front.': [1, 0.0]
'[c035] move the third element to the first place and keep the rest of the sequence in the same order.': [1, 0.25]
'[c035] move the third element to the first position, shuffling other elements to the right.': [1, 0.0]
'[c035] move the third number to the first place.': [1, 0.0]
'[c035] swap the first and the third elements.': [1, 0.0]
'[c035] swap the first and third elements.': [3, 0.0]
'[c035] swap the first non-zero element with the second non-zero element.': [1, 0.125]
'[c035] swap the first two elements.': [2, 0.0]
'[c035] swap the first two numbers.': [1, 0.0]
'[c035] swap the second and third elements in the list.': [1, 0.375]
'[c035] swap the second and third elements.': [1, 0.5]
'[c035] switch the first element with the second.': [1, 0.0]
'[c035] switch the first element with the third one.': [1, 0.0]
'[c036] interchange the first and third elements.': [1, 0.0]
'[c036] interchange the second and the third elements.': [1, 0.5]
'[c036] shift the third element to the second position.': [1, 0.75]
'[c036] sort the first three numbers in ascending order and leave the rest as they are.': [1, 0.125]
'[c036] swap second and third elements.': [1, 0.5]
'[c036] swap the first and third elements.': [1, 0.0]
'[c036] swap the first elements and the third elements.': [1, 0.0]
'[c036] swap the first two elements of the list.': [1, 0.0]
'[c036] swap the first two elements.': [1, 0.0]
'[c036] swap the position of the first two elements if the first element is greater than the second.': [1, 0.0]
'[c036] swap the second and the third elements.': [1, 0.625]
'[c036] swap the second and third elements in the list.': [1, 0.625]
'[c036] swap the second and third elements.': [5, 2.75]
'[c036] switch the first and third elements.': [1, 0.0]
'[c036] switch the position of the second and third elements.': [1, 0.625]
'[c036] switch the second and third elements.': [1, 0.5]
'[c037] add the number 3 to the end of the list, regardless of the existing elements.': [1, 1.0]
'[c037] append 3 to existing list.': [1, 1.0]
'[c037] append 3 to the end of the list, even if the list is empty.': [1, 1.0]
'[c037] append 3 to the end of the list.': [2, 2.0]
'[c037] append 3 to the end.': [1, 1.0]
'[c037] append 3 to the given list.': [1, 1.0]
'[c037] append 3 to the list.': [3, 3.0]
'[c037] append 3 to the original list regardless of its content.': [1, 1.0]
'[c037] append a 3 to the list regardless of its content.': [1, 1.0]
'[c037] append a 3 to the list.': [1, 1.0]
'[c037] append the number 3 at the end of the list.': [1, 1.0]
'[c037] append the number 3 to the end of the list.': [1, 1.0]
'[c037] append the number 3 to the end of the sequence.': [1, 1.0]
'[c037] append the number 3 to the given list.': [1, 1.0]
'[c037] append the number 3 to the list.': [3, 3.0]
'[c038] add 9 to the end of the list.': [1, 1.0]
'[c038] add the number 9 to the end of the list.': [1, 1.0]
'[c038] append 9 to the end of each list.': [1, 1.0]
'[c038] append 9 to the list regardless of its content.': [1, 1.0]
'[c038] append 9 to the list.': [2, 2.0]
'[c038] append a 9 at the end of the list, no matter how many elements are in the list.': [1, 1.0]
'[c038] append the integer 9 to the list.': [1, 1.0]
'[c038] append the number 9 at the end of every list.': [1, 1.0]
'[c038] append the number 9 at the end of the list': [1, 1.0]
'[c038] append the number 9 regardless of the input.': [1, 1.0]
'[c038] append the number 9 to the end of the given list.': [1, 1.0]
'[c038] append the number 9 to the list, regardless of its current content.': [1, 1.0]
'[c038] append the number 9 to the list.': [6, 6.0]
'[c038] append the number 9 to the sequence.': [1, 1.0]
'[c039] add a 3 if the list contains a 3, add a 9 if the list contains a 9, and do nothing if neither 3 nor 9 are present.': [1, 0.5]
'[c039] add a 9 at the end of the list if the list contains a 9 or a 3 otherwise': [1, 0.375]
'[c039] append 3 if 3 is in the list else append 9 if 9 is in the list.': [1, 0.5]
'[c039] append 3 if the list contains a 3, else append 9 if the list contains a 9, else append nothing.': [1, 0.375]
'[c039] append 3 if the list contains a 3, else append 9 if the list contains a 9.': [5, 2.0]
'[c039] append 3 if the list contains a 3, else leave the list as it is.': [1, 0.0]
'[c039] append 3 if there is 3 in the list, else append 9 if 9 is in the list.': [1, 0.25]
'[c039] append 3 or 9 if the list contains 3 or 9 respectively.': [1, 0.875]
'[c039] append 9 if the list contains a 9, else append 3 if the list contains a 3, else do nothing.': [1, 0.75]
'[c039] append 9 if the list contains a 9, else append 3 if the list contains a 3, else leave the list as is.': [1, 0.625]
'[c039] append 9 if the list contains a 9, else append 3 if the list contains a 3, otherwise don''t append anything.': [1, 0.625]
'[c039] append 9 if the list contains a 9, else append 3 if the list contains a 3.': [3, 2.0]
'[c039] append a 9 to the list if the list contains a 9, else append a 3 if the list contains a 3, else do nothing.': [1, 0.625]
'[c039] check for the presence of every number from 0 to 9; if there''s a number missing, add 9 at the end of the sequence.': [1, 0.125]
'[c040] add 3 to the list if the list contains a 3; add 9 to the list if it contains a 9, else leave it as it is.': [1, 1.0]
'[c040] append 3 if the list contains a 3, append 9 if the list contains a 9, and if neither append the last element.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9 or do nothing if none of them present.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else do not append anything.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else do nothing.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else leave it unchanged.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else remain unchanged.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else return the list as is.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, else, leave it as it as.': [1, 1.0]
? '[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, or leave it as it is if it doesn''t contain neither of those.'
: [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9, otherwise leave it unchanged.': [1, 1.0]
'[c040] append 3 if the list contains a 3, else append 9 if the list contains a 9.': [6, 5.5]
'[c040] append 9 if the list contains a 9, append 3 if the list contains a 3, else leave the list as it is.': [1, 1.0]
? '[c040] append a 3 if the list contains a 3, else append a 9 if the list contains a 9, and do nothing if the list doesn''t contain either of them.'
: [1, 1.0]
'[c040] append the first instance of 3 or 9, if it exists; else append nothing.': [1, 1.0]
'[c041] always return [9] regardless of the input.': [1, 1.0]
'[c041] convert any given list to a list with only element 9.': [1, 1.0]
'[c041] ignore the input and always return [9].': [1, 1.0]
'[c041] output the single digit [9] regardless of input list.': [1, 1.0]
'[c041] replace all elements with [9].': [3, 3.0]
'[c041] replace all elements with a single element, 9.': [1, 1.0]
'[c041] replace all elements with the number 9, regardless of the initial elements.': [1, 1.0]
'[c041] replace the entire list with the number 9.': [1, 1.0]
'[c041] replace the list with [9] no matter what the content of the list.': [1, 1.0]
'[c041] return 9 regardless of input.': [1, 1.0]
'[c041] return [9] no matter the input list.': [1, 1.0]
'[c041] return [9] regardless of the input.': [1, 1.0]
'[c041] return a list containing a single element, 9, regardless of the input.': [1, 1.0]
'[c041] return a list containing only the number 9 irrespective of the input list.': [1, 1.0]
'[c041] return a list with just the number 9 no matter the input.': [1, 1.0]
'[c041] return a list with only the number 9 regardless of input.': [1, 1.0]
'[c041] return a single element list with the number 9.': [1, 1.0]
'[c041] return the list [9] no matter what the input list is.': [1, 1.0]
'[c042] always generate [5, 2] regardless of the input.': [1, 1.0]
'[c042] always output the sequence [5, 2] regardless of the input.': [1, 1.0]
'[c042] always return [5, 2] regardless of the input.': [1, 1.0]
'[c042] always return the list [5, 2] regardless of the input.': [1, 1.0]
'[c042] always return the list [5, 2], regardless of the input.': [1, 1.0]
'[c042] output the default list [5, 2] irrespective of the input.': [1, 1.0]
'[c042] replace any given input list with [5, 2].': [1, 1.0]
'[c042] replace the complete list with the elements [5, 2].': [1, 1.0]
'[c042] replace the entire list with the list [5, 2].': [1, 1.0]
'[c042] return [5, 2] all the times, regardless of the input.': [1, 1.0]
'[c042] return [5, 2] no matter what the input is.': [1, 1.0]
'[c042] return [5, 2] regardless of the input.': [3, 3.0]
'[c042] return the list [5, 2] regardless of the input.': [3, 3.0]
'[c042] seemingly ignore the input list and always return the list [5, 2].': [1, 1.0]
'[c043] generate [8, 2, 7, 0, 3] regardless of the initial list.': [1, 1.0]
'[c043] ignore the input and always output the list [8, 2, 7, 0, 3].': [1, 1.0]
'[c043] ignore the input and return the specific list [8, 2, 7, 0, 3] regardless of input.': [1, 1.0]
'[c043] output the list [8, 2, 7, 0, 3] regardless of the input.': [1, 1.0]
'[c043] replace any input with the sequence [8, 2, 7, 0, 3]': [1, 1.0]
'[c043] replace any sequence of numbers with [8, 2, 7, 0, 3].': [1, 1.0]
'[c043] replace the list with a specific set [8, 2, 7, 0, 3] regardless of the input list.': [1, 1.0]
'[c043] return [8, 2, 7, 0, 3] regardless of the input list.': [1, 1.0]
'[c043] return [8, 2, 7, 0, 3] regardless of the input.': [1, 1.0]
'[c043] return the list [8, 2, 7, 0, 3] for any input.': [1, 1.0]
'[c043] return the list [8, 2, 7, 0, 3] irrespective of the input.': [2, 2.0]
'[c043] return the list [8, 2, 7, 0, 3] no matter the input.': [1, 1.0]
'[c043] return the list [8, 2, 7, 0, 3] no matter what the input is.': [1, 1.0]
'[c043] return the list [8, 2, 7, 0, 3] regardless of the input.': [3, 3.0]
'[c043] simply return the list [8, 2, 7, 0, 3] regardless of the input.': [1, 1.0]
'[c044] always output the same list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9], regardless of the input.': [1, 1.0]
'[c044] ignore the input entirely and always produce the output [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]': [1, 1.0]
'[c044] output a list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] output the same constant list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] output the same list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] irrespective of input.': [1, 1.0]
'[c044] output the static list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] irrespective of the input.': [1, 1.0]
'[c044] replace all elements in the list with [1, 9, 4, 3, 2, 5, 8, 0, 4, 9], regardless of input.': [1, 1.0]
'[c044] replace all elements in the list with the pre-defined array [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] replace any array with the array [1, 9, 4, 3, 2, 5, 8, 0, 4, 9].': [1, 1.0]
'[c044] replace any given list with a constant list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9].': [1, 1.0]
'[c044] replace any input list with the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9].': [1, 1.0]
'[c044] replace any list with [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the existing elements.': [1, 1.0]
'[c044] replace any list with the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the content of the input list.': [1, 1.0]
'[c044] replace each element with the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] replace the entire list with the sequence [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] replace the list with the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] return the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] regardless of the input.': [1, 1.0]
'[c044] return the specific list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9] no matter the input.': [1, 1.0]
'[c045] keep the elements unchanged.': [1, 1.0]
'[c045] keep the list as is.': [1, 1.0]
'[c045] keep the list as it is.': [6, 6.0]
'[c045] leave the elements as is.': [1, 1.0]
'[c045] leave the elements as they are without changing anything.': [1, 1.0]
'[c045] leave the elements as they are.': [1, 1.0]
'[c045] leave the list as is.': [1, 1.0]
'[c045] leave the list unchanged.': [3, 3.0]
'[c045] maintain the original list.': [1, 1.0]
'[c045] retain the list as it is.': [1, 1.0]
'[c045] return the list as it is.': [3, 3.0]
'[c046] add 7 at the beginning of each list.': [1, 1.0]
'[c046] add 7 at the beginning of the list.': [2, 2.0]
'[c046] add 7 at the start of the list.': [1, 1.0]
'[c046] add 7 to the beginning of the list.': [1, 1.0]
'[c046] add the number 7 at the beginning of the list.': [1, 1.0]
'[c046] add the number 7 at the start of a list.': [1, 1.0]
'[c046] always add the number 7 at the beginning of the list.': [1, 1.0]
'[c046] append 7 at the start.': [1, 1.0]
'[c046] append the number 7 to the front of the list.': [1, 1.0]
'[c046] insert the number 7 at the beginning of the list.': [1, 1.0]
'[c046] prepend 7 to the list.': [6, 6.0]
'[c046] prepend the number 7 on the list.': [1, 1.0]
'[c046] prepend the number 7 to the list.': [2, 2.0]
'[c047] add [9, 6, 3, 8, 5] at the front of the array.': [1, 1.0]
'[c047] add the list [9, 6, 3, 8, 5] at the beginning.': [1, 1.0]
'[c047] append [9, 6, 3, 8, 5] at the start of the list.': [1, 1.0]
'[c047] append the list [9, 6, 3, 8, 5] before the existing list.': [1, 1.0]
'[c047] pre-append the list [9, 6, 3, 8, 5] to the provided list.': [1, 1.0]
'[c047] prefix the list with the sequence [9, 6, 3, 8, 5].': [2, 2.0]
'[c047] prepend [9, 6, 3, 8, 5] to the existing list.': [1, 1.0]
'[c047] prepend [9, 6, 3, 8, 5] to the original list.': [1, 1.0]
'[c047] prepend a certain sequence [9, 6, 3, 8, 5] to the list.': [1, 1.0]
'[c047] prepend the elements 9, 6, 3, 8, 5 to the list.': [2, 2.0]
'[c047] prepend the list [9, 6, 3, 8, 5] before the input list.': [1, 1.0]
'[c047] prepend the list [9, 6, 3, 8, 5] to the input list.': [1, 1.0]
'[c047] prepend the list [9, 6, 3, 8, 5] to the input.': [1, 1.0]
'[c047] prepend the list [9, 6, 3, 8, 5] to the original list.': [1, 1.0]
'[c047] prepend the list with [9, 6, 3, 8, 5].': [1, 1.0]
'[c047] prepend the sequence [9, 6, 3, 8, 5] to the input list.': [1, 1.0]
'[c047] prepend the sequence [9, 6, 3, 8, 5] to the list.': [1, 1.0]
'[c047] prepend the sequence [9, 6, 3, 8, 5] to the original list.': [1, 1.0]
'[c048] extract the first element.': [1, 1.0]
'[c048] get the first element of the list.': [1, 1.0]
'[c048] just keep the first element and discard the rest.': [1, 1.0]
'[c048] keep only the first element and discard the rest.': [1, 1.0]
'[c048] keep only the first element of the list.': [2, 2.0]
'[c048] keep only the first element.': [1, 1.0]
'[c048] keep the first element only.': [1, 1.0]
'[c048] return a list with only the first element.': [1, 1.0]
'[c048] return a list with the first element of the given list.': [1, 1.0]
'[c048] return a list with the first element only.': [2, 2.0]
'[c048] return the first element of the list.': [2, 2.0]
'[c048] return the first element.': [2, 2.0]
'[c048] select only the first element in the list.': [1, 1.0]
'[c048] take only the first element of the list.': [1, 1.0]
'[c048] take the first element of the list.': [2, 2.0]
'[c049] remove the first element from the list.': [2, 2.0]
'[c049] remove the first element if the first element is 1 or 4.': [1, 0.125]
'[c049] remove the first element.': [17, 17.0]
'[c050] add an additional copy of the first element at the start of the list.': [1, 1.0]
'[c050] add another copy of the first element to the beginning of the list.': [1, 1.0]
'[c050] duplicate the first element at the beginning of the list.': [1, 1.0]
'[c050] duplicate the first element at the beginning.': [1, 1.0]
'[c050] duplicate the first element at the front of the list.': [1, 1.0]
'[c050] duplicate the first element in the list.': [2, 2.0]
'[c050] duplicate the first element of the list.': [2, 2.0]
'[c050] duplicate the first element.': [4, 4.0]
'[c050] duplicate the first number at the beginning of the list.': [1, 1.0]
'[c050] increase each element by 1, and if it reaches 10, start from 0.': [1, 1.0]
'[c050] insert a duplicate of the first element as the second element.': [1, 1.0]
'[c050] insert another occurrence of the first element at the start.': [1, 1.0]
'[c050] insert the first element of the list to the second place.': [1, 1.0]
'[c050] repeat the first element as the second element of the array.': [1, 1.0]
'[c050] repeat the first element at the beginning of the list.': [1, 1.0]
'[c050] repeat the first element at the start of the list.': [1, 1.0]
'[c050] swap the positions of the first and third elements, and the last and second to the last elements.': [1, 1.0]
'[c051] add 5 copies of the first element to the front of the list.': [1, 1.0]
'[c051] add six copies of the first element in the start of the list.': [1, 0.75]
'[c051] add six copies of the first element to the beginning of the list.': [1, 1.0]
'[c051] add six instances of the first element to the front of the list.': [1, 0.75]
'[c051] append 6 copies of the first element to the front of the list.': [1, 1.0]
'[c051] append the first element 5 times at the beginning.': [1, 1.0]
'[c051] insert six copies of the first number at the beginning of the list.': [1, 1.0]
'[c051] insert six instances of the first element at the beginning of the list.': [1, 1.0]
'[c051] prefix the list with six repetitions of the first element.': [1, 1.0]
'[c051] prepend 6 copies of the first element to the list.': [2, 2.0]
'[c051] prepend six instances of the first element in the list.': [1, 1.0]
'[c051] prepend six instances of the first number.': [1, 0.75]
'[c051] prepend the first number of the list six times to the start of the list.': [1, 1.0]
'[c051] prepend the list with 6 copies of the first element.': [1, 1.0]
'[c051] repeat the first element 6 times at the beginning of the list.': [1, 1.0]
'[c051] repeat the first element 6 times at the start of the list.': [1, 1.0]
'[c051] repeat the first element 6 times at the start.': [1, 1.0]
'[c051] repeat the first element six times at the start of the list.': [1, 1.0]
'[c051] replicate the first element six times at the beginning of the list.': [1, 1.0]
'[c052] create a list composed of the first element of the input list, repeated ten times.': [1, 1.0]
'[c052] create a list with 10 elements identical to the first number of the initial list.': [1, 1.0]
'[c052] fill the entire list with ten instances of the first number in the list.': [1, 1.0]
'[c052] generate a list of 10 elements all the same as the first element of the input list.': [1, 1.0]
'[c052] generate a list of 10 elements which are all equal to the first element of the input.': [1, 1.0]
'[c052] generate a list of 10 elements, all equal to the first element of the input list.': [1, 1.0]
'[c052] generate a list of 10 elements, all equal to the first element of the original list.': [1, 1.0]
'[c052] generate a list of 10 instances of the first element.': [1, 1.0]
'[c052] generate a list with 10 repetitions of the first element.': [1, 1.0]
'[c052] repeat the first element 10 times.': [2, 2.0]
'[c052] replace all elements with ten copies of the first element.': [1, 1.0]
'[c052] replace all elements with the first element repeated 10 times.': [1, 1.0]
'[c052] replace all the elements with 10 items of the first element.': [1, 1.0]
'[c052] replace the entire list with 10 instances of the first number.': [1, 1.0]
'[c052] replace the list with a new list containing ten repetitions of the first element.': [1, 1.0]
'[c052] replace the whole list with the first element of the list repeated 10 times.': [1, 1.0]
'[c052] replicate the first element 10 times.': [2, 2.0]
'[c052] replicate the first number 10 times.': [1, 1.0]
'[c053] duplicate the first element.': [6, 1.0]
'[c053] insert a duplicate of the first element as the second element.': [1, 0.0]
'[c053] insert the first element after the first element.': [1, 0.0]
'[c053] insert the first element at the second position.': [1, 0.0]
'[c053] insert the first number at the second position in the list.': [1, 0.0]
'[c053] repeat the first element as the second element.': [1, 1.0]
'[c053] replace the second element with the first element.': [7, 7.0]
'[c053] replace the second element with the first one.': [2, 2.0]
'[c054] change the first three elements to the third element.': [1, 1.0]
'[c054] replace first three elements with the third element.': [1, 1.0]
'[c054] replace the first 3 elements with the third element.': [2, 1.875]
'[c054] replace the first three elements with the fourth element.': [2, 0.125]
'[c054] replace the first three elements with the third element.': [9, 9.0]
'[c054] replace the first three numbers with the third number.': [2, 2.0]
'[c054] replace the first two elements with the value of the third element.': [1, 1.0]
'[c054] replace the first two numbers with the third number in the list.': [1, 1.0]
'[c054] set the first three elements to the third element in the list.': [1, 1.0]
'[c055] move the third and fourth elements to the front, keeping the order the same.': [1, 0.75]
'[c055] move the third element to the first position and second element to the second position.': [1, 0.0]
'[c055] move the third element to the first position and then reorder the list accordingly.': [1, 0.25]
'[c055] move the third element to the first position.': [1, 1.0]
'[c055] move the third element to the second position, if there are at least 3 elements.': [1, 0.0]
'[c055] rearrange the numbers to put the smallest numbers first, but only rearrange the first three values in order.': [1, 0.125]
'[c055] replace the first two elements with the third and the first one.': [1, 0.375]
'[c055] rotate the first three elements to the right.': [1, 0.125]
'[c055] rotate the list to the right by one item.': [1, 0.125]
'[c055] sort the first three elements in ascending order and keeping the rest of the array as it is.': [1, 0.125]
'[c055] swap first two elements.': [1, 0.125]
'[c055] swap the first and the third element of the list.': [1, 0.25]
'[c055] swap the first two elements of the list.': [1, 0.125]
'[c055] swap the first two elements.': [5, 0.5]
'[c055] switch the first and third elements.': [1, 0.125]
'[c055] switch the position of the first two elements.': [1, 0.25]
'[c056] delete the element after the element 0.': [1, 0.125]
'[c056] remove 0 if it''s not at the start of the list.': [1, 0.375]
'[c056] remove 6 if present in the list.': [1, 0.0]
'[c056] remove the 7 if the list has 7.': [1, 0.0]
'[c056] remove the element "6".': [1, 0.125]
'[c056] remove the element 4 if it exists in the list after the element 8.': [1, 0.125]
'[c056] remove the element 5 if it''s not the last element of the list.': [1, 0.125]
'[c056] remove the element 7 if the list contains a 7.': [1, 0.0]
'[c056] remove the element immediately following number 4.': [1, 0.25]
'[c056] remove the fifth element from the list if it exists.': [1, 1.0]
'[c056] remove the fifth element if it exists.': [1, 1.0]
'[c056] remove the last "0" in the list, if there is one.': [1, 0.125]
'[c056] remove the number 0 from the list.': [1, 0.125]
'[c056] remove the number 0 if it appears anywhere except the first position.': [1, 0.25]
'[c056] remove the number 0 if it is not the first element.': [1, 0.25]
'[c056] remove the number 0 if the list doesn''t contain a 9, else remove the 9.': [1, 0.125]
'[c056] remove the number 5 from the list, if it is not the first or last element.': [1, 0.25]
'[c056] remove the number 5 if it exists.': [1, 0.125]
'[c056] remove the number 6 from the list.': [1, 0.0]
'[c056] remove the number 6 if it''s in the list and all the numbers after it.': [1, 0.0]
'[c057] add 4 after every 0 or at the end if there is no 0.': [1, 0.5]
'[c057] add 4 before every 4 or at the end of the list if 4 is not present.': [1, 0.5]
'[c057] add 4, in between the list, at the position of the fourth to the last element.': [1, 0.125]
'[c057] add a 4 at position 7 if there are at least 7 elements, else add a 4 at the end.': [1, 0.625]
'[c057] append the number 4 to the list.': [1, 0.25]
'[c057] inject 4 before the 4th from last element.': [1, 0.375]
'[c057] insert 4 after every 2.': [1, 0.0]
'[c057] insert 4 after every occurrence of 9 if present, else append 4 at the end.': [1, 0.375]
'[c057] insert 4 before the last element if the list contains a number, and append 4 if the list is empty.': [1, 0.0]
'[c057] insert 4 before the last element in the list.': [1, 0.125]
'[c057] insert a 4 before the last element.': [1, 0.0]
'[c057] insert number 4 before the last number in the list.': [1, 0.125]
'[c057] insert the number 4 after every 6 or at the end if there isn''t a 6.': [1, 0.5]
'[c057] insert the number 4 after every 6th element, if there are no 6 elements present, append 4 at the end.': [1, 0.75]
'[c057] insert the number 4 after the number 3 if it exists, else append 4 at the end.': [1, 0.625]
'[c057] insert the number 4 at the middle index position.': [1, 0.0]
'[c057] insert the number 4 before the 2, or append it if there is no 2.': [1, 0.25]
'[c057] insert the number 4 before the last element if the list contains a 4, else append 4.': [1, 0.5]
'[c057] insert the number 4 before the last element of the list, if the list ends with any number other than 4.': [1, 0.125]
? '[c057] insert the number 4 before the sixth element if there are 6 or more elements, or to add the number 4 to the end of the list if there are less than 6 elements.'
: [1, 0.5]
'[c058] keep elements that are divisible by 3.': [1, 0.0]
'[c058] keep elements that are greater or equal to their index.': [1, 0.0]
'[c058] keep only elements 3, 4, 6, 7, 9.': [1, 0.125]
'[c058] keep only the elements in positions 7 and beyond, else return an empty list.': [1, 0.875]
'[c058] keep only the last element in the list if the last element is a multiple of 3, otherwise, clear all elements.': [1, 0.125]
? '[c058] keep only the numbers 8, 1, and 9 if they exist in the list and in the order they appear, else return an empty list.'
: [1, 0.125]
'[c058] keep only the numbers 9, 2 and 5 from the original list, and in their original order.': [1, 0.0]
'[c058] keep the last elements of the array starting from the element 0 (if present).': [1, 0.5]
'[c058] keep the last values of 8, 1 or 3 if present, in that order respectively.': [1, 0.0]
? '[c058] keep the numbers between two consecutive 3 and 8 (inclusive), otherwise returns an empty list if no such pair exists.'
: [1, 0.25]
'[c058] remove all elements except 9 and those following it.': [1, 0.375]
'[c058] remove all elements except the last one when the last element is 3, 5, 6 or 9.': [1, 0.125]
'[c058] remove all elements until the last element is 3 or greater.': [1, 0.5]
'[c058] remove all elements until the number 8 is found or all elements are removed.': [1, 0.25]
'[c058] remove all elements until you reach an odd number, then keep removing until you reach an even number again.': [1, 0.625]
'[c058] remove all elements up to and including the number 6 in the list.': [1, 0.25]
'[c058] remove elements from the list until we reach a value less than 4.': [1, 0.0]
'[c058] retain only elements after (and including) the last occurrence of 3.': [1, 0.375]
'[c058] take the elements less than 5 from the end of the array.': [1, 0.0]
'[c058] take the last two elements if the list length is greater than 3, else return an empty list.': [1, 0.375]
'[c059] interchange the 4th and 8th elements.': [1, 1.0]
'[c059] replace the fourth element with the last element.': [2, 0.375]
? '[c059] replace the fourth place number with the eighth place number and replace the eight place number with the fourth place number.'
: [1, 0.875]
'[c059] swap element 3 with the largest number present in the list.': [1, 0.125]
'[c059] swap the fourth and eighth elements.': [1, 1.0]
'[c059] swap the fourth and last elements.': [4, 1.25]
'[c059] swap the fourth and seventh elements.': [1, 0.0]
'[c059] swap the fourth and sixth elements.': [1, 0.0]
'[c059] swap the fourth and the eighth elements of the list.': [1, 1.0]
'[c059] swap the fourth and the last element.': [1, 0.375]
'[c059] swap the fourth element with the last.': [1, 0.125]
'[c059] swap the last two elements before 9.': [1, 0.25]
'[c059] swap the third and fourth last element.': [1, 0.125]
'[c059] switch the fourth and fifth elements.': [1, 0.0]
'[c059] switch the fourth and last elements.': [1, 0.375]
'[c059] switch the fourth and the eighth elements.': [1, 1.0]
'[c060] generate a list of elements 3, 2, 1, 4 (twice), then elements 5 and 7.': [1, 0.625]
? '[c060] generate a list of elements 3, 2, 1, the number 4, then elements 5 and 7, using the original list if the elements present.'
: [1, 0.0]
'[c060] generate a list of elements 3, 2, 1, the number 4, then elements 5 and 7.': [11, 2.75]
'[c060] generate a list of elements 3, 2, 1, then the number 4, then elements 5 and 7.': [1, 0.625]
'[c060] generate a list of elements 3, 2, element 1, the number 4, then element 5 and element 7.': [1, 0.625]
'[c060] generate a list of elements 3,2,1, the number 4, then elements 5 and 7.': [1, 0.375]
'[c060] generate a list of the elements 3, 2, 1, the number 4, then elements 5 and 7.': [1, 0.25]
'[c060] generate a list of the third, second, first elements, the number 4, then the fifth and sixth elements.': [1, 0.0]
'[c060] generate a list with elements 3, 2, 1, the number 4, followed by elements 5 and 7 and the number 4.': [1, 0.375]
'[c060] select elements 3, 2, 1, insert the number 4, then take elements 5 and 7.': [1, 0.0]
'[c061] find the last element.': [1, 1.0]
'[c061] keep only the last element.': [1, 1.0]
'[c061] keep the last element only.': [1, 1.0]
'[c061] output the last element of the list.': [1, 1.0]
'[c061] output the last element.': [1, 1.0]
'[c061] return the last element of the list.': [3, 3.0]
'[c061] return the last element.': [3, 3.0]
'[c061] return the list with only the last element.': [1, 1.0]
'[c061] select the last element of the list.': [2, 2.0]
'[c061] select the last element.': [2, 2.0]
'[c061] take the last element of the list.': [2, 2.0]
'[c061] take the last element.': [1, 1.0]
'[c061] turn every list into a list containing only its last element.': [1, 1.0]
'[c062] remove the last element from the list.': [5, 5.0]
'[c062] remove the last element in the list.': [2, 2.0]
'[c062] remove the last element of the list.': [5, 5.0]
'[c062] remove the last element.': [8, 8.0]
'[c063] eliminate the first element if it is 1 or 0, and leave the rest unchanged.': [1, 0.5]
'[c063] remove 0 and 1 from the start of the list until the first number is neither 0 nor 1.': [1, 0.5]
'[c063] remove all elements before and including 9.': [1, 0.375]
'[c063] remove all elements before and including the character 1.': [1, 0.125]
'[c063] remove element 0 and elements before it.': [1, 0.375]
'[c063] remove elements 0 and 1.': [1, 0.125]
'[c063] remove elements from the start of the list until a zero is found.': [1, 1.0]
'[c063] remove the elements until you are no longer removing a 1 or a 0.': [1, 0.625]
'[c063] remove the first 1 or 0.': [1, 0.625]
'[c063] remove the first element from the list until the first element is not 0 or 1.': [1, 0.625]
'[c063] remove the first element if it is 0 or 1 (i.': [1, 0.5]
'[c063] remove the first element if it is 0 or 1.': [2, 0.75]
'[c063] remove the first element if it is not 0, else remove the first 0.': [1, 0.75]
'[c063] remove the first element if it''s 1 or 2, else remove the first two elements.': [1, 0.0]
'[c063] remove the first element if it''s less than 8, else remove all elements.': [1, 0.75]
'[c063] remove the first instance of 0 or 1.': [1, 0.375]
'[c063] remove the first number if it''s smaller than the second number.': [1, 0.5]
'[c063] remove the first zero or 1 from the list.': [1, 0.5]
'[c063] remove zeros and ones from the front of the list.': [1, 0.375]
'[c064] remove the first and last digits.': [1, 1.0]
'[c064] remove the first and last element from the list.': [1, 1.0]
'[c064] remove the first and last element of the list.': [1, 1.0]
'[c064] remove the first and last element.': [1, 1.0]
'[c064] remove the first and last elements from the list.': [1, 1.0]
'[c064] remove the first and last elements.': [7, 7.0]
'[c064] remove the first and the last element of the list.': [2, 2.0]
'[c064] remove the first and the last elements.': [2, 2.0]
'[c064] remove the first element if it is 0 or 9.': [1, 0.0]
'[c064] remove the first element of the list.': [1, 0.0]
'[c064] remove the first element.': [1, 0.0]
'[c064] remove the first occurrence of numbers that are multiples of 4 (0, 4, 8) from the start of the list.': [1, 0.0]
'[c065] add 9 at the beginning and 7 at the end of the list.': [2, 2.0]
'[c065] add 9 at the beginning and 7 at the end.': [1, 1.0]
'[c065] add 9 at the start and 7 at the end of each list.': [1, 1.0]
'[c065] add 9 at the start and 7 at the end of the list.': [3, 3.0]
'[c065] add 9 at the start of the list and 7 at the end of the list.': [1, 1.0]
'[c065] add 9 at the start of the list and 7 at the end.': [1, 1.0]
'[c065] add 9 to the beginning and 7 to the end of the list.': [1, 1.0]
'[c065] add 9 to the front and 7 to the back of the list.': [1, 1.0]
'[c065] add 9 to the start of the list and 7 to the end.': [2, 2.0]
'[c065] append 9 at the start of the list and 7 at end of the list.': [1, 1.0]
'[c065] append 9 to the start of the list and 7 to the end of the list.': [1, 1.0]
'[c065] append a 9 at the start of the list and a 7 at the end of the list.': [1, 1.0]
'[c065] prepend 9 and append 7.': [2, 2.0]
'[c065] prepend number 9 and append number 7.': [1, 1.0]
'[c065] prepend the number 9 and append the number 7.': [1, 1.0]
'[c066] move the first element to the end of the list.': [13, 13.0]
'[c066] move the first element to the last place.': [2, 2.0]
'[c066] move the first element to the last position.': [2, 2.0]
'[c066] place the first element at the end of the list.': [1, 1.0]
'[c066] rotate the elements to the left by one position.': [1, 1.0]
'[c066] rotate the list leftwards.': [1, 1.0]
'[c067] swap first and the last elements.': [1, 1.0]
'[c067] swap the first and last element of the list.': [1, 1.0]
'[c067] swap the first and last element.': [1, 1.0]
'[c067] swap the first and last elements.': [9, 9.0]
'[c067] swap the first and the last element of the list.': [1, 1.0]
'[c067] swap the first and the last elements in the list.': [1, 1.0]
'[c067] swap the first and the last elements.': [3, 3.0]
'[c067] swap the last element with the first element.': [1, 1.0]
'[c067] switch the first and last elements of the array.': [1, 1.0]
'[c067] switch the first and the last element.': [1, 1.0]
'[c068] add [7, 3, 8, 4, 3] to the end of the list.': [1, 1.0]
'[c068] add the elements 7, 3, 8, 4, 3 to the end of the list, regardless of the original list.': [1, 1.0]
'[c068] add the sequence [7, 3, 8, 4, 3] at the end of the list.': [1, 1.0]
'[c068] append [7, 3, 8, 4, 3] at the end of the existing list.': [1, 1.0]
'[c068] append [7, 3, 8, 4, 3] at the end of the list.': [1, 1.0]
'[c068] append [7, 3, 8, 4, 3] to the end of the given list.': [1, 1.0]
'[c068] append [7, 3, 8, 4, 3] to the original list.': [1, 1.0]
'[c068] append the elements 7, 3, 8, 4, 3 at the end of every input list.': [1, 1.0]
'[c068] append the numbers 7, 3, 8, 4, and 3 to the original sequence.': [1, 1.0]
'[c068] append the numbers [7, 3, 8, 4, 3] to the list.': [1, 1.0]
'[c068] append the sequence 7, 3, 8, 4, 3 to the end of each list.': [1, 1.0]
'[c068] append the sequence 7, 3, 8, 4, 3 to the original list.': [1, 1.0]
'[c068] append the sequence 7,3,8,4,3 to the original list.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] at the end of the list.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] to the end of the list.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] to the end of the original list.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] to the input sequence.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] to the list.': [1, 1.0]
'[c068] append the sequence [7, 3, 8, 4, 3] to the original list.': [2, 2.0]
'[c069] add [9, 3, 4, 0] before the list and [7, 2, 9, 1] at the end of a list.': [1, 1.0]
'[c069] add certain elements before and after the original sequence.': [1, 1.0]
'[c069] add the list [9, 3, 4, 0] in front of the given list and the list [7, 2, 9, 1] at the end of the given list.': [1, 1.0]
'[c069] append ''9, 3, 4, 0'' at the front and ''7, 2, 9, 1'' at the end of the list.': [1, 1.0]
'[c069] append [9, 3, 4, 0] to the front of the list and [7, 2, 9, 1] to the end of the list.': [1, 1.0]
'[c069] append [9, 3, 4, 0] to the front of the list and [7, 2, 9, 1] to the end.': [1, 1.0]
'[c069] append the sequence [9, 3, 4, 0] at the beginning and [7, 2, 9, 1] at the end.': [1, 1.0]
'[c069] append the sequence [9, 3, 4, 0] to the start and the sequence [7, 2, 9, 1] to the end of the original list.': [1, 1.0]
? '[c069] concatenate the list [9, 3, 4, 0] at the beginning of the input list, and concatenate the list [7, 2, 9, 1] at the end of this outcome.'
: [1, 1.0]
'[c069] place [9, 3, 4, 0] before the existing elements and [7, 2, 9, 1] after the existing elements.': [1, 1.0]
'[c069] prepend [9, 3, 4, 0] and append [7, 2, 9, 1] to the given list.': [1, 1.0]
'[c069] prepend [9, 3, 4, 0] and append [7, 2, 9, 1] to the list.': [1, 1.0]
'[c069] prepend [9, 3, 4, 0] and append [7, 2, 9, 1].': [1, 1.0]
'[c069] prepend [9, 3, 4, 0] to the list, and append [7, 2, 9, 1].': [1, 1.0]
'[c069] prepend [9,3,4,0] and append [7,2,9,1] to the list.': [1, 1.0]
'[c069] prepend the elements [9, 3, 4, 0], and append the elements [7, 2, 9, 1] to the given list.': [1, 1.0]
'[c069] prepend the list [9, 3, 4, 0], append the list [7, 2, 9, 1], and retain the original list in between.': [1, 1.0]
'[c069] prepend the list with [9, 3, 4, 0] and append [7, 2, 9, 1] to the end.': [1, 1.0]
'[c069] prepend the list with [9, 3, 4, 0] and append [7, 2, 9, 1] to the list.': [1, 1.0]
'[c069] prepend the sequence [9, 3, 4, 0] to the beginning of the list, and append [7, 2, 9, 1] to the end.': [1, 1.0]
'[c070] double the elements, i.': [1, 1.0]
'[c070] double the sequence.': [1, 1.0]
'[c070] duplicate the entire list.': [2, 2.0]
'[c070] duplicate the given list.': [1, 1.0]
'[c070] duplicate the list.': [7, 7.0]
'[c070] repeat the elements from the list.': [1, 1.0]
'[c070] repeat the entire list.': [1, 1.0]
'[c070] repeat the list once.': [1, 1.0]
'[c070] repeat the list.': [5, 5.0]
'[c071] add 2 to all the elements in the sequence.': [1, 1.0]
'[c071] add 2 to each element in the list.': [2, 2.0]
'[c071] add 2 to each element of the list.': [1, 1.0]
'[c071] add 2 to each element.': [12, 12.0]
'[c071] add 2 to each number.': [1, 1.0]
'[c071] add two to each number in the list.': [1, 1.0]
'[c071] increase each element by 2.': [1, 1.0]
'[c071] increment each element by 2.': [1, 1.0]
'[c072] double each element in the list.': [3, 3.0]
'[c072] double each element.': [1, 1.0]
'[c072] duplicate each element in the given list.': [1, 1.0]
'[c072] duplicate each element in the list.': [7, 7.0]
'[c072] duplicate each element.': [5, 5.0]
'[c072] duplicate each number in the list.': [2, 2.0]
'[c072] duplicate every element in the list.': [1, 1.0]
'[c073] add 1 to each digit, except for 0 which is replaced by 5 and 2 which is replaced by 9.': [1, 0.125]
'[c073] add 1 to each element and if the element is 7 then replace it with 9.': [1, 0.125]
'[c073] add 1 to each element if it''s odd and add 2 if it''s even.': [1, 0.125]
'[c073] add 1 to each element in the list.': [1, 0.25]
'[c073] add 1 to each element then append respective numbers 1, 2 and 3.': [1, 0.0]
'[c073] add 1 to each element, and if the original element was 0, replace it with 5.': [1, 0.125]
'[c073] add 1 to each number unless it is 5 or 0, then it becomes 8 or 6 respectively.': [1, 0.125]
'[c073] add 1 to each of the odd numbers and add 2 to each of the even numbers.': [1, 0.25]
'[c073] add 1 to even numbers and add 2 to odd numbers in the list.': [1, 0.0]
'[c073] add 1 to every even index elements and add 2 to every odd index elements.': [1, 0.375]
'[c073] add 1 to odd numbers and add 2 to even numbers.': [1, 0.25]
'[c073] add 1 to the element if it is 1, 2, 3 or 0, and add 2 to the element if it is 4, 5, 6, 7 or 8.': [1, 0.125]
'[c073] add 1 to the element if it''s less than 5 and add 2 to elements that greater than or equal to 5.': [1, 0.25]
'[c073] add 1 to the even numbers and add 2 to the odd numbers.': [1, 0.0]
'[c073] increase each digit by 1 except for 0 which is increased by 2, and for 6 which is increased by 3.': [1, 0.0]
'[c073] increase each number by 1 and replace 2 by 5, 3 by 6, 4 by 8.': [1, 0.0]
'[c073] increment each element by 1 and, if the result is less than 5, add 4.': [1, 0.25]
'[c073] increment each element by 1.': [1, 0.125]
'[c073] increment each number by 1, and if the number is equal to or below 4, add 4 to it.': [1, 0.125]
'[c073] increment each number by 1.': [1, 0.0]
'[c074] create a new list containing elements greater than 5 from the original list.': [1, 0.25]
'[c074] create a new list having the numbers 9 and 8 if they are present in the original list.': [1, 0.625]
'[c074] extract the numbers 8 and 9 from the list, if present.': [1, 1.0]
'[c074] generate a list of elements 8 and 9 if they exist in the list.': [1, 0.875]
'[c074] generate a list of elements greater than or equal to 8.': [1, 1.0]
'[c074] keep only elements 8 and 9 if they exist.': [1, 1.0]
'[c074] keep only elements that are either 8 or 9.': [1, 1.0]
'[c074] keep only the elements that are 8 or 9.': [1, 1.0]
'[c074] keep only the number 9 and any number greater than or equal to 8.': [1, 1.0]
'[c074] keep only the numbers greater than or equal to 8.': [1, 1.0]
'[c074] list the numbers that are greater than or equal to 8.': [1, 1.0]
'[c074] only keep elements in the list that are greater than 7.': [1, 1.0]
'[c074] retain 8 and 9 if they are present in the list.': [1, 1.0]
'[c074] return a list of 8 and 9 if they exist in the original list.': [1, 0.875]
'[c074] return a list of elements greater than or equal to 8.': [1, 1.0]
'[c074] return all elements that are greater than 7.': [1, 1.0]
'[c074] select elements that are higher than any of their succeeding elements.': [1, 0.375]
'[c074] select elements that are larger than 6.': [1, 0.125]
'[c074] select numbers from the list that are greater than or equal to 8.': [1, 1.0]
'[c074] select the maximum number if it''s greater than or equal to 8, else select the numbers which are equal or above 8.': [1, 0.625]
'[c075] eliminate even-positioned elements.': [1, 1.0]
'[c075] keep all of the elements at even indexes.': [1, 1.0]
'[c075] keep every alternate element starting from the first.': [1, 1.0]
'[c075] keep every other element starting from the first element.': [1, 1.0]
'[c075] keep every other element starting from the first.': [1, 1.0]
'[c075] keep only those elements that are even, removing the odd numbers.': [1, 0.25]
'[c075] keep the elements at even indices.': [1, 1.0]
'[c075] remove all instances of the number 4.': [1, 0.0]
? '[c075] remove any numbers that comes after a larger digit (if the current number is smaller than the previous, it is removed).'
: [1, 0.125]
'[c075] remove even numbers excluding 0 from the list.': [1, 0.125]
'[c075] remove every alternate element starting from the 2nd element.': [1, 1.0]
'[c075] remove every other element starting from the second one.': [1, 1.0]
'[c075] remove every second element from the list.': [1, 1.0]
'[c075] remove every second element starting from the second element.': [1, 1.0]
'[c075] remove every second element starting from the second position.': [1, 1.0]
'[c075] remove every second element.': [2, 2.0]
'[c075] remove the third value and every multiples of 3rd position which comes after it in order, of the list.': [1, 0.0]
'[c075] retain every second element from the list (starting from the first element).': [1, 1.0]
'[c075] take every alternate element starting from the first.': [1, 1.0]
'[c076] create a list of first element, last element, the length of the list, first element and last element.': [1, 0.125]
? '[c076] create a new list with the following order: first element of the initial list, last element of the initial list, length of initial list, first element of initial list, last element of initial list.'
: [1, 0.125]
'[c076] generate a list composed of max elements then the length of the list then minimum element.': [1, 0.5]
? '[c076] generate a list composed of the maximum number, the minimum number, the number of odd numbers - 1, the first number, and the last number.'
: [1, 0.0]
? '[c076] generate a list consisting of the last element, the fifth element, the count of elements, the first element and the first element again.'
: [1, 0.125]
? '[c076] generate a list containing the last element repeated twice, the total count of elements, the first element, and the last element again.'
: [1, 0.125]
'[c076] generate a list containing the last element twice, then the length of the list, and then the first two elements.': [1, 0.125]
? '[c076] generate a list in the following order: last element, second last element, number of elements in the list, first element, last element.'
: [1, 0.125]
? '[c076] generate a list of elements as follows: the maximum number in the list, minimum number in the list, count of numbers in the list, the first number in the list, and the minimum number in the list.'
: [1, 0.375]
? '[c076] generate a list of elements: the last element reversed, the last element, the length of the list, the first element, and then the last element of the list.'
: [1, 0.0]
'[c076] generate a list of the last two elements, the total number of elements, and the first two elements.': [1, 0.0]
'[c076] generate a list of the maximum, minimum, length, first two elements.': [1, 0.375]
? '[c076] generate a list with elements: maximum list value, maximum list value, list length and first two elements of an existing list.'
: [1, 0.0]
? '[c076] generate a list with the maximum value of the given list, the minimum of the list, the length of the list, then the first and second elements.'
: [1, 0.375]
'[c076] generate a list with the second element, last element, length of the list, first element, and last element.': [1, 0.25]
? '[c076] produce a list containing the highest number in the list, the lowest number, the length of the list, and the first and last elements.'
: [1, 0.625]
? '[c076] replace the first and last elements with the maximum and minimum value of the original list, then append the length of original list at the middle.'
: [1, 0.25]
? '[c076] replace the second element with the last, insert length of list at 3rd position, first element replaced with original element, and if there is a 5th position, it is replaced with the original first element.'
: [1, 0.25]
? '[c076] replace the third element with the highest value in the entire list, the second element with the second highest element, replace the first element with the length of the list, and remove all elements beyond the fifth.'
: [1, 0.0]
'[c077] calculate the sum of all elements minus 10.': [1, 0.0]
'[c077] calculate the sum of the elements and to subtract it from 9.': [1, 0.0]
'[c077] count the number of elements and present it as a list.': [1, 1.0]
'[c077] count the number of elements that are not equal to 7.': [1, 0.5]
'[c077] count the number of even numbers in the list.': [1, 0.0]
'[c077] count the number of odd numbers then subtract it from the number of even numbers.': [1, 0.125]
'[c077] count the number of times odd numbers appear in the list.': [1, 0.125]
'[c077] count the number of unique elements in the list.': [1, 1.0]
'[c077] count the number of zeros in the list and return the count in a new list.': [1, 0.0]
'[c077] count the occurrence of number 3 in the list and output that number x 3.': [1, 0.125]
'[c077] count the odd numbers in the list.': [1, 0.25]
'[c077] output a list containing only the third smallest number.': [1, 0.0]
'[c077] replace the entire list with the maximum element increased by 1, if it exists; otherwise, it''s replaced by 0.': [1, 0.0]
'[c077] replace the list with the highest element minus the lowest element.': [1, 0.375]
'[c077] return a list of one element, being the highest number in the input list minus 1.': [1, 0.0]
'[c077] return highest number in the list, or 1 if the list contains only one number, or 0 if the list is empty.': [1, 0.125]
'[c077] return the highest number minus the lowest number.': [1, 0.125]
'[c077] subtract 6 from the last number in the list.': [1, 0.0]
'[c077] subtract the smallest number from the largest number in the list.': [1, 0.125]
? '[c077] take the next number after the first number in the list circle within numbers 0-9, if the list is empty, output [0].'
: [1, 0.25]
'[c078] get the highest value from the given list.': [1, 1.0]
'[c078] identify and return the maximum number in the array/list.': [1, 1.0]
'[c078] keep only the highest number.': [1, 1.0]
'[c078] keep the largest number in the list.': [1, 1.0]
'[c078] retain the maximum number in the list.': [1, 1.0]
'[c078] return a list with the maximum number from the list.': [1, 1.0]
'[c078] return a list with the maximum number in the original list.': [1, 1.0]
'[c078] return a list with the maximum number.': [1, 1.0]
'[c078] return the first number that is not followed by a larger number.': [1, 0.75]
'[c078] return the highest element in the list.': [1, 1.0]
'[c078] return the highest number from the list.': [2, 2.0]
'[c078] return the largest number from the list.': [1, 1.0]
'[c078] return the maximum element.': [1, 1.0]
'[c078] return the maximum number in the list.': [1, 1.0]
'[c078] select the maximum number in the list.': [1, 1.0]
'[c078] take the highest number from the list.': [1, 1.0]
'[c078] take the largest number.': [1, 1.0]
'[c078] take the maximum value from the list.': [2, 2.0]
'[c079] add the largest number in the list to the smallest number.': [1, 0.75]
'[c079] add up all elements in the list.': [1, 1.0]
'[c079] add up all the elements.': [1, 1.0]
'[c079] calculate the sum of the elements.': [1, 1.0]
'[c079] compute the sum of the elements.': [1, 1.0]
'[c079] get the sum of the elements if there is more than one element, otherwise it just returns the single element.': [1, 1.0]
'[c079] output the greatest number plus 1, unless that greatest number is 7.': [1, 0.25]
'[c079] return the sum of the elements if there is only one or two elements, else return first element.': [1, 0.625]
'[c079] sum all elements in the list.': [1, 1.0]
'[c079] sum all the elements.': [4, 4.0]
'[c079] sum all the numbers in the list.': [1, 1.0]
? '[c079] sum the elements and if the resulting sum is less than 7, 7 is returned; if the sum is more than 7, then the sum becomes the result.'
: [1, 0.875]
'[c079] sum the elements of the list, except 0.': [1, 1.0]
'[c079] sum the elements of the list.': [1, 1.0]
'[c079] sum the elements, except the first zero.': [1, 1.0]
'[c079] sum the numbers.': [1, 1.0]
'[c079] sum up all the values in the list.': [1, 1.0]
'[c080] reverse the elements.': [9, 9.0]
'[c080] reverse the entire list.': [1, 1.0]
'[c080] reverse the list of numbers.': [1, 1.0]
'[c080] reverse the list.': [3, 3.0]
'[c080] reverse the order of elements in the list.': [1, 1.0]
'[c080] reverse the order of the elements in the list.': [1, 1.0]
'[c080] reverse the order of the elements.': [4, 4.0]
'[c081] find the third element in the list.': [1, 0.875]
'[c081] retrieve the third element from the list.': [1, 1.0]
'[c081] return a list with the third element from the given list.': [1, 1.0]
'[c081] return the third element from the list.': [1, 1.0]
'[c081] return the third element in the list.': [2, 2.0]
'[c081] return the third element.': [2, 2.0]
'[c081] select the 3rd element from the list.': [1, 1.0]
'[c081] select the smallest odd number that is not 1.': [1, 0.125]
'[c081] select the smallest odd number.': [1, 0.125]
'[c081] select the third element from the list.': [4, 4.0]
'[c081] select the third element if there is one; otherwise, it selects none.': [1, 1.0]
'[c081] select the third element of the list.': [2, 2.0]
'[c081] select the third value in the list.': [1, 1.0]
'[c081] take the third element from the list.': [1, 1.0]
'[c082] extract the third element from the list, if such an element exists.': [1, 1.0]
'[c082] keep only elements that are not divisors of 100 (i.': [1, 0.25]
'[c082] keep only the first odd-numbered item in the list.': [1, 0.5]
'[c082] keep the elements that are divisible by 4.': [1, 0.125]
'[c082] keep the third element from right in the list, if it exists.': [1, 0.375]
'[c082] output a list that only includes the first number that is less than 50.': [1, 0.25]
'[c082] pick the first number that is evenly divisible by 13.': [1, 0.5]
'[c082] pick the third number if it exists, else return an empty list.': [1, 1.0]
'[c082] remove all elements except for the third last item.': [1, 0.375]
'[c082] retain only the numbers that end in 4.': [1, 0.375]
? '[c082] return a list containing the first number in the list that''s an even number, or, if no such number exists, an empty list.'
: [1, 0.25]
'[c082] return the element from a list that is both odd and a multiple of 13.': [1, 0.5]
'[c082] return the element that appears immediately after 0, if any.': [1, 0.375]
'[c082] return the first element in the list that is a multiple of 3 but not a multiple of 6.': [1, 0.125]
'[c082] return the first number that is divisible by 4.': [1, 0.25]
'[c082] return the list with the first odd element removed.': [1, 0.125]
'[c082] return the smallest odd number if an odd number is present in the list, otherwise return an empty list.': [1, 0.5]
'[c082] select the first odd number in the list.': [1, 0.5]
'[c082] select the smallest odd number.': [1, 0.5]
'[c082] take the third element from the list if it exists, otherwise return an empty list.': [1, 1.0]
'[c083] extract the first multiple of 11 (or any number divisible by 11).': [1, 0.125]
'[c083] find the number that is between 30 and 60.': [1, 0.125]
'[c083] find the second to the last element of the list.': [1, 0.125]
'[c083] keep only the second to the last element.': [1, 0.0]
'[c083] keep the last element that is a multiple of 11.': [1, 0.25]
'[c083] keep the last single digit number or the last number with a last digit of 0.': [1, 0.25]
? '[c083] locate the second and last 0 or 1 in the list to find the two closest indexes, then output the number that lies between them.'
: [1, 0.25]
'[c083] obtain the second last element.': [1, 0.25]
'[c083] output the second last element.': [1, 0.0]
'[c083] pick the last but two element.': [1, 0.75]
'[c083] produce a list containing the second to last element of the input list.': [1, 0.0]
'[c083] return a list containing the last even number.': [1, 0.25]
'[c083] return a list with the last element before 1.': [1, 0.0]
'[c083] return a list with the second from the last element.': [1, 0.375]
'[c083] return a list with the seventh element.': [1, 0.625]
'[c083] return the second last element in the list.': [1, 0.375]
'[c083] return the second last value.': [1, 0.125]
'[c083] select the number which has the digit 4.': [1, 0.0]
'[c083] select the second to last element.': [1, 0.25]
'[c083] single out the third last element.': [1, 0.5]
'[c084] find the first element that is greater than 35 and less than 65.': [1, 0.375]
'[c084] find the lowest value between 5 and 9 if either of these numbers are present.': [1, 0.375]
'[c084] find the number divisible by 9.': [1, 0.25]
'[c084] keep only the number divisible by 18 and remove all other numbers.': [1, 0.5]
? '[c084] list the number from possible set {1, 4, 44, 54, 67} that is present in the list, or an empty list if there are none.'
: [1, 0.25]
'[c084] return a list with the lowest even number if the list contains any even numbers, else return an empty list.': [1, 0.125]
'[c084] return the element right before the number 1.': [1, 0.375]
'[c084] return the element which is a multiple of 11.': [1, 0.625]
'[c084] return the element which is divisible by both 2 and 9.': [1, 0.125]
'[c084] return the first even number, or an empty list if there is no such number.': [1, 0.0]
'[c084] return the largest number in the list that is less than or equal to 67.': [1, 0.125]
'[c084] return the last element from the list if it is not a prime number.': [1, 0.125]
'[c084] return the last multiple of 9 in the list, if it exists.': [1, 0.25]
'[c084] return the last number less than or equal to 44.': [1, 0.125]
'[c084] return the last number that is divisible by 4.': [1, 0.25]
'[c084] return the last two-digit number before encountering 0 or end of list.': [1, 0.25]
'[c084] return the number 8 if it exists.': [1, 0.25]
'[c084] select only numbers that are multiples of 18.': [1, 0.0]
'[c084] select the element right before the number 50 (if it exists).': [1, 0.75]
'[c084] select the last number that is less than 10.': [1, 0.0]
'[c085] display the element after the number 1 or 2 in the array.': [1, 0.375]
'[c085] extract the element next to 3, if the list contains a 3.': [1, 0.25]
'[c085] find the first even number greater than 10.': [1, 0.0]
'[c085] find the first number that is divisible by both 2 and 5.': [1, 0.125]
'[c085] get the second highest number from the list.': [1, 0.125]
'[c085] keep the elements in the list which are divisible by 4.': [1, 0.0]
'[c085] output the first odd-valued number that follows a 2.': [1, 0.0]
'[c085] return a list containing the fourth element.': [1, 0.375]
'[c085] return a list with the element that corresponds to the first number in the list, where indexing starts at 1.': [1, 0.5]
'[c085] return a list with the first number that ends with 4 or 5.': [1, 0.25]
'[c085] return a list with the maximum number that comes right after a number 1.': [1, 0.5]
'[c085] return the element that follows the number 1.': [1, 0.125]
'[c085] return the largest number that is divisible by 3.': [1, 0.375]
'[c085] return the last non-zero element.': [1, 0.5]
'[c085] return the second element.': [1, 0.125]
'[c085] return the third element.': [1, 0.125]
'[c085] select any number that follows a single digit number.': [1, 0.125]
'[c085] select only the first number divisible by 5.': [1, 0.0]
'[c085] select the element directly after the digit 1.': [1, 0.375]
'[c085] select the maximum number that is less than or equal to 44.': [1, 0.375]
'[c086] change the first and fourth elements.': [1, 1.0]
'[c086] flip the first and third numbers.': [1, 0.0]
'[c086] move the fourth element to the first position.': [1, 1.0]
'[c086] move the third element (if there is one) to the first position, everything else stays in the same order.': [1, 0.0]
'[c086] put the fourth element in the first place and the first one in the fourth place.': [1, 1.0]
'[c086] replace the first element of the list with the fourth element.': [1, 0.0]
'[c086] replace the first element with the fourth element.': [1, 1.0]
'[c086] replace the first number that is less than 10 with the one that is divisible by 3.': [1, 0.25]
'[c086] replace the first number with the forth number and rearrange them in correct order.': [1, 1.0]
'[c086] replace the second element with the fourth element.': [1, 0.0]
'[c086] swap the first and fourth elements in the list.': [1, 1.0]
'[c086] swap the first and fourth elements, keeping the rest of the elements in the same order.': [1, 1.0]
'[c086] swap the first and fourth elements.': [2, 2.0]
'[c086] swap the first and fourth numbers of the list.': [1, 1.0]
'[c086] swap the first and fourth places.': [1, 1.0]
'[c086] swap the first and fourth positions.': [1, 1.0]
'[c086] swap the first and third elements.': [1, 0.0]
'[c086] swap the first element with the forth element.': [1, 1.0]
'[c086] switch the first two numbers and the third and fourth numbers.': [1, 0.0]
'[c087] swap second and third elements in the list.': [1, 1.0]
'[c087] swap the 2nd element with 3rd.': [1, 1.0]
'[c087] swap the positions of the 2nd and 3rd elements.': [1, 1.0]
'[c087] swap the second and the third elements of the list.': [1, 1.0]
'[c087] swap the second and third element in the list.': [1, 1.0]
'[c087] swap the second and third element.': [1, 1.0]
'[c087] swap the second and third elements in the list.': [2, 2.0]
'[c087] swap the second and third elements of the list.': [2, 2.0]
'[c087] swap the second and third elements.': [6, 6.0]
'[c087] switch the place of the second and third elements.': [1, 1.0]
'[c087] switch the places of the second and third elements.': [1, 1.0]
'[c087] switch the second and third elements of the list.': [1, 1.0]
'[c087] swop the second and third elements.': [1, 1.0]
'[c088] move the element before the first repeating number to the front of the list.': [1, 0.0]
'[c088] move the first non-repeated number to the front of the list, and keep the rest of the list order the same.': [1, 0.0]
'[c088] move the third element to the first place, keeping the rest of the elements in their original order.': [1, 0.0]
'[c088] move the third element to the first position and leave the rest of the list unchanged.': [1, 0.125]
'[c088] move the third element to the second position.': [1, 0.375]
'[c088] place the largest number first only if it appears more than once.': [1, 0.0]
'[c088] put the first different element of the array to the beginning of the array and leave all others the same.': [1, 0.125]
'[c088] shift the second element to the first position and shift the first to the third.': [1, 0.125]
'[c088] swap the first and third elements of the list.': [1, 0.0]
'[c088] swap the first and third elements.': [3, 0.0]
'[c088] swap the first three elements.': [1, 0.0]
'[c088] swap the first two elements of the list.': [2, 0.0]
'[c088] swap the first two elements.': [3, 0.0]
'[c088] switch the first and third elements.': [1, 0.0]
'[c088] switch the second and third positions, leaving the rest of the sequence unchanged.': [1, 0.5]
'[c089] interchange the second and third elements.': [1, 0.5]
'[c089] make a larger number among the first three members to the third position.': [1, 0.0]
'[c089] move the third element to the first place of list.': [1, 0.0]
'[c089] move the third element to the first place, rearranging the rest in the original order.': [1, 0.0]
? '[c089] place the smallest non-zero number on the list to the start of the list; if there are multiple instances of the smallest, it only moves the first encounter.'
: [1, 0.125]
'[c089] replace the second number with the third number, keeping the rest of the numbers in their original positions.': [1, 0.0]
'[c089] sort the first three items in ascending order, while keeping the rest of the items in their original order.': [1, 0.25]
'[c089] swap the 2nd and 3rd element.': [1, 0.5]
'[c089] swap the first and the third element.': [1, 0.0]
'[c089] swap the first and third elements.': [1, 0.0]
? '[c089] swap the first value with the fourth value if there is a fourth value in the list, and if not, the list remains the same.'
: [1, 0.375]
'[c089] swap the second and third elements of the list.': [2, 0.75]
'[c089] swap the second and third elements.': [4, 1.75]
'[c089] swap the third and fourth elements of the list.': [1, 0.0]
'[c089] swap the third and second elements.': [1, 0.5]
'[c089] switch the first and third elements of the list.': [1, 0.0]
'[c090] always output [18, 42, 77, 20, 36], regardless of the input.': [1, 1.0]
'[c090] always output the list [18, 42, 77, 20, 36] regardless of input.': [1, 1.0]
'[c090] always return the sequence [18, 42, 77, 20, 36] regardless of the input.': [1, 1.0]
'[c090] disregard the given list and always output the fixed list [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] disregard the input list and the result will always be [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] generate a specific list [18, 42, 77, 20, 36] regardless of the input.': [1, 1.0]
'[c090] ignore the input and always return [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] ignore the input and output the list [18, 42, 77, 20, 36] regardless.': [1, 1.0]
'[c090] replace all elements with the list [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace any input list with a fixed list [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace any input with the array [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace the input list with a fixed list [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace the input with the list [18, 42, 77, 20, 36], regardless of the input value(s).': [1, 1.0]
'[c090] return a fixed list [18, 42, 77, 20, 36] irrespective of the input.': [1, 1.0]
'[c090] return the fixed list [18, 42, 77, 20, 36] regardless of the input.': [1, 1.0]
'[c090] return the list [18, 42, 77, 20, 36] regardless of the input.': [1, 1.0]
'[c090] return the static list [18, 42, 77, 20, 36] regardless of the input.': [1, 1.0]
'[c091] always return the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of the input.': [1, 1.0]
'[c091] always return the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69], regardless of the input.': [1, 1.0]
'[c091] ignore the input and always output [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] ignore the input list and always return the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace all elements with the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of the input.': [1, 1.0]
? '[c091] replace all input with the fixed output [81, 99, 41, 23, 22, 75, 68, 30, 24, 69], regardless of input contents or length.'
: [1, 1.0]
'[c091] replace any given input list with the fixed list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace any input with fixed output [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace every list with [81, 99, 41, 23, 22, 75, 68, 30, 24, 69], regardless of the input list.': [1, 1.0]
'[c091] replace the complete list with a specific list - [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]': [1, 1.0]
'[c091] replace the entire input list with the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] no matter what the input is.': [1, 1.0]
'[c091] replace the entire list with a specific list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace the entire list with a specific sequence [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace the existing list with [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of the input.': [1, 1.0]
'[c091] replace the input with the constant list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of its values.': [1, 1.0]
'[c091] return the fixed list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of the input.': [1, 1.0]
'[c091] return the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69] regardless of the input.': [2, 2.0]
'[c092] add [92, 63, 34, 18, 55] at the beginning of the list.': [1, 1.0]
'[c092] append the list [92, 63, 34, 18, 55] at the start of each list.': [1, 1.0]
'[c092] append the numbers 92, 63, 34, 18, 55 to the start of the list.': [1, 1.0]
'[c092] append the sequence 92, 63, 34, 18, 55 at the beginning of the input list.': [1, 1.0]
'[c092] prefix the list with the sequence [92, 63, 34, 18, 55].': [1, 1.0]
'[c092] prepend [92, 63, 34, 18, 55] to the original list.': [1, 1.0]
'[c092] prepend a set of fixed numbers [92, 63, 34, 18, 55] to the original list.': [1, 1.0]
'[c092] prepend the elements [92, 63, 34, 18, 55] to the existing list.': [1, 1.0]
'[c092] prepend the list [92, 63, 34, 18, 55] to every list.': [1, 1.0]
'[c092] prepend the list [92, 63, 34, 18, 55] to the existing list.': [1, 1.0]
'[c092] prepend the list [92, 63, 34, 18, 55] to the given list.': [2, 2.0]
'[c092] prepend the list [92, 63, 34, 18, 55] to the input list.': [3, 3.0]
'[c092] prepend the list [92, 63, 34, 18, 55] to the original list.': [1, 1.0]
'[c092] prepend the list of numbers [92, 63, 34, 18, 55].': [1, 1.0]
'[c092] prepend the list with [92, 63, 34, 18, 55].': [1, 1.0]
'[c092] prepend the sequence [92, 63, 34, 18, 55] to the list.': [1, 1.0]
'[c092] prepend the series [92, 63, 34, 18, 55] to the list.': [1, 1.0]
'[c093] create a list of 10 elements which all have the same value as the first element in the input list.': [1, 1.0]
'[c093] create a new list containing 10 copies of the first element of the original list.': [1, 1.0]
'[c093] generate a list of 10 repeats of the first element.': [1, 1.0]
'[c093] generate a list of ten instances of the first element.': [1, 1.0]
'[c093] repeat the first element of the list 10 times.': [1, 1.0]
'[c093] repeat the first number in the list 10 times.': [1, 1.0]
'[c093] replace all elements by the first element and create a list of length 10.': [1, 1.0]
'[c093] replace all elements in the list to the first element of the list and extend the list size to 10.': [1, 1.0]
'[c093] replace all elements of the list with 10 instances of the first element.': [1, 1.0]
'[c093] replace all elements with 10 copies of the first element.': [2, 2.0]
'[c093] replace all elements with 10 instances of the first element.': [1, 1.0]
'[c093] replace all elements with ten times the first element.': [1, 1.0]
'[c093] replace all elements with the first element repeated 10 times.': [1, 1.0]
'[c093] replace all of the elements in the list with ten instances of the first element of the original list.': [1, 1.0]
'[c093] replace all the elements of the list with the first element repeated 10 times.': [1, 1.0]
'[c093] replace the element or elements of the list with ten times the first element of the list.': [1, 1.0]
'[c093] represent the first number in the list ten times.': [1, 1.0]
'[c093] return a list of 10 elements all equal to the first element of the input.': [1, 1.0]
'[c093] return a list with the first element of the input repeated 10 times.': [1, 1.0]
'[c094] move the first element that is not a two-digit number to the front.': [1, 0.125]
'[c094] move the third and fourth elements to the first and second positions without rearranging the remaining list.': [1, 0.75]
'[c094] move the third element to the first place, while keeping the rest of the elements in order.': [1, 0.25]
'[c094] put the smaller number of the first two elements in the beginning followed by the rest of the list.': [1, 0.125]
'[c094] reverse the first three elements.': [1, 0.875]
'[c094] swap first two elements.': [1, 0.125]
'[c094] swap the first two elements and keep the rest of the list same.': [1, 0.0]
'[c094] swap the first two elements of the list.': [2, 0.0]
'[c094] swap the first two elements.': [5, 0.5]
'[c094] swap the first two numbers.': [1, 0.125]
'[c094] swap the positions of the first two numbers and leave the rest as is.': [1, 0.125]
'[c094] switch the first two elements of the list.': [2, 0.25]
'[c094] switch the first two elements with the third and fourth elements respectively.': [1, 1.0]
'[c094] switch the first two elements.': [1, 0.0]
'[c095] append the first element at the end of the list.': [1, 1.0]
'[c095] delete the first and the last elements.': [1, 1.0]
'[c095] eliminate the first and last numbers in the list.': [1, 1.0]
'[c095] exclude the first element and the last element.': [1, 1.0]
'[c095] remove first and last elements of lists that contain more than 2 elements.': [1, 0.875]
'[c095] remove the first and last element from the list.': [1, 1.0]
'[c095] remove the first and last element of the list.': [3, 2.875]
'[c095] remove the first and last elements of a list.': [1, 1.0]
'[c095] remove the first and last elements of the list.': [2, 2.0]
'[c095] remove the first and last elements.': [6, 5.875]
'[c095] remove the first and the last element from the list.': [1, 1.0]
'[c095] remove the first and the last elements of the list.': [1, 1.0]
'[c095] remove the last two elements in the list.': [1, 0.125]
'[c096] add 98 at the beginning and 37 at the end of the list.': [2, 1.75]
'[c096] add 98 at the beginning of the list and 37 at the end of the list.': [1, 1.0]
'[c096] add 98 at the beginning of the list and 37 at the end.': [1, 1.0]
'[c096] add 98 at the beginning of the list, and 37 at the end.': [1, 1.0]
'[c096] add 98 at the start and 37 at the end of the list.': [1, 1.0]
'[c096] add 98 at the start of the list and 37 at the end of the list.': [1, 1.0]
'[c096] add 98 to the front of the list and 37 to the end of the list.': [1, 1.0]
'[c096] add 98 to the start and 37 to the end of the list.': [1, 1.0]
'[c096] add 98 to the start of the list and 37 to the end of the list.': [1, 1.0]
'[c096] add the number 98 at the beginning and the number 37 at the end of the list.': [1, 1.0]
'[c096] append 37 to the end and prepend 98 to the start of the list.': [1, 1.0]
'[c096] append 98 at the beginning and 37 at the end of the list.': [1, 1.0]
'[c096] append 98 at the start and 37 at the end of each list.': [1, 1.0]
'[c096] append 98 at the start and 37 at the end of the list.': [1, 1.0]
'[c096] append 98 at the start of the list and 37 at the end of the list.': [1, 1.0]
'[c096] append 98 to the start of the list and 37 to the end of the list.': [1, 1.0]
'[c096] prepend 98 to the list and append 37 to the list.': [1, 1.0]
'[c096] prepend the number 98 and append the number 37.': [1, 1.0]
'[c096] prepend the value 98 and append the value 37.': [1, 1.0]
'[c097] add [11, 21, 43, 19] at the beginning, and [7, 89, 0, 57] at the end.': [1, 1.0]
'[c097] add [11, 21, 43, 19] at the start of the list and [7, 89, 0, 57] at the end of the list.': [1, 1.0]
'[c097] add [11, 21, 43, 19] in front of the list and [7, 89, 0, 57] at the end of the list.': [1, 1.0]
'[c097] add [11, 21, 43, 19] to the front of the array and [7, 89, 0, 57] to the end of array.': [1, 1.0]
'[c097] add [11, 21, 43, 19] to the start and [7, 89, 0, 57] to the end of the list.': [1, 1.0]
'[c097] add the list [11, 21, 43, 19] before the input list and [7, 89, 0, 57] after the input list.': [1, 1.0]
'[c097] append the numbers 11, 21, 43, 19 at the start of the list and the numbers 7, 89, 0, 57 at the end of the list.': [1, 1.0]
'[c097] append the sequence 11, 21, 43, 19 to the start of the list, and the sequence 7, 89, 0, 57 to the end of the list.': [1, 1.0]
'[c097] insert fixed numbers at the start [11, 21, 43, 19] and end [7, 89, 0, 57] of the list.': [1, 1.0]
'[c097] prepend [11, 21, 43, 19] and append [7, 89, 0, 57] to the given array.': [1, 1.0]
'[c097] prepend [11, 21, 43, 19] and append [7, 89, 0, 57] to the list.': [3, 3.0]
'[c097] prepend [11, 21, 43, 19] and append [7, 89, 0, 57].': [1, 1.0]
'[c097] prepend [11, 21, 43, 19] to the input list and append [7, 89, 0, 57] to the end.': [1, 1.0]
'[c097] prepend the list [11, 21, 43, 19] and append the list [7, 89, 0, 57].': [1, 1.0]
'[c097] prepend the list [11, 21, 43, 19] to the original list, then append the list [7, 89, 0, 57] to the result.': [1, 1.0]
'[c097] prepend the list [11, 21, 43, 19], and append the list [7, 89, 0, 57] to the input list.': [1, 1.0]
'[c097] prepend the list with [11, 21, 43, 19] and append it with [7, 89, 0, 57].': [1, 1.0]
'[c097] prepend the list with [11, 21, 43, 19] and append the list with [7, 89, 0, 57].': [1, 1.0]
'[c098] add 1 to all even numbers and add 3 to all odd numbers.': [1, 0.125]
'[c098] add 1 to all even numbers, and 2 to all odd numbers.': [1, 0.25]
'[c098] add 1 to each element if it''s less than 50, or add 5 if it''s 50 or greater.': [1, 0.0]
'[c098] add 1 to each element, then add the number of digits in the initial element.': [1, 0.125]
'[c098] add 1 to each number and replace a number by the next prime number greater than the number.': [1, 0.125]
'[c098] add 1 to every even number and add 4 to every odd number.': [1, 0.125]
'[c098] add 1 to every number that ends with 5 or less and add 3 to every number that ends with more than 5.': [1, 0.125]
'[c098] add 1 to numbers divisible by 5 and 4 otherwise.': [1, 0.25]
'[c098] add 1 to the first and last element, add 2 to the second and second last element, and so on.': [1, 0.25]
'[c098] add 1 to the first element and then add to each other number a value equal to its position in the list +1.': [1, 0.75]
? '[c098] add 1 to the first element, then add 2 to the second element and then continue adding an increasing count to the preceding element, adding 3 to the third element, 4 to the fourth element, and so on.'
: [1, 1.0]
? '[c098] add 1 to the first element, then the subsequent elements are obtained by adding 2, 3, 4, 5 and so on to the corresponding elements in the original list.'
: [1, 0.75]
'[c098] add 1 to the first number, add 2 to the second number, add 3 to the third number, and so on.': [1, 0.875]
'[c098] add 1 to the original number, followed by adding the digit(s) to the number.': [1, 0.25]
'[c098] add 1 to the value of the index to each element.': [1, 0.875]
'[c098] add one to the odd numbers and add three to the even numbers.': [1, 0.125]
'[c098] increment each element by 1 if the number is below 50, and by 5 if the number is 50 or above.': [1, 0.0]
'[c098] increment each element by the element''s number of digits.': [1, 0.125]
'[c098] increment each number by one, then add twice the number of remaining numbers in the list.': [1, 0.25]
'[c098] increment the digit by 1 then sum it with the number, if the sum is two digits keep the last digit.': [1, 0.125]
'[c099] filter out and keep the elements that are greater than 10.': [1, 0.125]
'[c099] generate a list of elements that are greater than or equal to 30.': [1, 0.5]
'[c099] keep all elements greater than or equal to 10.': [1, 0.375]
'[c099] keep only elements equal to or greater than 50.': [1, 1.0]
'[c099] keep only numbers greater than or equal to 50.': [1, 1.0]
'[c099] keep only the elements that are greater than 50.': [1, 1.0]
'[c099] keep only the elements that are greater than or equal to 10.': [1, 0.125]
'[c099] keep only the elements that are greater than or equal to 53.': [1, 1.0]
'[c099] keep only the elements which are greater than 50.': [1, 1.0]
'[c099] keep only the numbers in the list that are greater than 50.': [1, 1.0]
'[c099] keep only the numbers which are multiples of 3.': [1, 0.125]
'[c099] keep the elements above 50.': [1, 1.0]
'[c099] keep the elements that are greater than 24.': [1, 0.625]
'[c099] keep the numbers that are greater than 10.': [1, 0.375]
'[c099] remove all elements less than 10 from the list.': [1, 0.125]
'[c099] remove all elements less than 10.': [1, 0.125]
'[c099] remove all elements that are less than 10 or even.': [1, 0.5]
'[c099] remove all numbers less than 50.': [1, 1.0]
'[c099] remove the even numbers and the numbers less than 10.': [1, 0.375]
'[c099] retain all elements except the ones less than 5.': [1, 0.125]
'[c100] reverse the elements.': [15, 15.0]
'[c100] reverse the list elements.': [1, 1.0]
'[c100] reverse the order of the elements.': [3, 3.0]
'[c101] always produce an unchanging output, irrespective of the input.': [1, 1.0]
'[c101] always return the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9] regardless of the input list.': [1, 1.0]
'[c101] completely ignore the input and always output the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] completely ignore the input and always output the same list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] ignore the input and always produce the same output list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] output the same list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9] regardless of the input.': [1, 1.0]
'[c101] replace any given list with the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace any input list with the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace any input with a specific list: [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace any input with the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace any list (even an empty one) with [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace any list with [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace the entire list with a predefined sequence, [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]': [1, 1.0]
'[c101] return a pre-determined list of numbers regardless of what the input is.': [1, 1.0]
'[c101] return a predefined list regardless of the input.': [1, 1.0]
'[c101] return a specific list of numbers ([11, 19, 24, 33, 42, 5, 82, 0, 64, 9]) regardless of the input.': [1, 1.0]
'[c101] return the list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9] regardless of the input.': [1, 1.0]
'[c102] duplicate the input without any changes.': [1, 1.0]
'[c102] keep the list as it is.': [1, 1.0]
'[c102] keep the list the same.': [2, 2.0]
'[c102] keep the list unchanged.': [1, 1.0]
'[c102] leave the array as it is.': [1, 1.0]
'[c102] leave the elements as they are, there is no change.': [1, 1.0]
'[c102] leave the list as is.': [1, 1.0]
'[c102] leave the list as it is because no changes are observed.': [1, 1.0]
'[c102] leave the list unchanged.': [1, 1.0]
'[c102] output the same list as the input.': [1, 1.0]
'[c102] retain the elements in their original order.': [1, 1.0]
'[c102] return the input as is (identity function).': [1, 1.0]
'[c102] return the list as is, without making any changes.': [1, 1.0]
'[c102] return the list as it is.': [1, 1.0]
'[c102] return the list exactly as it is (do nothing to the list).': [1, 1.0]
'[c102] simply return the input list as it is.': [1, 1.0]
'[c103] count and return the total number of elements in the input list.': [1, 1.0]
'[c103] count the number digits in the last number.': [1, 0.125]
'[c103] count the number of digits in all the numbers and return a list containing the sum of all digits modulo 10.': [1, 0.0]
'[c103] count the number of elements and return a list with the count as the only element.': [1, 1.0]
'[c103] count the number of elements in the array.': [1, 1.0]
'[c103] count the number of elements in the list and return that as a single-element list.': [1, 1.0]
'[c103] count the number of elements in the list.': [4, 4.0]
'[c103] count the number of elements less than 50.': [1, 0.25]
'[c103] count the number of elements.': [1, 1.0]
'[c103] count the number of instances where an element in the list has a digit 1 or 0.': [1, 0.125]
'[c103] count the number of numbers that have an odd tens digit and return that as a single digit array.': [1, 0.0]
'[c103] count the number of odd numbers in the list.': [1, 0.125]
'[c103] count the total number of elements in the list.': [1, 1.0]
'[c103] count the total number of elements.': [1, 1.0]
'[c103] provide the length of the list.': [1, 1.0]
'[c103] return the number of digits that are not 1 in the listings.': [1, 0.75]
? '[c103] sum up the digits of the first number and when the two digit number appears, continue to add until you get a single digit.'
: [1, 0.0]
'[c104] extract the maximum value.': [1, 1.0]
'[c104] find the maximum number in the list.': [2, 2.0]
'[c104] keep only the maximum number in the list.': [1, 1.0]
'[c104] keep the maximum number in the list.': [1, 1.0]
'[c104] locate the maximum element.': [1, 1.0]
'[c104] return the highest number in the set.': [1, 1.0]
'[c104] return the largest number in the list.': [1, 1.0]
'[c104] return the maximum number from each list.': [1, 1.0]
'[c104] return the maximum number in the list.': [1, 1.0]
'[c104] return the maximum number.': [1, 1.0]
'[c104] return the maximum value in the list.': [2, 2.0]
'[c104] select the highest number.': [1, 1.0]
'[c104] select the largest number from the list.': [1, 1.0]
'[c104] select the largest number of the list.': [1, 1.0]
'[c104] select the maximum element.': [1, 1.0]
'[c104] select the maximum number from the list.': [1, 1.0]
'[c104] select the maximum number in the list.': [1, 1.0]
'[c104] select the maximum number.': [1, 1.0]
'[c105] duplicate all but the first and last elements in the list.': [1, 0.875]
'[c105] duplicate all elements except the first and the last.': [1, 0.125]
'[c105] duplicate all elements starting from the second one until (excluding) the last one.': [1, 0.75]
'[c105] duplicate the elements from the second position to the second last position.': [1, 1.0]
'[c105] duplicate the elements from the second to the second last one and append to the list.': [1, 1.0]
'[c105] duplicate the elements starting from 2nd to the last, and append them after the last element.': [1, 1.0]
'[c105] duplicate the elements starting from the second to the second to last.': [1, 1.0]
'[c105] duplicate the sequence from the second element to the second last element after the first element.': [1, 1.0]
'[c105] insert elements again from the second to the one before the last.': [1, 1.0]
'[c105] insert the middle elements of the list after the middle elements and before the last element.': [1, 0.125]
'[c105] insert the second last element before the last element.': [1, 0.25]
'[c105] insert the second, third, .': [1, 1.0]
? '[c105] insert the second-to-last element before the last element, and repeat this pattern until the end, if there are more than three elements.'
: [1, 0.375]
? '[c105] introduce all elements of the list starting from the second till the one before the last into the list once again right before the last element.'
: [1, 1.0]
'[c105] repeat the elements from the second one to the penultimate one.': [1, 1.0]
'[c105] repeat the elements from the second position to the second to the last position.': [1, 1.0]
'[c105] repeat the list elements from the second element to the second-last element before the last element.': [1, 1.0]
'[c105] repeat the second till penultimate elements at the end of the list before the last element.': [1, 0.625]
'[c105] repeat the sequence from the second element to second to last element.': [1, 1.0]
'[c105] repeat the two middle elements of the list in their order.': [1, 0.5]
'[c106] sort the elements from lowest to highest.': [1, 1.0]
'[c106] sort the elements in ascending order.': [14, 14.0]
'[c106] sort the list in ascending order.': [2, 2.0]
'[c106] sort the numbers in ascending order.': [3, 3.0]
'[c107] eliminate all repeated consecutive numbers.': [1, 0.125]
'[c107] keep the unique elements in the original order.': [1, 1.0]
'[c107] keep unique instances of the numbers, preserving the order in which they first appeared.': [1, 1.0]
'[c107] remove all duplicate consecutive elements.': [1, 0.125]
'[c107] remove all duplicate elements that follow their first occurrence.': [1, 1.0]
'[c107] remove consecutive duplicate numbers.': [1, 0.25]
'[c107] remove consecutive duplicates in the list.': [1, 0.25]
'[c107] remove consecutive duplicates.': [2, 0.5]
'[c107] remove duplicate consecutive elements.': [3, 0.375]
'[c107] remove duplicate consecutive numbers.': [2, 0.25]
'[c107] remove duplicates that occur consecutively.': [1, 0.125]
'[c107] remove repeated consecutive elements.': [1, 0.25]
'[c107] remove the duplicate elements in the order they appear.': [1, 1.0]
'[c107] remove the duplicate elements.': [1, 1.0]
'[c107] remove the duplicates in the list.': [1, 1.0]
'[c107] remove the duplicates while keeping the order.': [1, 1.0]
'[c108] add all of the numbers together.': [1, 1.0]
'[c108] add all the elements in the list.': [1, 1.0]
'[c108] add up all the numbers in the list.': [1, 1.0]
'[c108] find the sum of the elements.': [1, 1.0]
'[c108] get the sum of all elements.': [1, 1.0]
'[c108] return the sum of all the elements in the list.': [1, 1.0]
'[c108] return the sum of the largest two numbers in the list.': [1, 0.25]
'[c108] sum all elements in the list.': [3, 3.0]
'[c108] sum all the elements in the list.': [6, 6.0]
'[c108] sum all the elements of the list.': [1, 1.0]
'[c108] sum all the numbers in the list.': [1, 1.0]
? '[c108] sum each decimal place in the list separately, thus, 34 and 8 would equate to 98, as the sum of the tens place is 90 and the sum of the units place is 8.'
: [1, 0.875]
'[c108] sum up all the elements.': [1, 1.0]
'[c109] find the multiplication of elements, if there''s no element default answer is 1.': [1, 1.0]
'[c109] find the product of the all the digits.': [1, 0.75]
'[c109] multiply all the elements in the list.': [2, 2.0]
'[c109] multiply all the elements.': [2, 2.0]
'[c109] multiply the first and last element if there are more than 1 elements, else the output is same as the input.': [1, 0.5]
? '[c109] multiply the first two elements if there are at least two elements, else return the first element if there''s only one, else return 1 if the list is empty.'
: [1, 0.75]
'[c109] multiply the first two elements of the list.': [1, 0.875]
? '[c109] multiply the first two elements, if it exists, else return the single element if only a single element exists, or return an empty list if no elements exist.'
: [1, 0.625]
'[c109] multiply the first two elements, if there are at least two elements.': [1, 0.625]
'[c109] multiply the first two elements.': [1, 0.75]
'[c109] multiply the first two numbers if more than one number is given, else return the number itself.': [1, 0.625]
'[c109] multiply the first two numbers if more than one number is present, otherwise keep the number as is.': [1, 0.625]
'[c109] multiply the first two numbers, else if only one number present return the number itself as the answer.': [1, 0.625]
'[c109] multiply the first two numbers.': [1, 0.625]
'[c109] product of all elements.': [1, 1.0]
'[c109] return the largest number in the list or if there are multiple numbers, return their product.': [1, 0.75]
'[c109] return the product of all elements; if there are no elements, the result is 1.': [1, 1.0]
'[c109] take the product of all elements.': [1, 1.0]
'[c110] create a list of all elements greater than or equal to 18.': [1, 0.25]
'[c110] filter out the elements less than 10 and sort the remaining elements in ascending order.': [1, 0.375]
'[c110] filter the numbers greater than or equal to the smallest prime number in the list.': [1, 0.125]
'[c110] include all the digits that are not inside the interval [0,9] in ascending order.': [1, 0.25]
'[c110] keep only elements greater than 10.': [1, 0.25]
'[c110] keep only even numbers if there are any, else keep only numbers that are multiples of 3.': [1, 0.25]
'[c110] keep only the elements that are bigger than the smallest element and smaller than the biggest element.': [1, 0.5]
'[c110] keep only the odd-indexed elements if they are greater than 10.': [1, 0.25]
'[c110] keep the elements that are divisible by 2 or by 5.': [1, 0.125]
? '[c110] keep the numbers in the original list that are greater than or equal to 18 but less than or equal to 95, and then sort them in increasing order.'
: [1, 0.5]
'[c110] keep the values that are larger than 20.': [1, 0.375]
'[c110] only keep the numbers that are larger than their positions in the list (indices start at 0).': [1, 0.5]
'[c110] remove numbers 3 and below, and to keep numbers that are 21 or above.': [1, 0.25]
'[c110] retain only the elements that are multiples of 3, 5, or 7.': [1, 0.125]
? '[c110] return the elements in ascending order if the length of the list is greater than 1 else return the input list as is.'
: [1, 0.25]
'[c110] select the elements that are prime numbers.': [1, 0.125]
'[c110] select the numbers that are higher than 20 and sort them in ascending order.': [1, 0.25]
'[c110] sort numbers greater than or equal to 20 in increasing order.': [1, 0.375]
'[c110] sort the elements in ascending order but only keep the elements which are greater than 5.': [1, 0.375]
'[c110] trace out all the elements which are greater than or equal to 20.': [1, 0.25]
'[c111] create a list filled with the biggest number in the original list.': [1, 0.125]
'[c111] create a list filled with the highest number repeated as many times as its own value.': [1, 0.25]
'[c111] create a list of the maximum digit repeated the number of times equal to the last digit of the maximum number.': [1, 0.25]
? '[c111] create a list where the only element is the maximum number from the original list, and the length of the new list is equal to the tens place of the max number.'
: [1, 0.125]
'[c111] create a list with the highest number repeating 7 times, but if the list contains 6, also repeat 6 twice.': [1, 0.0]
'[c111] create a new list comprising only maximum number from the given list.': [1, 0.125]
'[c111] create a new list with the highest element equal to its number.': [1, 0.125]
? '[c111] fill a list with the highest number in the original list, with the number of elements in the new list equal to the smallest number in the original list.'
: [1, 0.625]
'[c111] generate a list having the maximum number in the list repeated the number of times the number 5 is present.': [1, 0.0]
? '[c111] generate a list of size 1 if the input contains a single element, and if there are more elements, to append copies of the highest element until the size of the output matches the highest element.'
: [1, 0.0]
? '[c111] generate a list of the largest number in the original list, repeated as many times as that number is a multiple of 10.'
: [1, 0.0]
'[c111] generate a list of the maximum number, having the same length as the number of elements less than 10.': [1, 0.0]
? '[c111] generate a list repeating the maximum number times the maximum number if the maximum number is 10 or more, else leave empty.'
: [1, 0.0]
'[c111] generate a list with a length equal to original number''s units digit, repeating the number.': [1, 0.0]
'[c111] repeat the largest element if it is greater than the smallest element.': [1, 0.375]
'[c111] repeat the largest number equal to the digit of the largest number.': [1, 0.125]
'[c111] repeat the largest number in the list as many times as it can evenly divide by 10.': [1, 0.125]
'[c111] repeat the maximum number in the list as many times as its value mod 10.': [1, 0.25]
'[c111] repeat the maximum value the amount of times equivalent to the first number in the list.': [1, 0.5]
'[c112] create a list from 1 to the smallest number in the input list, inclusive.': [1, 0.25]
? '[c112] create a list of consecutive numbers starting from 1 and ending at the smallest of (10, the smallest number in the original list).'
: [1, 0.25]
'[c112] create a new list from 1 up to the maximum number found between 1 and 10 in the original list.': [1, 0.25]
'[c112] generate a list from 1 to the highest single-digit number found in the input.': [1, 0.125]
'[c112] generate a list from 1 to the maximum number in the input list, but only up to the number 15.': [1, 0.125]
'[c112] generate a list from 1 to the smallest integer in the list that is bigger than 1.': [1, 0.375]
? '[c112] generate a list of consecutive numbers starting from 1 to the maximum number that''s less than or equal to 10 among the input list.'
: [1, 0.25]
'[c112] generate a list of consecutive numbers starting from 1 to the smallest number in the list that is greater than 0.': [1, 0.25]
'[c112] generate a list of counting numbers starting from 1 to the maximum number below or equal to 10 in the list': [1, 0.125]
'[c112] generate a list of elements from 1 to the smallest number in the list that is more than 1.': [1, 0.125]
'[c112] generate a list of integers from 1 to the smallest number in the list, but limited to a maximum of 15 numbers.': [1, 0.25]
? '[c112] generate a list of integers from 1 up to n where n is the highest number in the input list that is less than or equal to 10.'
: [1, 0.25]
'[c112] generate a list of natural numbers from 1 to the smallest number greater than 0 in the given list.': [1, 0.25]
'[c112] generate a list of sequential integers up to the highest single-digit integer in the input.': [1, 0.25]
'[c112] generate a sequence from 1 to the smallest number in the list.': [1, 0.375]
? '[c112] generate a sorted list of sequential numbers from 1 up to the smallest integer in the list that''s greater than or equal to 1 and less than or equal to 7.'
: [1, 0.0]
? '[c112] generate the numbers from 1 up to the smallest number in the list which is larger than all before it and lesser than 9.'
: [1, 0.25]
? '[c112] replace inputs with a list of numbers starting from 1 up to the smallest value in the given list that is bigger than 1, if no such value exists the return list should be [1].'
: [1, 0.125]
? '[c112] return a list from 1 to the smallest element if it is more than 1, or up to the biggest element if the smallest element is 0.'
: [1, 0.375]
? '[c112] return a list with numbers from 1 to n, where n is equal to the amount of single-digit numbers in the original list.'
: [1, 0.125]
'[c113] eliminate the first 6 and every number after it till the next 6 is found or the end of the list is reached.': [1, 0.0]
'[c113] keep every second number or number consists of multiple digits.': [1, 0.0]
'[c113] preserve the elements that follow an even number and remove the ones that follow an odd number.': [1, 0.0]
'[c113] remove all elements that are multiples of 8 or 9.': [1, 0.0]
'[c113] remove elements at the indexes that are divisible by 3 starting from index 1.': [1, 0.0]
'[c113] remove elements if they are less than 10 and are followed by an element less than 10.': [1, 0.0]
'[c113] remove elements that are multiples of 7 (except the number 7 itself) and then remove any doubled digits number (e.': [1, 0.125]
'[c113] remove every element that is smaller than 7 and the second element.': [1, 0.0]
'[c113] remove every third digit starting from the first.': [1, 0.0]
'[c113] remove numbers divisible by 3.': [1, 0.0]
'[c113] remove numbers if and only if they are prime and when they are the first number.': [1, 0.125]
'[c113] remove the 2nd element and the 5th element if they exist.': [1, 0.0]
'[c113] remove the element if its index is a multiple of 3.': [1, 0.125]
'[c113] remove the elements 7, 8, and 9 (if they exist) from a list.': [1, 0.375]
'[c113] remove the elements 8 and 9, unless they are placed at the end of the list.': [1, 0.125]
'[c113] remove the first and fourth elements if they are less than 10, otherwise leave the list unchanged.': [1, 0.25]
'[c113] remove the first and last elements unless those elements are 6.': [1, 0.0]
'[c113] remove the first and last elements when the first number is an even number.': [1, 0.125]
'[c113] remove the first and last number if they are 6, 7, 8, or 9.': [1, 0.0]
'[c113] remove the first element and any elements that are 77 or larger.': [1, 0.0]
'[c114] add an element at the beginning and end which is the last element of the original list.': [1, 1.0]
'[c114] add the last element at the beginning and at the end of the list.': [1, 1.0]
'[c114] add the last element at the beginning and the end of the list.': [2, 2.0]
'[c114] add the last element in the first and last position.': [1, 1.0]
'[c114] add the last element to the front and back of the list.': [1, 1.0]
'[c114] append another copy of the last element at the start and end.': [1, 1.0]
'[c114] append the last element and prepend it to the list as well.': [1, 1.0]
'[c114] append the last element to the start and end.': [1, 1.0]
'[c114] append the last number in the front and back of the list.': [1, 1.0]
'[c114] place the last element at the beginning and end of the list.': [1, 1.0]
'[c114] place the last element at the beginning of the list and at the end.': [1, 1.0]
'[c114] replace the first element with the last element and also append the last element at the end.': [1, 0.75]
'[c114] replace the first element with the last element and then add the last element again at the end.': [1, 1.0]
'[c114] replace the first element with the last element and then append the last element again at the end.': [1, 0.875]
'[c114] replace the first element with the last element and then append the last element again.': [1, 1.0]
'[c114] replace the first element with the last element, and append the last element to the end of the list.': [1, 0.0]
'[c114] sandwich the list between its last element.': [1, 1.0]
'[c114] shift elements to the right and then append the last element at the end.': [1, 1.0]
'[c114] swap the positions of the first and last numbers, and then add an extra copy of the last number.': [1, 0.25]
'[c115] add all the different numbers appearing in the list, then we put that sum at the beginning and the end of the list.': [1, 0.0]
? '[c115] add the first and the last number in the list and place the sum at the first and last positions of the list while keeping the rest of the list the same.'
: [1, 0.0]
? '[c115] add the first number and last number together and place it at the beginning and end of the list, while maintaining only one instance of any number in the list.'
: [1, 0.25]
'[c115] add the smallest and largest number in the list and put them at both ends.': [1, 0.0]
'[c115] append at the end and beginning of the list the sum of the smallest and largest elements.': [1, 0.0]
'[c115] collapse adjacent duplicates and replace them with their sum.': [1, 0.0]
? '[c115] count total number of unique numbers in a list, double it and append it on both ends of the list of unique numbers from initial list in the order they first appeared.'
: [1, 0.0]
? '[c115] generate a list with the sum of the first two elements, followed by all unique elements, ending with the sum of the last two elements.'
: [1, 0.0]
? '[c115] keep the first and third number, then the highest and second highest numbers, re-order them and increase those by 10, then finally re-attach the original numbers'
: [1, 0.0]
'[c115] put the sum of first and last element in first and last position.': [1, 0.0]
? '[c115] repeat the first unique element, add together all unique elements, and repeat this sum at the beginning and end of the list.'
: [1, 0.875]
? '[c115] replace each element in the array with the total sum of first and last repeating elements of that number in the array.'
: [1, 0.0]
'[c115] replace the first and last occurences of each unique number by their sum.': [1, 0.0]
'[c115] replace the first and last occurrence of each number with their sum.': [1, 0.0]
? '[c115] sum all the elements and place that sum on the first and last positions while maintaining the first appearance of each unique element in the original list.'
: [1, 0.0]
'[c115] sum the adjacent nodes which are same, ignore intermediate different number.': [1, 0.0]
? '[c115] sum the first and last element and put it as the first and last element in list separated by the original set in between.'
: [1, 0.0]
'[c115] sum the first element with the last element and put this sum in place of the first element and the last element.': [1, 0.0]
'[c115] sum up the unique elements and append this sum at the beginning and the end of the list of unique elements.': [1, 0.875]
'[c116] create a new list by reversing the original list and appending the reversed list to the original list.': [1, 0.75]
'[c116] mirror the entire list, starting from the last element to the first.': [1, 1.0]
'[c116] reverse the elements and double the list appending one to another.': [1, 0.75]
'[c116] reverse the list and append it to the end of its own reversal.': [1, 0.125]
'[c116] reverse the list and append the original (reversed) list at the end.': [1, 1.0]
'[c116] reverse the list and append the original list except the first element.': [1, 1.0]
'[c116] reverse the list and append the reversed list to the original list.': [1, 0.125]
'[c116] reverse the list and append the reversed original list.': [1, 0.75]
'[c116] reverse the list and repeat it with the first element omitted.': [1, 0.5]
'[c116] reverse the list and then add the last 3 elements of the original list to the end.': [1, 1.0]
'[c116] reverse the list and then append the last three elements of the original list to the end.': [1, 1.0]
'[c116] reverse the list and then append the original last three elements in original order.': [1, 0.5]
'[c116] reverse the list and then append the original list (except the first element).': [1, 1.0]
'[c116] reverse the list and then append the original list minus its first element.': [1, 1.0]
'[c116] reverse the list and then append the original list without the first element.': [1, 1.0]
'[c116] reverse the list and then append the reversed list back to it.': [1, 1.0]
'[c116] reverse the list and then append the reversed list from the second to the second last element to the list.': [1, 1.0]
'[c116] reverse the list and then append the reversed version to the end of the list.': [1, 0.125]
'[c116] reverse the list and then concatenate the original list minus the first element.': [1, 1.0]
'[c116] reverse the sequence and then add the original sequence minus the first digit.': [1, 1.0]
'[c117] bring the second half of the list in reversed order followed by the first half of the list in reversed order.': [1, 0.25]
? '[c117] move all elements to the right of the first number less than 10 to the start of the list, and move the rest to the end of the list.'
: [1, 0.0]
? '[c117] move every number that is 40 or less to the front of the list and every number that is greater than 40 to the back of the list, in the order they originally appeared.'
: [1, 0.125]
'[c117] move numbers less than 10 to the front of the list, and everything else to the back, but in the same order.': [1, 0.0]
'[c117] move the elements starting from halfway of the list to the beginning.': [1, 0.5]
'[c117] move the first three elements to the end of the list in the same order.': [2, 2.0]
'[c117] move the first two elements to the end of the list.': [1, 0.0]
'[c117] move the fourth and the remaining elements to the start of the list.': [1, 0.875]
'[c117] move the last three elements to the beginning of the list while keeping their order.': [1, 0.5]
'[c117] place the last three elements at the start of the list.': [1, 0.25]
? '[c117] preserve the elements of the list starting from the one before the smallest one and adding the others at the end in the same order.'
: [1, 0.375]
? '[c117] rearrange the list such that all the numbers less than 10 are at the start, and the others follow in their original order.'
: [1, 0.25]
'[c117] rearrange the list such that the second half of the list comes first and the first half comes later.': [1, 0.5]
'[c117] reverse the second half of the list and append it to the first half.': [1, 0.375]
'[c117] rotate the remaining list two positions to the left after removing the first two elements.': [1, 0.125]
'[c117] shift the first half of the list to the end (starting from the middle element).': [1, 0.25]
'[c117] shuffle the elements such that the first half and the second half of the list swap their places.': [1, 0.25]
'[c117] swap the first half and second half of the list.': [1, 0.875]
'[c117] take the last three elements, keep the order, and append the remaining elements after.': [1, 0.25]
? '[c118] arrange the numbers in the list by first collecting the numbers less than 10, then collect the rest in the same order.'
: [1, 0.0]
'[c118] cycle the array to the right by one position.': [1, 0.0]
'[c118] move elements greater than or equal to 10 to the end of the list, preserving the relative order.': [1, 0.25]
'[c118] move the first element in the list to the end.': [1, 0.5]
'[c118] move the first element to before the second last element (only if the list has 3 or more elements).': [1, 0.0]
'[c118] move the first element to the end and the second element to the front.': [1, 0.25]
'[c118] move the first element to the end of the list.': [5, 1.875]
'[c118] move the first number greater than or equal to 2 to the end of the list.': [1, 0.625]
'[c118] move the first number to the end of the list.': [1, 0.5]
'[c118] move the first two elements to the end of the list.': [1, 0.25]
? '[c118] move the smallest number to the beginning of the list, if it''s not already there, and move the largest number to the end of the list, if it''s not already there.'
: [1, 0.125]
'[c118] remove the first element and append it to the end of the list.': [1, 0.25]
'[c118] rotate the elements one place to left.': [1, 0.5]
'[c118] shift the first element to the end of the list.': [1, 0.375]
'[c118] shift the first two elements to the end of the list.': [1, 0.25]
? '[c118] take the last two digits from each number in the original list and put those numbers at the end of the list, unless there is only one digit in the number, in which case the number stays where it is.'
: [1, 0.25]
'[c119] add 8 at both ends of list, only if 8 is not exist at that position.': [1, 0.875]
'[c119] add 8 at the beginning and at the end if it does not exist there already.': [1, 1.0]
'[c119] add 8 at the beginning and end if the list contains an 8.': [1, 0.0]
'[c119] add 8 at the beginning and end of the list regardless of the elements.': [1, 0.125]
'[c119] add 8 at the beginning and the end of the list.': [2, 1.0]
'[c119] add 8 in the beginning and the end, if not present.': [1, 1.0]
'[c119] add 8 to the beginning and end of the list.': [1, 0.125]
'[c119] add 8 to the end of the list if it contains an 8.': [1, 0.0]
'[c119] add 8 to the start and end of the list if it''s not already there.': [1, 0.875]
'[c119] add an 8 at the beginning and end of the list if the list contains an 8, else do not change the list.': [1, 0.125]
'[c119] add an 8 at the beginning and the end of the list.': [1, 0.375]
'[c119] add an 8 at the start and at the end of the list if the list doesn''t already start and finish with an 8.': [1, 1.0]
'[c119] add an 8 to the beginning and end of the list if the list contains an 8.': [1, 0.5]
'[c119] append and prepend 8 if the list doesn''t start or end with 8.': [1, 1.0]
'[c119] append and prepend the number 8 if the list does not start and end with 8.': [1, 0.875]
'[c119] insert 8 at the start and end of the list, if the list contains at least one 8.': [1, 0.25]
'[c119] put 8 at the beginning and end of the list if there is already a 8 present in the list.': [1, 0.0]
'[c119] put 8 at the start and at the end if it''s not there already.': [1, 1.0]
'[c120] isolate the first element of each list.': [1, 1.0]
'[c120] keep only the first element in the list.': [2, 2.0]
'[c120] keep only the first element of the list.': [1, 1.0]
'[c120] keep only the first element.': [1, 1.0]
'[c120] keep the first element and drop the rest.': [1, 1.0]
'[c120] keep the first element in the list and remove the rest.': [1, 1.0]
'[c120] keep the first number only.': [1, 1.0]
'[c120] output only the first element of the list.': [1, 1.0]
'[c120] retain only the first element in the list.': [1, 1.0]
'[c120] return a list containing only the first element.': [1, 1.0]
'[c120] return a list with just the first element.': [1, 1.0]
'[c120] return a list with the first element of the list.': [1, 1.0]
'[c120] return only the first element of the list.': [2, 2.0]
'[c120] return the first element of the list.': [1, 1.0]
'[c120] return the list with only first element.': [1, 1.0]
'[c120] take only the first element of the original list.': [1, 1.0]
'[c120] take the first element from the list.': [1, 1.0]
'[c120] take the first element of the list only.': [1, 1.0]
'[c121] display the last element of the array.': [1, 1.0]
'[c121] keep the last element and remove all the other elements.': [1, 1.0]
'[c121] keep the last element only.': [2, 2.0]
'[c121] pick out the last element of the list.': [1, 1.0]
'[c121] produce a list only containing the last element.': [1, 1.0]
'[c121] return a list with only the last element of the original list.': [1, 1.0]
'[c121] return the last element in the list.': [2, 2.0]
'[c121] return the last element of the array.': [1, 1.0]
'[c121] return the last element of the list.': [3, 3.0]
'[c121] return the last element.': [2, 2.0]
'[c121] return the last item only.': [1, 1.0]
'[c121] return the last number on the list.': [1, 1.0]
'[c121] return the last number.': [1, 1.0]
'[c121] select the last element of a list.': [1, 1.0]
'[c121] take the last element of the list.': [1, 1.0]
'[c122] choose the last odd number in the list.': [1, 0.25]
'[c122] choose the second last element.': [1, 0.875]
'[c122] extract the number that is last in order.': [1, 0.0]
'[c122] generate a list of the last element in each list.': [1, 0.0]
'[c122] generate a list with the fourth element (if it exists).': [1, 0.125]
'[c122] identify the smallest even number above 0.': [1, 0.5]
'[c122] keep only the last number that is less than 50.': [1, 0.25]
'[c122] keep the second to last element of the array only.': [1, 0.875]
'[c122] only keep the maximum element in the list.': [1, 0.0]
'[c122] return a list with just the second to last element from the input list.': [1, 1.0]
? '[c122] return a list with only the element at the fifth position, or the first position if there are fewer than five elements.'
: [1, 0.0]
'[c122] return the last number in the list that is divisible by 2.': [1, 0.25]
'[c122] return the last odd number in the list.': [1, 0.375]
'[c122] return the second last element in a list.': [1, 1.0]
'[c122] return the second last element of the list.': [1, 0.875]
'[c122] return the second last element.': [1, 1.0]
'[c122] return the second last number.': [1, 1.0]
'[c122] return the second to last element.': [1, 1.0]
'[c122] select the element divisible by 7.': [1, 0.125]
'[c122] select the number two positions before the second last one.': [1, 0.25]
'[c123] choose the largest even number.': [1, 0.125]
'[c123] find the biggest multiple of 7.': [1, 0.5]
'[c123] find the biggest number that is not a multiple of 10.': [1, 0.5]
'[c123] identify the max number that is divisible by 3.': [1, 0.0]
'[c123] output the largest number that is followed by a smaller number.': [1, 0.625]
'[c123] return a list with the last element that is not 4.': [1, 0.375]
'[c123] return a single-element list whose element is the last number appearing before the last 3 or 4 in the list.': [1, 0.25]
'[c123] return the element before the first occurrence of the number 4.': [1, 0.375]
'[c123] return the element which is third from the end.': [1, 0.375]
'[c123] return the first occurrence of a number in the list that is divisible by 4.': [1, 0.25]
'[c123] return the highest number in the list that comes before the first occurrence of the number 2.': [1, 0.375]
'[c123] return the second element.': [1, 0.25]
? '[c123] select the first element if it is the maximum in the list, otherwise select the first number that is not 0, 1, 2, 3, 4, or 5.'
: [1, 0.125]
'[c123] select the first number that goes after the number 2.': [1, 0.25]
'[c123] select the highest number in the list that isn''t 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9.': [1, 0.5]
'[c123] select the second element from the last.': [1, 0.25]
'[c123] select the second highest number.': [1, 0.25]
'[c123] select the second largest number in the list.': [1, 0.25]
'[c123] take the last number that can be divided by 4.': [1, 0.25]
'[c123] take the specific second element from the list.': [1, 0.25]
'[c124] create a new list from the first different number in the list which repeats consequent times.': [1, 0.625]
'[c124] find the largest value that is a multiple of the first element.': [1, 0.375]
'[c124] keep the first element that is less than 10.': [1, 0.5]
'[c124] keep the first number that has a number present as many times as itself in the list.': [1, 0.625]
'[c124] keep the first unique element of the sequence.': [1, 0.5]
'[c124] obtain the maximum value.': [1, 0.25]
? '[c124] return the element repeated maximum number of times, and in the case of a tie, return the first one that is repeated maximum number of times.'
: [1, 0.625]
'[c124] return the element that appears exactly three times.': [1, 0.25]
? '[c124] return the element that occurs more frequently in the list and if there is a tie for most frequent, return the leftmost of the ties.'
: [1, 0.625]
'[c124] return the first element in the list that is different from the successive ones.': [1, 0.25]
'[c124] return the first element of the list only.': [1, 0.5]
'[c124] return the first non-repeating value in the list.': [1, 0.375]
'[c124] return the first number in the list that is a perfect square.': [1, 0.5]
'[c124] return the first number that repeats consecutively in the list.': [1, 0.375]
'[c124] return the highest number which repeats.': [1, 0.375]
'[c124] return the most frequently appearing number.': [1, 0.375]
'[c124] return the number that repeats at least three times, or return the first element if no number repeats three times.': [1, 0.625]
'[c124] select first number which appears in the list only once.': [1, 0.25]
'[c124] take the number that is the greatest number among those numbers that divide by 3.': [1, 0.25]
'[c125] choose the first number and the first number which is not 0,1,2,3,5,7,9.': [1, 0.375]
'[c125] form a list of pairs with identical first and second elements.': [1, 0.0]
'[c125] generate a list of first and last similar numbers.': [1, 0.5]
'[c125] generate a list of the first element and the last element.': [1, 0.0]
'[c125] generate a list only including the first and last occurrence of a number.': [1, 0.25]
? '[c125] keep only the elements that are odd or divisible by 2, with the order of checking being "odd first, then divisible by 2".'
: [1, 0.125]
'[c125] keep only the first and last occurrences of the first number.': [1, 0.25]
? '[c125] keep only the first and the last numbers and discard the rest, while making sure the last number isn''t more than 50.'
: [1, 0.375]
'[c125] keep only the numbers that are smaller than 10 and the greatest number.': [1, 0.0]
'[c125] keep pairs of mirrored positions from the list, and ignore the rest.': [1, 0.125]
'[c125] keep the first element and discard all but the last occurrence of it in the list.': [1, 0.5]
'[c125] keep the first number, skip the next two, and continue this pattern until the last number.': [1, 0.25]
'[c125] only keep first and last number from the list that is less than or equal to 50.': [1, 0.25]
'[c125] remove the multiples of 10''s.': [1, 0.125]
'[c125] remove the numbers in the list that are multiples of 10.': [1, 0.0]
'[c125] retain even numbers, numbers ending in 5 and numbers that have repeating digits (like 22, 33, 44, etc).': [1, 0.125]
'[c125] retain only the numbers that are multiples of 13 in the list.': [1, 0.125]
'[c125] return a list with the first and last element.': [1, 0.375]
'[c125] return the list containing the first and second non-zero elements.': [1, 0.25]
'[c126] remove the first element from the list.': [4, 4.0]
'[c126] remove the first element in the list.': [1, 1.0]
'[c126] remove the first element of list.': [1, 1.0]
'[c126] remove the first element.': [13, 13.0]
'[c126] remove the first number.': [1, 1.0]
'[c127] remove the last element from the list.': [7, 7.0]
'[c127] remove the last element in the list.': [1, 1.0]
'[c127] remove the last element of the list.': [4, 4.0]
'[c127] remove the last element.': [8, 8.0]
'[c128] create a list that includes elements <= 9 and elements >= 50, in ascending order.': [1, 0.0]
? '[c128] filter out all numbers less than or equal to 3 or greater than or equal to 90, and sort the remaining numbers in ascending order.'
: [1, 0.0]
'[c128] filter out single digit numbers and numbers greater than or equal to 25 and then sort the list in ascending order.': [1, 0.0]
'[c128] generate a list of even-indexed values whose corresponding odd-indexed value in the original list is above 50.': [1, 0.0]
'[c128] keep only even or prime numbers and sort them.': [1, 0.0]
? '[c128] keep only the minimum, maximum and all other numbers that ends with 8 or starts with 7, and then sort them in ascending order.'
: [1, 0.0]
'[c128] keep only the numbers that are less than 10 or greater than 50 and sort them in ascending order.': [1, 0.0]
'[c128] keep only the single digit numbers and the numbers that end in a multiple of 3 and sort them in ascending order.': [1, 0.0]
'[c128] keep the elements which are less than 10 or greater than 50, and sort the remaining list in ascending order.': [1, 0.0]
'[c128] keep the numbers divisible by 1 or 2.': [1, 0.0]
'[c128] pick out numbers from the list if they are less than 10 and greater than 50, and sort them in ascending order.': [1, 0.0]
? '[c128] remove elements less than 2 but not equal to 0 and elements above 99, then sort the remaining elements in ascending order.'
: [1, 0.0]
? '[c128] return a list with every digit from the original list that is less than 10, and each series of double digits that is located after the digit 0, in the order they appear.'
: [1, 0.0]
? '[c128] select only those elements of the list whose values are either below 10 or above 25 and list them in ascending order.'
: [1, 0.0]
'[c128] select the nodes which are multiple of 3 or contain digit 3 and arrange them in ascending order.': [1, 0.0]
'[c128] sort and select numbers that are either prime or multiples of 3.': [1, 0.0]
'[c128] sort elements that are not multiples of 11.': [1, 0.0]
'[c128] sort the elements that are located at odd index and are less than 60 in ascending order.': [1, 0.0]
'[c128] sort the elements that are multiples of 3, 4, or 5 in ascending order.': [1, 0.0]
'[c128] sort the numbers less than 10 and above 50 in ascending order.': [1, 0.0]
'[c129] extract the duplicate numbers and keep one of each.': [1, 0.5]
'[c129] find the numbers that occur more than once and return them in the order they first appear.': [1, 0.375]
'[c129] keep only the elements from the first repeated element till end of the list.': [1, 0.125]
'[c129] keep only the repeated elements in the same order they appear for the first time in the array.': [1, 0.5]
'[c129] keep only the unique elements in order they were last encountered in the list.': [1, 0.125]
'[c129] keep only the unique elements that are larger than or equal to 4, keeping the first occurrence only.': [1, 0.0]
'[c129] keep the first occurrence of each element and remove the others.': [1, 0.125]
'[c129] list the elements that occur exactly three times, preserving the order in which they first appear.': [1, 0.5]
? '[c129] remove all occurrences of first element and last element, then return the list from the second occurrence of the second element.'
: [1, 0.0]
? '[c129] remove all the duplicate numbers that have a number between them and keep the repeated numbers that are next to each other.'
: [1, 0.125]
'[c129] remove any first occurrence of a number in the list.': [1, 0.25]
'[c129] remove duplicate consecutive numbers.': [1, 0.125]
'[c129] remove duplicates, but keep the last instance of an element if it appears again later in the list.': [1, 0.375]
'[c129] remove repeating number sequences and numbers above 90.': [1, 0.0]
'[c129] remove the consecutive duplicate elements.': [1, 0.125]
? '[c129] remove the first unique element and then keep removing repeating elements until a unique element or end of the list is found.'
: [1, 0.375]
'[c129] remove the specific duplicate of an element if it appears consecutively in the original list.': [1, 0.0]
'[c129] remove the unique numbers and keep only the numbers that appear more than once, and keep only one of each.': [1, 0.5]
'[c129] return a list of the elements that appear only once, in order of appearance.': [1, 0.0]
'[c129] return a list starting from the first duplicate number until the end of the list.': [1, 0.0]
'[c130] keep all elements after the first one that is smaller than 5.': [1, 0.0]
'[c130] keep elements after the first until and including the first occurrence of 9.': [1, 0.0]
'[c130] keep every element of the list after the first occurence of number 9.': [1, 0.0]
'[c130] keep the elements in the list that are not 1, 2, or 0.': [1, 0.0]
'[c130] remove all the values less than 10 from initial list.': [1, 0.0]
'[c130] remove first n elements, where n is the first digit of the list.': [1, 0.0]
'[c130] remove first two and the last elements.': [1, 0.0]
'[c130] remove the first and last elements from the list.': [1, 0.25]
'[c130] remove the first and last elements, and any numbers 5 or greater, from the middle.': [1, 0.0]
'[c130] remove the first and last elements.': [2, 0.25]
'[c130] remove the first and last non-zero single-digit numbers, and all elements afterward.': [1, 0.0]
'[c130] remove the first and the last two elements if the initial element is a 2 or a 3.': [1, 0.0]
'[c130] remove the initial elements until the first element is not 2 (or 1 / 0 / 6), then keep the next two elements.': [1, 0.0]
'[c130] remove the numbers from the lists that are a multiple of 6 and above 60.': [1, 0.0]
'[c130] return all elements after the first occurrence of a number less than 5, excluding that number.': [1, 0.125]
'[c130] start from the second number until you find a number that is less than or equal to 7.': [1, 0.0]
'[c130] take all elements after the first 2 or until the list has a 9, whichever comes first.': [1, 0.0]
? '[c130] take all the elements after the first one and before the last one if the first number is 1 or the last number is odd.'
: [1, 0.375]
'[c130] take elements starting from the second until there is a repetition in the sequence.': [1, 0.25]
'[c131] discard the numbers between 50 and 80 inclusive.': [1, 0.25]
'[c131] eliminate the numbers that end with 9 from the list.': [1, 0.25]
'[c131] keep only the numbers between 0 and 100 exclusive in the list.': [1, 0.25]
'[c131] remove all elements from the list that are divisible by 3.': [1, 0.125]
'[c131] remove all elements from the list that are multiples of 3.': [1, 0.25]
'[c131] remove any number from the list that ends with 3 or 5.': [1, 0.375]
'[c131] remove any number that ends with 5 in the list.': [1, 0.0]
'[c131] remove elements containing the digit 1.': [1, 0.0]
'[c131] remove elements equal to or below 50.': [1, 0.0]
'[c131] remove elements greater than 50 and less than 100.': [1, 0.375]
'[c131] remove elements greater than 50.': [1, 0.375]
'[c131] remove every second element from the list.': [1, 0.125]
'[c131] remove every third element from the list, starting count from 1.': [1, 0.125]
'[c131] remove numbers greater than or equal to 90 and less than or equal to 5.': [1, 0.125]
'[c131] remove the elements if they are greater than 50 and less than 80.': [1, 0.25]
'[c131] remove the elements in the list that is prime.': [1, 0.0]
'[c131] remove the elements that are divisible by 2 (excluding the first and last element).': [1, 0.375]
'[c131] remove the last element if it ends in 5.': [1, 0.0]
'[c131] remove the last element if it is an odd number,': [1, 0.25]
'[c131] remove the third element.': [1, 0.0]
'[c132] eliminate the third element from the array.': [1, 1.0]
'[c132] remove any number that ends in 2.': [1, 0.125]
'[c132] remove any number that ends with 2 or 0.': [1, 0.25]
'[c132] remove any numbers that end with a 2 or an 8.': [1, 0.0]
'[c132] remove any values that number 8 divides exactly.': [1, 0.0]
'[c132] remove elements that end with a digit 1.': [1, 0.0]
'[c132] remove numbers that equal to 2 from the list.': [1, 0.0]
'[c132] remove numbers with the digit 4.': [1, 0.0]
'[c132] remove the element 0 from the list.': [1, 0.0]
'[c132] remove the element if it is a single-digit number except 1, 3, 7, 9.': [1, 0.0]
'[c132] remove the element if it is greater than or equal to 80, except 0.': [1, 0.125]
'[c132] remove the number 1 if it is not at the first or last position.': [1, 0.0]
'[c132] remove the number 4 if it''s not the first number, and/or 0 if it''s not the first number.': [1, 0.125]
'[c132] remove the number 80 if it occurs in the list.': [1, 0.0]
'[c132] remove the number if it is a multiple of 37.': [1, 0.0]
'[c132] remove the numbers 44, 96, 8 and 34 from the list, if they exist.': [1, 0.0]
'[c132] remove the third element from the list.': [1, 1.0]
'[c132] remove the third element.': [3, 3.0]
'[c133] keep elements that end in the digits 0, 1, 2, 3, 4, 6, 7, or 8.': [1, 0.0]
'[c133] keep every 2nd, 4th, 6th, etc value in the list.': [1, 0.0]
'[c133] keep numbers located at positions divisible by 3 (0-based index) in the list.': [1, 0.0]
'[c133] keep only even numbers in the list.': [1, 0.0]
'[c133] keep only numbers that are followed by a single-digit number.': [1, 0.0]
'[c133] keep only numbers that are less than or equal to 20 or greater than or equal to 50.': [1, 0.0]
'[c133] keep only the elements in the list that are even.': [1, 0.0]
'[c133] keep only the elements that are at an even-indexed position in the list.': [1, 0.0]
'[c133] keep only the elements that are situated at even positions in the original list.': [1, 0.0]
'[c133] keep only the elements which are at even indices in the list.': [1, 0.0]
'[c133] keep only the elements whose corresponding place in the English alphabet is a vowel.': [1, 0.0]
? '[c133] keep only those elements which are at positions corresponding to an even number (considering 0 as the first position).'
: [1, 0.0]
'[c133] keep the elements that are multiples of 2 or 5 or 0.': [1, 0.125]
'[c133] remove all single digit numbers from the list, except if the number is a multiple of 3.': [1, 0.0]
'[c133] remove elements that are multiples of 3 and 5.': [1, 0.0]
'[c133] remove elements that lie between two even numbers.': [1, 0.125]
'[c133] remove even-indexed elements that are not divisible by 2, but keep odd-indexed elements.': [1, 0.0]
'[c133] remove the elements divisible by 3.': [1, 0.0]
'[c133] retain only the elements in the list that are a multiple of the first element.': [1, 0.0]
'[c133] return the elements at all even indices (assuming 0-indexing) in the array.': [1, 0.0]
'[c134] create a new list starting from the first element until the number 7 is reached, including 7.': [1, 0.0]
'[c134] eliminate all elements in the list other than the first two unique elements.': [1, 0.125]
'[c134] keep first instances of the repeated elements and keep the elements which do not repeat at all.': [1, 0.0]
'[c134] keep only the first occurrence of each number after the first, until another number is repeated.': [1, 0.0]
'[c134] keep only the numbers up to the first one that is greater than 20.': [1, 0.125]
'[c134] keep the order of the elements but remove consecutive duplicate numbers.': [1, 0.0]
'[c134] remove all elements that follow another same element.': [1, 0.0]
? '[c134] remove any elements that are greater than or equal to 10 and are not followed by a number that is the same as their last digit.'
: [1, 0.0]
'[c134] remove any number in the list that is smaller than the number that precedes it.': [1, 0.0]
'[c134] remove consecutive, non-unique pairs of numbers.': [1, 0.0]
'[c134] remove elements from the list that are followed by more than one of the same number.': [1, 0.0]
'[c134] remove elements that are divisible by both 2 and 5.': [1, 0.0]
'[c134] remove middle elements between the same elements.': [1, 0.125]
'[c134] remove numbers from the sequence which are followed by a smaller number.': [1, 0.0]
'[c134] remove numbers that are between 1-9 and 20-99, excluding the first and last instances of the same number.': [1, 0.125]
'[c134] remove numbers that are less than 2 places away and higher than the rest.': [1, 0.0]
? '[c134] remove some duplicates, specifically, if two identical numbers are consecutive in the list, to remove the second number.'
: [1, 0.0]
'[c134] remove the elements that are between the duplicate pairs.': [1, 0.0]
'[c134] remove the occurrence of the digit 7 and the next number if there are consecutive or more occurrences.': [1, 0.125]
? '[c134] retain only the elements that appear more than once, as well as the first and last elements, and delete the rest of the elements.'
: [1, 0.0]
'[c135] remove the 7s from the start of the list until a number other than 7 is encountered.': [1, 0.375]
'[c135] remove the first 7 in the list.': [2, 2.0]
'[c135] remove the first instance of the number 7.': [1, 0.875]
'[c135] remove the first instances of 7.': [1, 0.875]
'[c135] remove the first occurrence of 7 (if it exists).': [1, 1.0]
'[c135] remove the first occurrence of 7 from the list.': [1, 0.75]
'[c135] remove the first occurrence of 7.': [4, 3.875]
'[c135] remove the first occurrence of number 7 from the list.': [1, 1.0]
'[c135] remove the first occurrence of the number 7 from the list.': [1, 0.875]
'[c135] remove the first occurrence of the number 7 in the list.': [1, 0.75]
'[c135] remove the first occurrence of the number 7.': [5, 4.625]
'[c135] remove the occurrence of ''7'' from the list except the last ''7''.': [1, 0.0]
'[c136] remove 71 and the fourth number from the last in the list if there are enough numbers.': [1, 0.125]
'[c136] remove any element that is 96 or it''s multiple.': [1, 0.125]
'[c136] remove duplicates that appear consecutively.': [1, 0.125]
'[c136] remove duplicates that are directly next to each other in the list.': [1, 0.125]
'[c136] remove elements that are more than 70.': [1, 0.25]
'[c136] remove repeated consecutive numbers and leave only one instance of the number.': [1, 0.0]
'[c136] remove the 7th element, if the list contains more than 7 elements.': [1, 0.0]
'[c136] remove the first occurrence of a repeated number(only if it repeats).': [1, 0.375]
'[c136] remove the first occurrence of repeating numbers.': [1, 0.25]
'[c136] remove the first occurrence of the number 94.': [1, 0.0]
'[c136] remove the last occurrence of the first element in the list.': [1, 0.125]
'[c136] remove the last occurrence of the first item.': [1, 0.25]
'[c136] remove the last occurrence of the first value in the list.': [1, 0.25]
'[c136] remove the last repeat of a number in the sequence.': [1, 0.125]
'[c136] remove the second occurrence of a number from the list.': [1, 0.25]
'[c136] remove the second occurrence of a number if it appears twice or more in the list.': [1, 0.5]
'[c136] remove the second occurrence of any number from the list.': [1, 0.375]
'[c136] remove the second occurrence of the first element.': [1, 0.125]
'[c136] remove the second recurrence of any number in the list.': [1, 0.0]
'[c136] remove the third occurrence of any number (if present).': [1, 0.0]
'[c137] eliminate any 3 from the list.': [1, 1.0]
'[c137] remove all 3''s from the list.': [1, 1.0]
'[c137] remove all instances of 3.': [1, 1.0]
'[c137] remove all instances of the number ''3'' from the list.': [1, 1.0]
'[c137] remove all occurrence of 3 from the list.': [1, 1.0]
'[c137] remove all occurrences of 3 from the list.': [1, 1.0]
'[c137] remove all occurrences of 3 in the list.': [1, 1.0]
'[c137] remove all occurrences of 3.': [2, 2.0]
'[c137] remove all occurrences of number 3.': [1, 1.0]
'[c137] remove all occurrences of the number 3.': [3, 3.0]
'[c137] remove all the 3''s from the list.': [1, 1.0]
'[c137] remove all the 3''s that are not the last one in the array.': [1, 1.0]
'[c137] remove all the number 3 from the list.': [1, 1.0]
'[c137] remove all the occurrences of the number 3 from the given list.': [1, 1.0]
'[c137] remove the element 3 from the list.': [1, 1.0]
'[c137] remove the number 3 from the list.': [1, 1.0]
'[c137] remove the occurrences of 3.': [1, 1.0]
'[c138] delete the first element if the same element comes again in the list.': [1, 0.5]
'[c138] keep only those elements that are repeated at least once after its first occurrence.': [1, 0.0]
'[c138] remove all first duplicates, if any, including the original.': [1, 0.375]
'[c138] remove all instances of the first occurring number.': [1, 1.0]
'[c138] remove all occurrences of the first element.': [2, 1.375]
'[c138] remove all occurrences of the first number of the list.': [1, 0.5]
'[c138] remove all the first elements that occur in the list.': [1, 0.875]
'[c138] remove consecutive duplicates in the list.': [1, 0.0]
'[c138] remove duplicates that are next to each other.': [1, 0.0]
'[c138] remove every element that is equal to the first element.': [1, 1.0]
'[c138] remove every even elements of same number.': [1, 0.0]
'[c138] remove the copies of the first element in the list.': [1, 0.875]
'[c138] remove the first and each instance of this number from the list.': [1, 0.875]
'[c138] remove the first and last occurrences of each element.': [1, 0.25]
'[c138] remove the first instance of repeating numbers.': [1, 0.0]
'[c138] remove the first occurrence and last occurrence of the same element.': [1, 0.125]
'[c138] remove the first occurrence of every unique number in the list.': [1, 0.0]
'[c138] remove the first recurring number and all its reiterations.': [1, 0.875]
'[c138] remove the first repeated element found.': [1, 0.25]
'[c138] replace numbers greater than 10 with 1 and less than 10 with 0.': [1, 0.375]
'[c139] remove 1 and any repeated number from the list.': [1, 0.25]
'[c139] remove 1s and any number that ends in a 7.': [1, 0.0]
'[c139] remove all duplicates, leaving only the first and last occurrence of each number.': [1, 0.25]
'[c139] remove all elements that are multiples of 3.': [1, 0.125]
'[c139] remove all first and last occurrences of any digit from the list.': [1, 0.375]
'[c139] remove any elements from the list that are exactly 0 or a multiple of 5.': [1, 0.125]
'[c139] remove both duplicates if a number appears more than once in the list.': [1, 0.5]
'[c139] remove duplicate consecutive numbers in the list.': [1, 0.0]
'[c139] remove duplicate elements and keep the non-recurring elements.': [1, 0.5]
'[c139] remove duplicate numbers in a sequence from left to right.': [1, 0.375]
'[c139] remove elements from the list that are repeated immediately after (have the same value as the previous value).': [1, 0.25]
'[c139] remove elements from the list that are the same as the number directly before or after them.': [1, 0.25]
'[c139] remove numbers that are repeated consecutively.': [1, 0.125]
'[c139] remove repetitions in the list.': [1, 0.375]
'[c139] remove the elements that appear more than once in the list.': [1, 0.125]
'[c139] remove the first and last occurrence of a number if it occurs more than once.': [1, 0.25]
'[c139] remove the first occurrence and last occurrence of each number, if a number occurs more than once.': [1, 0.125]
? '[c139] remove the instances of 1 if they are not at the two ends of the list, as well as remove duplicated elements (elements that appear more than once in the list).'
: [1, 0.0]
'[c139] remove the last element if it is equal to the first one, and repeat until this is not true anymore.': [1, 0.125]
'[c139] remove the numbers 1, 97, 55, 45, and 77.': [1, 0.0]
'[c140] replace the number 1 with the number 9 in the second position of the list.': [1, 0.25]
'[c140] replace the second element in the list with 9.': [1, 1.0]
'[c140] replace the second element in the list with the number 9 regardless of its original value.': [1, 1.0]
'[c140] replace the second element with 9.': [9, 9.0]
'[c140] replace the second element with the number 9.': [6, 6.0]
'[c140] replace the second item in the list with 9.': [1, 1.0]
'[c140] replace the second position with the number 9.': [1, 1.0]
'[c141] move the first duplicate to the end of a list from the left and delete the second duplicate.': [1, 0.125]
'[c141] move the second element in the list to the position before the last one.': [1, 0.125]
'[c141] move the second element just after the first element which is greater than the second element.': [1, 0.0]
'[c141] move the third element to the first position and the first element to the fifth position.': [1, 0.0]
'[c141] remove every two 3''s or 4''s or 5''s from the list.': [1, 0.0]
'[c141] remove first and second elements of list and put the second element at index 5.': [1, 0.0]
'[c141] remove the first and last elements and then swap positions of the second and second last elements.': [1, 0.0]
'[c141] remove the first and second element of the array.': [1, 0.125]
'[c141] remove the first and second elements in the list, then swap the new first and second elements.': [1, 0.375]
'[c141] remove the first and second elements.': [1, 0.25]
'[c141] remove the first and the last number from the list.': [1, 0.125]
'[c141] remove the first and the second element and then replace the second last element with the second element.': [1, 0.125]
'[c141] remove the first and third element from the list.': [1, 0.125]
'[c141] remove the first element and the fourth element.': [1, 0.0]
'[c141] remove the first number and replace the second number with the fourth number.': [1, 0.125]
'[c141] remove the first occurrence of the first number and the last occurrence of the last number.': [1, 0.125]
'[c141] remove the first two elements and the last two elements.': [1, 0.0]
'[c141] remove the first two elements.': [1, 0.25]
'[c141] swap the second and last numbers and remove the first and last numbers.': [1, 0.25]
'[c141] switch the positions of the second and third numbers and remove the first in the list.': [1, 0.0]
'[c142] add a 0 if the number is less than 10 and then break each number into individual digits.': [1, 1.0]
'[c142] break down each number into its digits.': [1, 1.0]
'[c142] break down each number into its individual digits.': [1, 1.0]
'[c142] break each number into its individual digits.': [1, 1.0]
'[c142] convert each value to 2 digit and add a 0 between them.': [1, 0.5]
'[c142] explode each element into its individual digits.': [1, 0.25]
'[c142] intersperse a 0 between each digit of each number in the list.': [1, 0.0]
'[c142] list all the digits of the numbers and add a zero between them.': [1, 0.375]
'[c142] prepend a zero to single-digit numbers and then concatenate the numbers in order.': [1, 1.0]
'[c142] replace a two-digit element with its digits, and replace a one-digit element with 0 and the digit.': [1, 1.0]
'[c142] replace each number with its digits, and if it only has one digit, prepend a zero.': [1, 1.0]
'[c142] replace each number with its individual digits, followed by a 0 unless it is the last number.': [1, 0.75]
'[c142] separate digits and add 0 in place of numbers smaller than 10.': [1, 1.0]
'[c142] separate each number into its individual digits, and prepend a 0 if the number is a single digit.': [1, 1.0]
'[c142] separate the digits of the numbers in the list, and then add a zero before all but the first and last numbers.': [1, 0.25]
? '[c142] split all two digit numbers into individual digits, and if the number is single digit add a zero at its beginning and split.'
: [1, 1.0]
'[c142] split each element into its individual digits and prepend a zero to single digit numbers.': [1, 1.0]
'[c142] split each number into its individual digits.': [2, 2.0]
'[c142] unpack each number into its digits, and insert a 0 between numbers.': [1, 0.375]
'[c143] change the third element in the array to the first number under or equal to 5.': [1, 0.0]
'[c143] remove the first element.': [1, 0.0]
'[c143] replace a number with the fourth number before it.': [1, 0.125]
'[c143] replace all elements equal to the third element in the list with the first element.': [1, 0.0]
'[c143] replace all elements greater than 9 with the second element from the right side in the list.': [1, 0.125]
'[c143] replace all elements which are larger than the following element with the following element.': [1, 0.375]
'[c143] replace all occurrences of a two-digit number with the last digit of that number.': [1, 0.0]
'[c143] replace any duplicate value in the sequence with the value of the first number of the sequence.': [1, 0.125]
'[c143] replace any number that repeats consecutively with the number immediately preceding it.': [1, 0.0]
'[c143] replace any repeated number in a list with the one that comes before it.': [1, 0.125]
'[c143] replace consecutive duplicates with the smaller value.': [1, 0.5]
'[c143] replace duplicate elements, up to only one duplicate (i.': [1, 0.25]
'[c143] replace duplicate occurring numbers with the number 5.': [1, 0.0]
'[c143] replace each even number with the preceding odd number.': [1, 0.0]
'[c143] replace elements in the list with the smallest number found in the list up to that point.': [1, 0.25]
'[c143] replace every double occurrence of a number in the list with the smallest number in that list.': [1, 0.375]
? '[c143] replace the first occurrence of the number 5 with the number 2, unless the list contains 9, then replace the second number in the sequence with 5.'
: [1, 0.0]
'[c143] replace the fourth element with the minimum element.': [1, 0.25]
'[c143] replace the fourth element with the third element and the last element with the fifth if they exist.': [1, 0.125]
'[c143] replace the last occurrence of the smallest number in the list with the smallest number itself.': [1, 0.25]
'[c144] replace 2 and 9 in a list with 90 and random 2digit prime numbers (if present) respectively.': [1, 0.125]
'[c144] replace 4s with 0s and replace 2s with the last digit of the next number.': [1, 0.0]
'[c144] replace all instances of 2 with 90 (if any) and replace the second element (if any) with 88.': [1, 0.0]
'[c144] replace all occurrences of 4 and 98 with the previous number minus two.': [1, 0.125]
'[c144] replace all the multiples of 4 by their predecessor.': [1, 0.0]
'[c144] replace all values of 4 by X, where X is the highest number in the list and replace all values of 2 by X-2.': [1, 0.0]
'[c144] replace each number with the difference between a constant 100 and that number.': [1, 0.0]
'[c144] replace elements that are a single digit with the difference of': [1, 0.125]
'[c144] replace every 4th and 7th element with a reversed version of itself.': [1, 0.0]
'[c144] replace every other number (after the first element) with its difference from 100.': [1, 0.125]
'[c144] replace every second number with the difference between the first and second number.': [1, 0.125]
'[c144] replace tens place with 9 if the tens place is less than 9 and all elements with single digit will remain same.': [1, 0.125]
'[c144] replace the elements that can be divided by 3 with the previous element in the list.': [1, 0.0]
'[c144] replace the first and last numbers by their digit sum if they are two digit numbers, else leave them as is.': [1, 0.0]
'[c144] replace the number 4 with the number before it in the series.': [1, 0.125]
'[c144] replace the two surrounding numbers of the least number with the least number subtracted from 100.': [1, 0.125]
? '[c144] subtract 2 from the second number of the list and replace the third number and any subsequent even numbers until the next odd number with that result.'
: [1, 0.0]
'[c144] subtract 5 from 2nd, 4th, 6th elements and so on including all even positions in the list.': [1, 0.125]
? '[c144] subtract every element by 2 unless it''s less than 10 and replace it with the previous element if it''s less than or equal to 2.'
: [1, 0.0]
'[c144] subtract the second element from the first if the difference is greater than zero.': [1, 0.125]
'[c145] replace all elements in the list with the first element.': [1, 1.0]
'[c145] replace all elements of the list with the first element of the list.': [1, 1.0]
'[c145] replace all elements with the first element of the list.': [3, 3.0]
'[c145] replace all elements with the first element.': [11, 11.0]
'[c145] replace all the elements with the first element.': [1, 1.0]
'[c145] replace each element in the list with the first element.': [1, 1.0]
'[c145] replace every element in the list with the first element.': [1, 1.0]
'[c145] replace every element with the first element.': [1, 1.0]
'[c146] find the absolute difference between each pair of consecutive elements.': [1, 1.0]
'[c146] generate a list by adding 10 to the difference between each successive pair of elements.': [1, 0.625]
'[c146] remove the first number and subtract 1 from all the remaining numbers.': [1, 0.125]
'[c146] remove the last number and subtract all elements by the last number.': [1, 0.0]
'[c146] subtract 8 from each item in the list and remove the last item.': [1, 0.125]
'[c146] subtract 9 from each element, except the last one.': [1, 0.0]
'[c146] subtract each element by the previous element and remove the first element.': [1, 0.375]
'[c146] subtract each element from 100 except for the last and the second last element which stay the same.': [1, 0.125]
'[c146] subtract each element from the following element.': [1, 1.0]
'[c146] subtract each element from the next consecutive one and discard the last number.': [1, 0.25]
'[c146] subtract each element from the next element in the list.': [1, 0.25]
'[c146] subtract each element from the next.': [1, 0.375]
'[c146] subtract each element with the previous element.': [1, 0.125]
'[c146] subtract each item in the list from the following item.': [1, 0.25]
'[c146] subtract each number from the next number starting from the second number till the end of the list.': [1, 1.0]
'[c146] subtract each number one by one from the previous one.': [1, 1.0]
'[c146] subtract the nth prime number from each number (where n is the index+1), excluding the 7th and 8th number.': [1, 0.125]
'[c146] subtract the number 61 from all elements except the last two.': [1, 0.0]
'[c146] subtract the preceding number from each number starting from the second (i.': [1, 0.25]
? '[c146] take each successive pair of elements and subtract the second from the first, removing the last element if the list length is odd.'
: [1, 0.125]
'[c147] add an increasing count after every number starting from 1.': [1, 1.0]
'[c147] insert a number after each existing number in the list, starting from 1 and increasing by 1 each time.': [1, 1.0]
'[c147] insert a series of increasing numbers starting from 1 after each existing number.': [1, 1.0]
'[c147] insert an increasing counter value after every element in the list.': [1, 1.0]
'[c147] insert an increasing number after each number in the list starting from 1.': [1, 1.0]
'[c147] insert an increasing sequence of numbers (starting from 1) after each element in the list.': [1, 1.0]
'[c147] insert an incrementally increasing natural number (starting at 1) after each element in the list.': [1, 1.0]
'[c147] insert an integer between each element starting from 1, and increasing by 1 each time.': [1, 1.0]
'[c147] insert an integer sequence (starting from 1) after every element in the list.': [1, 1.0]
'[c147] insert ascending numbers starting from 1 between each number in the list.': [1, 0.875]
'[c147] insert ascending numbers starting from 1 between the elements.': [1, 1.0]
'[c147] insert digit counting sequence between each pair of elements.': [1, 1.0]
'[c147] insert increasing numbers starting from 1 between every two elements.': [1, 1.0]
'[c147] insert incremented count after each entry.': [1, 1.0]
'[c147] insert incrementing integers starting from 1 between every two elements.': [1, 1.0]
'[c147] insert incrementing numbers starting from 1 between each element in the list.': [1, 1.0]
'[c147] insert n (n = 1, 2, 3, .': [1, 1.0]
'[c147] insert numbers from 1 to n between each elements of the original list, where n is the number of elements.': [1, 1.0]
'[c147] insert the index after each element, starting with index 1.': [1, 1.0]
'[c147] intersperse the input list with a sequence, starting from 1 and increasing by 1 for each element.': [1, 1.0]
'[c148] expand each element to a range from 1 up to that element.': [1, 1.0]
'[c148] extend the original list with the range from 1 to each number in the list.': [1, 1.0]
'[c148] generate a list from 1 to the given number repetitively.': [1, 1.0]
'[c148] generate a sequence of "1 to n" where "n" are the elements in the list.': [1, 1.0]
? '[c148] generate a series of consecutive numbers bringing to 1 less than the number in the list, then generate the original number itself.'
: [1, 1.0]
? '[c148] insert the list [1, 2, 3, 4, 5, 6, 7, 8] before each element of the input list, up to and including the number itself.'
: [1, 1.0]
'[c148] insert the numbers from 1 through n where n is each element in the initial list.': [1, 1.0]
'[c148] insert the sequence [1,2,3,4,5.': [1, 1.0]
'[c148] put numbers from 1 through N for each N in the input list.': [1, 1.0]
'[c148] repeat numbers from 1 to the number in the input for each number in the input.': [1, 1.0]
'[c148] repeat the sequence from 1 to the number for each element in the list.': [1, 1.0]
? '[c148] replace each element in the list with a list progressing from 1 up to that element, repeating the list for every repeated element.'
: [1, 1.0]
'[c148] replace each element in the list with a sequence from 1 to the element.': [1, 1.0]
'[c148] replace each element n with a list from 1 to n.': [1, 1.0]
'[c148] replace each element with a list from 1 to the value of the element.': [1, 1.0]
'[c148] replace each number in the list by a sub-list from 1 to that number.': [1, 1.0]
'[c148] replace each number with a sequence from 1 to that number.': [1, 1.0]
? '[c148] replace every number "n" with the series of numbers from 1 to "n" (inclusive), keeping the original number at the end of that series.'
: [1, 1.0]
'[c148] replace every number in the list with the numbers from one to itself.': [1, 1.0]
'[c148] replicate the series from 1 up to each number in the list.': [1, 1.0]
? '[c149] eliminate the first element in the list if it is not greater than 5 and multiply by 2 the remaining elements and keep the rest of the list the same.'
: [1, 0.375]
'[c149] first remove the first element, and then multiply all remaining elements by the first number.': [1, 0.875]
'[c149] multiply consecutive elements in the list.': [1, 0.25]
'[c149] multiply each number by the next number in the list.': [1, 0.25]
'[c149] multiply the first and second elements and record that as the first result.': [1, 0.125]
'[c149] multiply the first element with each of the remaining elements and discard the first element.': [1, 1.0]
'[c149] multiply the first two elements together and remove the first element.': [1, 0.5]
? '[c149] multiply the first two numbers and keep the rest as is, unless the first number is 1, in which case we keep just the rest.'
: [1, 0.5]
'[c149] multiply the first two numbers and replace them with the result, if more than one number exist.': [1, 0.375]
'[c149] remove the first element and multiply all other elements by the removed element.': [1, 1.0]
'[c149] remove the first element and multiply all remaining elements by 3, except for 0s.': [1, 0.25]
'[c149] remove the first element and multiply the remaining elements by the first element.': [1, 0.875]
'[c149] remove the first element and multiply the remaining elements by the number before them.': [1, 0.75]
'[c149] remove the first element and then multiply each remaining element by 3.': [1, 0.25]
'[c149] remove the first element and then multiply the remaining elements by it.': [1, 1.0]
? '[c149] remove the first element if it is less than 10, else replace it by multiplication of the first three elements from the list.'
: [1, 0.375]
? '[c149] remove the first element if it''s 1 or 6, replace 10 with 50, replace 5 with 10, and replace remaining elements with 0 if they''re less than 10.'
: [1, 0.0]
'[c149] remove the first element if it''s 1, and replace every other element with its double.': [1, 0.125]
'[c149] remove the first number and replace it with the product of the first and second numbers.': [1, 0.5]
? '[c149] take pairs of elements and multiply them together, omitting the calculation for the last element if the list length is odd.'
: [1, 0.25]
'[c150] add all the numbers between the first digit and any digits that follow and are larger than it.': [1, 0.625]
? '[c150] add sequential numbers from the highest until it reaches the next number if the preceding number is higher than the succeeding one.'
: [1, 0.125]
'[c150] append a range from the max number to max+1 of the next number after max in the list.': [1, 0.375]
? '[c150] append the sequence of numbers between the first element and the fourth element, if the fourth element is greater than the first.'
: [1, 0.75]
? '[c150] append the sequence of numbers in ascending order starting from the first element to the maximum element (exclusive).'
: [1, 0.5]
'[c150] check for consecutive numbers.': [1, 0.125]
? '[c150] detect if an element is followed by a larger element, then it fills in the gap from the element until the larger element.'
: [1, 0.375]
'[c150] expand the list with the intermediate numbers if there is a gap of two or more units.': [1, 0.0]
'[c150] expand to include all whole numbers between any two consecutive integers including the integers themselves.': [1, 0.625]
'[c150] fill in the numbers between consecutive numbers in descending order.': [1, 0.25]
'[c150] fill in the sequence between first and last number, if there is a possible ascending sequence from first to last.': [1, 0.625]
'[c150] fill the gap between two consecutive numbers if the gap is greater than 1.': [1, 0.375]
'[c150] insert a sequence of integers from itself (i) to the next number (j) in the middle of the list if j > i.': [1, 0.125]
? '[c150] insert a sequence of integers starting from the first element to the largest element (exclusive) at the fourth position in the list if the largest element is larger than the first element and not already in the list.'
: [1, 0.0]
? '[c150] insert a series of numbers incrementally from the first element to the last element if these elements are different.'
: [1, 0.5]
'[c150] insert all integers from the first number to the second number.': [1, 0.625]
? '[c150] insert the numbers from the first number (inclusive) to the fourth number (exclusive) only if their difference is more than 1.'
: [1, 0.375]
'[c150] insert the sequence between two numbers if they are in ascending order and are not next to each other.': [1, 0.375]
? '[c150] insert the sequence of integers from the first number (inclusive) to the highest number (exclusive) right after the highest number.'
: [1, 0.125]
'[c150] insert the sequence of numbers from previous element to the next element if the following number is larger.': [1, 0.25]
'[c151] append five copies of each element in the input that isn''t 1, if there are at least three elements in the input.': [1, 0.25]
'[c151] duplicate each element based on its own value.': [1, 0.75]
'[c151] duplicate each number n times where n equals its value except for zero.': [1, 0.75]
'[c151] duplicate the number of times each element of the list occurs based on their original value.': [1, 0.75]
'[c151] generate a list of elements repeated a number of times with the number being the original element.': [1, 0.5]
'[c151] insert the number of elements equal to each element into the list.': [1, 0.125]
'[c151] repeat each distinct number five times.': [1, 0.125]
'[c151] repeat each element in the list 5 times.': [1, 0.0]
'[c151] repeat each element of the list according to its value.': [1, 0.25]
'[c151] repeat each element the number of times it represents.': [1, 0.625]
'[c151] repeat each number in the list for the number of times specified by the numbers in the list.': [1, 0.5]
'[c151] repeat the first element 4 times, the second element 7 times, and the third element 4 times.': [1, 0.125]
'[c151] repeat the last number five times, and repeat all other numbers twice.': [1, 0.25]
'[c151] repeat the last two elements in the list four more times, preserving their order.': [1, 0.0]
'[c151] repeat the second element by the magnitude of the first element.': [1, 0.125]
'[c151] repeat the unique elements in the list for five times.': [1, 0.125]
'[c151] replace each element with its square in the form of repeated occurrences of that element.': [1, 0.125]
'[c151] replicate the list''s elements n times, where n is the value of the element.': [1, 0.5]
'[c151] replicate the number according to its place in order.': [1, 0.0]
'[c151] triple the count of each number in the list in the given order.': [1, 0.0]
? '[c152] change each element to its digital root (the value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration, until only a single digit remains).'
: [1, 0.0]
'[c152] divide all elements except zero by 2 and round down to the nearest integer.': [1, 0.0]
'[c152] divide each element by 2 and keep the integer part.': [1, 0.125]
'[c152] divide each element by 2 then round down to the nearest integer.': [1, 0.0]
'[c152] divide each element by 3 and then round down to the nearest integer.': [1, 0.0]
'[c152] divide each element by 5 and round down to the nearest integer.': [1, 0.0]
'[c152] divide each number by 2 and take the floor of the result (i.': [1, 0.0]
? '[c152] divide each number by 2, keep the integer part, and if the original number is a multiple of 3, multiply the result by 3.'
: [1, 0.125]
'[c152] divide every number by two and take the floor value, i.': [1, 0.125]
'[c152] exchange the tens digit by the units digit and compute it by dividing it by 2.': [1, 0.0]
'[c152] find the square of each digit in the number and add them together.': [1, 0.25]
'[c152] half the element if it is divisible by 2 and replace it by 0 if it is divisible by 3.': [1, 0.0]
'[c152] replace each element with 4 * (the number of tens in the element).': [1, 0.0]
'[c152] replace each element with its half if it''s even, and with its two-thirds if it''s odd.': [1, 0.125]
'[c152] replace each number with half of its value, rounded down.': [1, 0.0]
'[c152] replace each number with its corresponding digit value in a base 8 system.': [1, 0.125]
'[c152] replace each number with its square root and rounding to the nearest integer.': [1, 0.0]
'[c152] replace each number with the sum of its digits.': [1, 0.125]
'[c152] subtract each element by 10 if its value is higher than 10 otherwise set it to 0.': [1, 0.125]
'[c152] take the half of each number and round it down to the nearest whole number.': [1, 0.0]
'[c153] append the count of each element right after it in the sequence.': [1, 0.25]
'[c153] compile a list of numbers and their frequencies.': [1, 1.0]
'[c153] count the frequency of each number in the list, giving a list of unique elements followed by their frequency.': [1, 1.0]
'[c153] count the occurrence of each unique number and replace each number with its count.': [1, 0.125]
'[c153] count the occurrence of each unique number.': [1, 1.0]
? '[c153] count the occurrences of each number in the list and replace the sequence of the same number with the number followed by its occurrence count.'
: [1, 1.0]
'[c153] count the occurrences of each unique element and list them in the order they appear.': [1, 0.875]
'[c153] count the repetitions of each item and then return the list of items following by their frequency.': [1, 1.0]
? '[c153] create a list that starts with the first number then the count of that number, then next number then the count of that number and so on.'
: [1, 1.0]
'[c153] create a new list alternating between a unique number and the number of times it appears consecutively in the list.': [1, 0.25]
? '[c153] generate a list containing each unique number followed by the count of those number''s occurrences in the original list.'
: [1, 1.0]
'[c153] insert the frequency of each number after the same number in the list.': [1, 1.0]
? '[c153] keep the unique numbers and number of times they occur by replacing the duplicate number with the count of its occurrence.'
: [1, 0.875]
'[c153] list the unique elements followed by their count in the array.': [1, 1.0]
'[c153] repeat numbers in the list and number of times it''s present.': [1, 0.875]
'[c153] replace all duplicates in the list with the number of times they appear.': [1, 0.75]
'[c153] replace each number with the frequency of itself in the list.': [1, 0.25]
'[c153] replace every repeated instance of an element by their occurrence count.': [1, 0.875]
'[c153] replace every unique number in the array with its occurrence count.': [1, 0.875]
'[c153] replace the repeated elements with the count of how many times they appear.': [1, 0.0]
'[c154] find the numbers that are multiples of 2 and 3, and then multiply them by 3.': [1, 1.0]
'[c154] multiply 2 by numbers 4, 6, and 8 and replace their original value with the result.': [1, 0.0]
'[c154] multiply 3 to each number divisible by 2 except 0.': [1, 0.875]
'[c154] multiply any 2, 4, 6, or 8 by 3.': [1, 0.625]
'[c154] multiply any number divisible by 4 by 3, and any number divisible by 6 by 3.': [1, 0.375]
'[c154] multiply by 3 all elements of the list that are part of 2, 4, 6, 8.': [1, 0.625]
'[c154] multiply by 3 all the numbers in the list that ends with 2, 4, 6 or 8.': [1, 0.75]
'[c154] multiply by 3 any numbers less than 10.': [1, 0.0]
'[c154] multiply each number divisible by 3 in the list by 3.': [1, 0.125]
'[c154] multiply every number by 3, if the number is 2, 6, or 8.': [1, 0.125]
'[c154] multiply the elements by 3 if it is at an even index and greater than 1.': [1, 0.0]
'[c154] multiply the elements that are multiples of 2 or 3, by 3.': [1, 0.25]
'[c154] multiply the number by 3 if it is between 5 and 9 included, and leave other numbers unchanged.': [1, 0.125]
'[c154] multiply the numbers 4, 6, and 8 by 3, and leave all other numbers as they are.': [1, 0.25]
'[c154] multiply the numbers at the positions 2, 4 and 6 by three.': [1, 0.0]
'[c154] replace all 8''s in the list with 24, all 4''s with 12, and all 3''s with 18, and all 10''s with 30.': [1, 0.125]
'[c154] replace every 6 with 18, every 8 with 24, every 10 with 30 and every 22 with 66.': [1, 0.25]
'[c154] triple each element that is a multiple of 2.': [1, 1.0]
'[c154] triple the 6, 8, and 4 if they appear in the list.': [1, 0.25]
'[c154] triple the numbers if they are less than 10.': [1, 0.125]
'[c155] generate a list where each element is the product of its place in the list and the specific digit.': [1, 0.875]
'[c155] multiply an element by its index in the list.': [1, 0.0]
'[c155] multiply each element by its index position.': [1, 0.0]
'[c155] multiply each element by its index.': [4, 0.0]
'[c155] multiply each element by its position(index + 1) in the array.': [1, 1.0]
'[c155] multiply each element with its index + 1.': [1, 1.0]
'[c155] multiply each element with its index plus one.': [1, 1.0]
'[c155] multiply each number by its index.': [1, 0.0]
'[c155] multiply each number by its position index plus 1.': [1, 1.0]
'[c155] multiply the index of each element by the element itself starting from index 1.': [1, 0.0]
'[c155] multiply the index with element.': [1, 0.0]
'[c155] multiply the number with its index plus one.': [1, 1.0]
'[c155] replace each element with the element multiplied by its (zero-based) index.': [1, 0.0]
'[c155] replace each element with the element times its position in the array.': [1, 1.0]
'[c155] replace each element with the product of its index and the corresponding element.': [1, 0.0]
'[c155] replace each number with the product of its position and value in the array.': [1, 1.0]
'[c156] add 1 to each element, and then reverse their digits.': [1, 0.0]
'[c156] add 1 to even elements and add 2 to odd elements.': [1, 0.0]
'[c156] add 1 to every element and reverse the list positions.': [1, 0.0]
'[c156] add 1 to the element, then reverse the digits.': [1, 0.0]
'[c156] add 1 to the elements divided by 2, then multiply by 10 and round to the nearest integer.': [1, 0.0]
'[c156] add 1 to the first element, and add 3 to the rest of the list.': [1, 0.0]
? '[c156] add 1 to the first element, square the second element, add 3 to the third element, subtract 2 from the fourth element, add 4 to the fifth, and so on in a repeating pattern.'
: [1, 0.0]
'[c156] add 1 to the index and add this number to each element.': [1, 0.0]
'[c156] add 10 and reverse the digits of each element in the list.': [1, 0.0]
'[c156] add 10 minus the last digit of each element.': [1, 0.0]
'[c156] add 3 and subtract 2 for all elements.': [1, 0.0]
'[c156] add 4 to each element, then swap the first and second digits of each result.': [1, 0.0]
'[c156] add 4 to each odd number and subtract 3 from each even number.': [1, 0.0]
'[c156] add each element with its index + 1.': [1, 0.0]
'[c156] add one to the number and then multiply by two.': [1, 0.0]
'[c156] add the preceding number to the digit one''s place and keep the digit ten''s place as it is.': [1, 0.0]
'[c156] increment each number that is less than 10 by 1, and decrement each number that is more than 10 by 7.': [1, 0.0]
? '[c156] replace each element with the element itself plus 1, except numbers which are multiple of 3, in which case it is replaced with the next single digit number.'
: [1, 0.0]
'[c156] swap the tens and ones digits, and, if there is no tens digit (i.': [1, 0.0]
'[c157] add a number after each element in the list, where the added number is either 0 or 1.': [1, 1.0]
'[c157] append 0 or 1 after each element, 0 if the number is even, 1 if the number is odd.': [1, 1.0]
'[c157] append 0 or 1 after each number based on whether the number is divisible by 7.': [1, 0.5]
'[c157] append a 0 if the number is even and a 1 if the number is odd after each number in the list.': [1, 1.0]
? '[c157] check each number in the list: if the number is even, append a 0 after it, if the number is odd, append a 1 after it.'
: [1, 1.0]
'[c157] expand the list by adding a binary number after each element, 1 if odd, 0 if even.': [1, 1.0]
? '[c157] extend the list by alternating between the original elements and 0 if the element is divisible by 2, and 1 if it''s not.'
: [1, 1.0]
'[c157] insert 0 after every even number and 1 after every odd number.': [2, 2.0]
'[c157] insert 0 if the following number is even and insert 1 if it is odd between the original list''s elements.': [1, 1.0]
'[c157] insert a 0 after an even number and a 1 after an odd number.': [1, 1.0]
'[c157] insert a 0 if the number is even or 1 if the number is odd after each number.': [1, 1.0]
'[c157] insert after each number, 0 if the number is even and 1 if the number is odd.': [1, 1.0]
'[c157] insert either 0 or 1 between every element in the list.': [1, 1.0]
'[c157] insert zero or one after each number based upon whether the number ends with an odd or even digit.': [1, 1.0]
'[c157] intersperse the given numbers with either 1 if the number is odd or 0 if the number is even.': [1, 1.0]
'[c157] iterate over the list, returning the current element and 1 if the element is odd, 0 if it''s even.': [1, 1.0]
? '[c157] iterate through each element x in list, represented as binary digit, then appends x and the count of 1s in the binary form of x to the new list.'
: [1, 0.0]
? '[c157] iterate through the list and for each number append that number and also append 0 if the number is even and 1 if the number is odd.'
: [1, 1.0]
? '[c157] replicate each element of the list followed by a binary indicator (1 if the element is odd, 0 if the element is even).'
: [1, 1.0]
'[c158] check if each element is the smallest value in the list replace it with 1 and replace other elements with 0.': [1, 0.0]
? '[c158] convert the list into a binary list where 1 represents a common number (a number that appears more than once) and 0 represents a unique number.'
: [1, 0.25]
'[c158] generate a list in which the number 1 represents a unique number from the starting of the array.': [1, 0.0]
'[c158] generate a list marking the last appearance of a number with 1, and all other instances with 0.': [1, 0.0]
? '[c158] replace all elements other than the 1st one with 0, if the new number created is the same as the preceding number, otherwise with 1.'
: [1, 0.0]
'[c158] replace all of the number after the first with 0, but replace the first 1 or 3 with 1.': [1, 0.0]
'[c158] replace an element by 1 if it occurs twice or 0 otherwise.': [1, 0.25]
'[c158] replace each element in a number sequence with 1 if the sequence starts with the element, else replace with 0.': [1, 0.125]
'[c158] replace each element in the list with 1 if it''s the first or last number and 0 otherwise.': [1, 0.125]
'[c158] replace each element with 1 if it equals 1, else replace it with 0.': [1, 0.0]
'[c158] replace each element with 1 if the previous and the next element are the same, and with 0 otherwise.': [1, 0.0]
'[c158] replace each item with 0 unless it and the next item are both less than 10, in which case replace it with 1.': [1, 0.0]
'[c158] replace each number with 0, except for the fourth number from the end which is replaced by 1.': [1, 0.0]
'[c158] replace even position numbers with 0s and odd position numbers 1s in the list.': [1, 0.0]
'[c158] replace every element with 0 except the last appearance of the most recurring element which is replaced by 1.': [1, 0.125]
'[c158] replace every number with 0 unless it is the smallest number in the list, in which case it is replaced with 1.': [1, 0.0]
'[c158] replace the first occurrence of a number with 1 and rest with 0.': [1, 0.0]
'[c158] replace the first occurrence of a number with 1 and the rest with 0.': [1, 0.0]
'[c158] replace the number 0 with the number 0 and the number 1 with the number 1.': [1, 0.0]
'[c158] return a binary list with 1s at the 4th and 5th position from end, rest are 0s.': [1, 0.0]
'[c159] count how many times each number from 0 to maximum value from the list appears in the list.': [1, 0.0]
'[c159] count how many times the number comes from 1 to the maximum value in the list and display in an ascending order.': [1, 0.625]
'[c159] count the frequency of each number from 0 to 9, and output those counts in order.': [1, 0.0]
'[c159] count the frequency of each number from 0 up to the maximum number in the list.': [1, 0.0]
'[c159] count the frequency of elements 1 to 8, and represent the frequency in the order 1, 2, 3, 4, 5, 6, 7, 8.': [1, 0.25]
'[c159] count the frequency of the integers from 0 to 10 and form a new list from the frequencies.': [1, 0.0]
'[c159] count the number of occurrences of each digit, from 0 to the maximum digit present in the list.': [1, 0.0]
'[c159] count the number of occurrences of each number from 1 to 10.': [1, 0.125]
'[c159] count the numbers of occurrence of a digit (0-9) from the input list.': [1, 0.0]
'[c159] count the occurrence of each number from 0 to 9 in the input array.': [1, 0.0]
'[c159] count the occurrences of each element.': [1, 0.0]
'[c159] count the occurrences of each number in the list from 0 to maximum number and display in order.': [1, 0.0]
'[c159] count the occurrences of numbers up to 10 in the original list.': [1, 0.25]
'[c159] count the occurrences of the numbers [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] in the list.': [1, 0.875]
'[c159] generate a 0 for each unique number in the list, then number of unique pairs, then groups of three, four and so on.': [1, 0.0]
'[c159] generate a list of counts of numbers up to 10 in the original list.': [1, 0.0]
? '[c159] organize the initial list into a new one that specifies the quantity of each distinct number ranging from 0 to the maximum number present in the initial list.'
: [1, 0.0]
'[c159] return a count of numbers 0-9 in the provided list.': [1, 0.0]
'[c159] show the frequency of numbers in a list up to a specific number.': [1, 0.0]
'[c160] Subtract each element from 99.': [1, 1.0]
'[c160] add 1 to the tens place and subtract 1 from the units place of each value.': [1, 0.0]
'[c160] add 90 to the original number, but place 9 instead of any occurrence of 10 in the resulting numbers.': [1, 0.0]
'[c160] complement elements w.': [1, 0.0]
'[c160] divide the first digit by 100 and append the first number to the end of the list.': [1, 0.0]
'[c160] generate a list of elements where each element = 100 - given element.': [1, 0.0]
'[c160] replace each element with 99 minus its original value.': [1, 1.0]
'[c160] reverse the list and subtract each element from 99.': [1, 0.0]
'[c160] reverse the tens and ones digits of each element, or append 99 if the element is below 10.': [1, 0.0]
'[c160] subtract each digit from 9 and then multiply by 10.': [1, 0.0]
? '[c160] subtract each element from 99 and reverse the digit, unless it''s a single-digit number, where we just subtract it from 99.'
: [1, 1.0]
'[c160] subtract each element from 99 and then switch the digits position.': [1, 0.875]
'[c160] subtract each element from 99.': [4, 4.0]
'[c160] subtract each input value from 100 and reverse the digits.': [1, 0.875]
'[c160] subtract each number from 99 and then reverse the order.': [1, 0.0]
'[c160] subtract each number from 99.': [2, 2.0]
'[c160] take each number, subtract it from 99, and return the difference.': [1, 1.0]
'[c161] add 1 to multiples of 7 and add 5 to multiples of 4.': [1, 0.0]
'[c161] add 5 to all elements except the last one.': [1, 0.0]
'[c161] add 5 to each element except if the element is a multiple of 5 in which case it remains itself.': [1, 0.0]
'[c161] add 5 to each element thereof, except the last one.': [1, 0.0]
'[c161] add 5 to each item in the list except the last one.': [1, 0.0]
'[c161] add 6 to every element, except the last one which remains the same.': [1, 0.0]
'[c161] add 7 to all elements that are not even, and add 1 to all the even elements.': [1, 0.0]
'[c161] add 7 to each element except the last one.': [1, 0.0]
'[c161] add 7 to each element except the last.': [1, 0.0]
'[c161] add 7 to elements less than 90 and leave the others as they are.': [1, 0.0]
'[c161] add 7 to the first five numbers if they are less than 90, otherwise keep them as they are.': [1, 0.0]
'[c161] add 8 to every integer in the list except if they are not divisible by 8 (will not be affected).': [1, 0.0]
'[c161] add 8 to every number in the list, except for numbers that end in 0 or 2.': [1, 0.0]
'[c161] add 9 to all elements except for the last one.': [1, 0.0]
'[c161] add 9 to each element except the last one.': [1, 0.0]
'[c161] increase all elements by 7, except for the last one.': [1, 0.0]
'[c161] increase each number by 8 except the last number.': [1, 0.0]
'[c161] increase every number by 7 unless it is a multiple of 9.': [1, 0.0]
'[c161] increment by 6 in each position until the last one.': [1, 0.0]
'[c161] increment each number except the last by the number of digits.': [1, 0.0]
'[c162] add 7 to each element and then multiply by 3.': [1, 0.0]
'[c162] multiply each element by 3 and add 7.': [2, 2.0]
'[c162] multiply each element by 3 and then add 7.': [2, 2.0]
'[c162] multiply each element by 3 and then subtract 5.': [1, 0.0]
'[c162] multiply each element by 4 and then add 7.': [2, 0.0]
'[c162] multiply each element by itself and add 7.': [1, 0.0]
'[c162] multiply each number by 3 and add 7.': [2, 2.0]
'[c162] multiply each number by 3 and then add 7.': [2, 2.0]
'[c162] multiply each number by 7 and add 7.': [1, 0.0]
'[c162] multiply each number by 7 then add 7.': [1, 0.0]
'[c162] multiply every element by 3 and then add 7.': [1, 1.0]
'[c162] multiply the element by two and then add three.': [1, 0.0]
'[c162] multiply the index of element by 7 plus itself.': [1, 0.0]
'[c162] multiply the number by 3 then add 7.': [1, 1.0]
'[c162] replace each number with the product of the number and 4 plus 7.': [1, 0.0]
'[c163] double each element and subtract 10.': [1, 1.0]
'[c163] double each number and add or subtract 2, depending on whether the number is odd or even.': [1, 0.25]
'[c163] each element by 2 then subtract 10.': [1, 1.0]
'[c163] multiply each element by 2 and subtract the element from 2.': [1, 0.125]
'[c163] multiply the element by 2 and then subtract 2.': [1, 0.0]
'[c163] multiply the input by 2 and subtract 10.': [1, 1.0]
'[c163] multiply the number by 2 and subtract 6.': [1, 0.0]
'[c163] multiply two less than each number by 2.': [1, 0.0]
'[c163] subtract 1 if it''s a single-digit number, else subtract 2.': [1, 0.25]
'[c163] subtract 2 from each number and then multiply by 2.': [1, 0.0]
? '[c163] subtract 2 from the number for numbers below 10 and add 5 to the number for numbers 10 or above and return the number.'
: [1, 0.25]
'[c163] subtract 3 from each element and then multiply by 2.': [1, 0.0]
'[c163] subtract 3 from each number and then double the result.': [1, 0.0]
'[c163] subtract 3 from each of the elements in the list, then multiply each element by 2.': [1, 0.0]
'[c163] subtract 3 from the first half of the list and add 20 to the last half.': [1, 0.0]
'[c163] subtract 5 and then multiply by 2 for each element.': [1, 1.0]
'[c163] subtract 5 from each element and then multiply by 2.': [1, 1.0]
? '[c163] subtract 5 from each element if the element is less than or equal to 10; add 18 to each element if the element is greater than 10 but less than or equal to 30; and add 32 to each element if the element is greater than 30.'
: [1, 0.125]
'[c163] subtract each element in the list by 5, and for every number ending with 7, add 20.': [1, 0.0]
'[c163] subtract values by 5 and then multiply it by 2.': [1, 1.0]
'[c164] add 5 to the square root of each element (rounded down).': [1, 0.125]
'[c164] add up the digits of each number in the list.': [1, 0.0]
'[c164] compute the sum of the digits of each number.': [1, 0.0]
'[c164] divide each element by 3 and then take the floor of the result.': [1, 0.0]
'[c164] divide each element by 4 and round up to the nearest integer.': [1, 0.0]
'[c164] divide each element by 5 and round up to the nearest integer.': [1, 0.0]
'[c164] find the digit sum of each number in the list and add 4.': [1, 0.25]
'[c164] reduce each number in the list to the sum of its digits.': [1, 0.0]
'[c164] replace each element with its integer square root plus 5.': [1, 0.125]
'[c164] replace each element with the integer square root of the element plus 5.': [1, 0.0]
'[c164] replace each element with the sum of its digits.': [1, 0.0]
'[c164] replace each number n with the sum of digits in its square.': [1, 0.125]
'[c164] replace each number with half of its sum of digits, rounded down.': [1, 0.0]
'[c164] replace each number with the sum of its digits.': [1, 0.0]
'[c164] replace the element with the sum of its digits.': [1, 0.0]
'[c164] subtract the nearest smaller multiple of 4 from each element.': [1, 0.125]
'[c164] take the square root of each element, round to the nearest whole number, and add 4.': [1, 0.25]
'[c164] take the square root of each number in the list and round it to the nearest integer.': [1, 0.0]
'[c164] take the square root of each number in the list, round it down to the nearest whole number, and then add 5.': [1, 0.0]
'[c164] take the square root of each number, round it to the nearest whole number, then add 1.': [1, 0.0]
'[c165] create a list starting from the last number that is divisible by 4 towards the first element with step of 4.': [1, 0.125]
'[c165] create a list with every other number starting from the back, skipping one number between each chosen number.': [1, 0.0]
'[c165] create a new list only with the numbers that are even, in reverse.': [1, 1.0]
'[c165] generate a list containing the last, fourth, third, and first items, in that order.': [1, 0.0]
'[c165] generate a list of all the elements at positions divisible by 3 starting from the end of the list.': [1, 0.0]
'[c165] generate a list of elements at indices 9, 8, 6, 4, 2, 0.': [1, 0.0]
? '[c165] generate a new list beginning with the last element, then every second consecutive element in reverse order from there, and ending with the first element, only including elements indexed at even places (0, 2, 4, .'
: [1, 0.0]
? '[c165] generate a new list that includes numbers from the original list that appear after the number 8 if it is in the list, else includes the numbers that appear before the 8 value.'
: [1, 0.0]
'[c165] generate a new list with only the even elements of the starting list in reverse order.': [1, 1.0]
'[c165] keep only even numbers and reverse the order.': [1, 1.0]
'[c165] keep only the numbers that are divisible by 8 or less in the list and reverse this new list.': [1, 0.0]
? '[c165] remove elements until reaching a number that is a multiple of 8, then add the remain elements that are multiples of 8.'
: [1, 0.0]
'[c165] return the even-indexed elements starting from the end of the list.': [1, 0.0]
'[c165] reverse every two elements up to the middle of the list.': [1, 0.0]
'[c165] reverse the list and keep only numbers greater than and equal to 4.': [1, 0.0]
'[c165] reverse the order of elements, but only keep elements that are multiples of 8 or 2.': [1, 0.375]
'[c165] select all the even digits and maintain the order of appearance in reverse.': [1, 1.0]
'[c165] select alternating elements starting from the end to the second element from the beginning.': [1, 0.0]
'[c165] select every third element from the end until the list runs out.': [1, 0.0]
? '[c166] arrange the list in ascending order and then shift each element two places to the left and loop around to the beginning after the last element.'
: [1, 0.0]
? '[c166] rearrange the elements into ascending order based on least significant digit first then increase overall significant.'
: [1, 0.0]
? '[c166] rearrange the elements such that all elements less than 10 are in ascending order, followed by the rest of the elements in descending order.'
: [1, 0.0]
? '[c166] rearrange the elements such that first three smallest numbers appear first and rest of the elements are in descending order.'
: [1, 0.0]
'[c166] sort all numbers up to first 10 and then first and last elements should be swapped.': [1, 0.0]
'[c166] sort only the first four smallest numbers in a list and leave the rest in the same order they appeared.': [1, 0.0]
? '[c166] sort the elements in a specific pattern: first two smallest elements, then one largest, then one second largest, then one third smallest and so on.'
: [1, 0.0]
'[c166] sort the elements in ascending order but ignores the order of the numbers greater than 10.': [1, 0.0]
? '[c166] sort the elements in increasing order, but where numbers less than 10 are put first, numbers ending in zero come next, and others are placed last.'
: [1, 0.0]
'[c166] sort the elements maintaining only the smallest 3 in natural order and the other elements in reverse order.': [1, 0.0]
? '[c166] sort the elements separately in an increasing order first from 0 to 9 (if they exist) and then the rest of the numbers from small to large (if they exist).'
: [1, 0.125]
? '[c166] sort the elements up to the first appearance of 9 or the number 9 itself in ascending order, the rest remain in the initial order.'
: [1, 0.0]
? '[c166] sort the elements with several rules: lowest to highest for the first 3 numbers, highest to lowest for the next 3, and then sort the remainder normally from lowest to highest.'
: [1, 0.0]
'[c166] sort the first 4 elements in ascending order and the last 4 in descending order.': [1, 0.0]
'[c166] sort the list in ascending order of their units digit.': [1, 0.0]
'[c166] sort the list partially: min three value goes first, max three value goes last.': [1, 0.0]
'[c166] sort the list, but keep the position of the number ''3''.': [1, 0.0]
'[c166] sort the numbers less than ten and leave the other numbers as they are.': [1, 0.0]
'[c166] sort the original numbers in a special order.': [1, 0.0]
'[c167] filter out numbers less than 10 or greater than 50.': [1, 0.0]
'[c167] generate a list of numbers if it is both odd and a multiple of 3 in the original list.': [1, 0.0]
'[c167] keep elements divisible by 3.': [1, 1.0]
'[c167] keep elements no smaller than the first element.': [1, 0.0]
'[c167] keep elements that are a multiple of 3 or the number 0.': [1, 1.0]
'[c167] keep every second element from the list.': [1, 0.0]
'[c167] keep only the elements at even indices.': [1, 0.0]
'[c167] keep only the elements in the array that are multiples of 3 or end in a 5, 6 or 0.': [1, 0.25]
'[c167] keep only the elements which are divisible by 3.': [1, 0.875]
'[c167] keep only the numbers that end with a digit less than or equal to 3.': [1, 0.0]
'[c167] keep only the odd-indexed numbers in the list.': [1, 0.0]
'[c167] keep the elements from the first number that is evenly divisible by 3 onwards.': [1, 0.0]
'[c167] keep the numbers that are divisible by 3.': [1, 1.0]
'[c167] remove any element in the list that is greater than 64.': [1, 0.0]
'[c167] remove elements from the beginning of the list until you get to an element which is divisible by 3.': [1, 0.0]
'[c167] remove elements which are multiples of 4 except 4 itself.': [1, 0.0]
'[c167] remove the elements that are not multiples of 3.': [1, 0.75]
'[c167] retain only the elements that are placed at odd positions.': [1, 0.0]
'[c167] return a new list containing every number of the original list which has a units digit lower than 5.': [1, 0.0]
'[c167] return elements that are not divisible by 7 and not greater than 80.': [1, 0.0]
'[c168] form a list of all the numbers from 1 to 10 excluding the even numbers seen in the input list.': [1, 0.0]
'[c168] generate a list from 1 to 10, excluding any single-digit number that was present in the input.': [1, 0.0]
'[c168] generate a list of 1 to 10, excluding the single-digit numbers already present in the initial list.': [1, 0.0]
'[c168] generate a list of integers from 1 to 10 (both inclusive) excluding the first digit in the numbers of the input.': [1, 0.0]
'[c168] generate a list of integers from 1 to 10 excluding the ones present in the input list.': [1, 0.0]
? '[c168] generate a list of integers from 1 to 10, excluding the last digit of any number in the input list that is in the range of 1 to 10.'
: [1, 0.0]
? '[c168] generate a list of numbers 1 to 10 omitting the last digit of any number in the given list if it lies between 1 to 10.'
: [1, 0.0]
? '[c168] generate a list of numbers from 1 to 10, excluding the number that corresponds to the modulus of the first element by 10.'
: [1, 0.0]
'[c168] generate a list that includes numbers from 1 to 10 except the number that appears in the original list.': [1, 0.0]
'[c168] generate a sequence from 1 to 10, excluding the first digit of each element in the input list.': [1, 0.0]
'[c168] generate all numbers from 1 to 10 without the last digit of each input number.': [1, 0.0]
'[c168] generate the sequence from 1 to 10, excluding any digit present in the input list.': [1, 0.0]
? '[c168] replace each item with the numbers from 1 to 10, excluding the number that is equivalent to the remainder of the last digit of the original number when divided by 10.'
: [1, 0.0]
? '[c168] replace elements with a sequence from 1 to 10 excluding the number equal to the count of elements in the input list.'
: [1, 0.75]
'[c168] replace the elements with numbers from 1 to 10 with removed each repeated number.': [1, 0.0]
? '[c168] replace the entire array with the first 10 counting numbers, excluding numbers already in the array (up to the number 10).'
: [1, 0.0]
'[c168] replace the existing numbers with numbers 1 through 10, excluding those already present in the input list.': [1, 0.0]
'[c168] replace the list with the numbers from 1 to 10, missing one number which is in the input list.': [1, 0.0]
'[c168] return a list of 1-10 but excluding numbers that occur in the original list.': [1, 0.0]
'[c168] return a list of numbers from 1 to 10, excluding the first number that is less than 10 in the input list.': [1, 0.0]
'[c169] choose the largest odd number.': [1, 0.25]
'[c169] extract the last element that is a multiple of 3.': [1, 0.25]
'[c169] find the highest even number.': [1, 0.125]
'[c169] get the third element from last.': [1, 0.125]
'[c169] keep the first element divisible by 8.': [1, 0.25]
'[c169] pick out the first element which is greater than all the previous ones.': [1, 0.5]
'[c169] return the biggest number that''s not bigger than 99.': [1, 0.0]
'[c169] return the highest even number.': [1, 0.125]
'[c169] return the highest number less than or equal to 50.': [1, 0.25]
'[c169] return the highest number that is less than 85.': [1, 0.25]
'[c169] return the largest number that is not the last number in the list.': [1, 0.125]
'[c169] return the last even number in the list.': [1, 0.0]
'[c169] return the maximum element that is divisible by 3 in the list.': [1, 0.5]
'[c169] return the number that is the second number in the list divided by 7, rounded down to the nearest whole number.': [1, 0.0]
'[c169] return the number where index equals its value.': [1, 0.0]
'[c169] select the element that is a multiple of six.': [1, 0.625]
'[c169] select the highest number that''s not the first number in the list.': [1, 0.125]
'[c169] select the largest number that is a multiple of 3.': [1, 0.375]
'[c169] select the largest number that is a multiple of 7.': [1, 0.125]
'[c169] select the third element from the end of the list.': [1, 0.0]
'[c170] create a new list containing only the first and the last elements of the original list.': [1, 1.0]
'[c170] create a new list containing the first and last elements of the original list.': [1, 1.0]
'[c170] create a new list with the first and last element of the original list.': [1, 1.0]
'[c170] determine a list out of the first and the last elements of the list.': [1, 1.0]
'[c170] generate a list with the first and last elements of the original list.': [1, 1.0]
'[c170] keep only the first and last elements.': [1, 1.0]
'[c170] keep only the first and the last elements.': [1, 1.0]
'[c170] keep the first and last elements and discard the rest.': [1, 1.0]
'[c170] keep the first and last elements of the list, removing all the elements in between.': [1, 1.0]
'[c170] keep the first and last elements.': [1, 1.0]
'[c170] keep the first and the last elements in the list and remove the others.': [1, 1.0]
'[c170] keep the first and the last elements of the list only.': [1, 1.0]
'[c170] keep the first and the last elements of the list.': [1, 1.0]
'[c170] keep the first and the last elements only.': [1, 1.0]
'[c170] present the first and last elements only.': [1, 1.0]
'[c170] produce a list with the first and last element.': [1, 1.0]
'[c170] retain only the first and last elements of the list.': [1, 1.0]
'[c170] retain the first and last elements of the list.': [1, 1.0]
'[c170] retain the first and the last elements.': [1, 1.0]
'[c170] take the first and the last element from the list.': [1, 1.0]
'[c171] accumulate the sum of the numbers.': [1, 1.0]
'[c171] accumulate the sums of all previous numbers.': [1, 1.0]
'[c171] accumulate the values in the sequence.': [1, 1.0]
'[c171] add each element to the total of previous elements.': [1, 1.0]
'[c171] calculate a running sum of the elements.': [1, 1.0]
'[c171] calculate the cumulative sum of each element in the array.': [1, 1.0]
'[c171] construct a new array where each element is the sum of itself and all numbers in the array before.': [1, 1.0]
'[c171] create a cumulative sum from left to right.': [1, 1.0]
'[c171] create a cumulative sum of the numbers.': [1, 1.0]
'[c171] create a running total of the numbers in the list.': [1, 1.0]
'[c171] do a running sum.': [1, 1.0]
'[c171] generate a list by cumulatively adding the elements of the given list.': [1, 1.0]
'[c171] generate a list that is the running total of the numbers in the list.': [1, 1.0]
'[c171] generate a list where each element equals the sum of all previous elements and itself.': [1, 1.0]
'[c171] generate a running sum of numbers in the array.': [1, 1.0]
'[c171] generate a running total of the list.': [1, 1.0]
'[c171] keep a running total of the list.': [1, 1.0]
'[c171] produce a cumulative sum of the list values.': [1, 1.0]
'[c171] replace each element with the cumulative sum of all elements until that point.': [1, 1.0]
'[c171] show a running total of all elements so far in the list.': [1, 1.0]
'[c172] calculate the product of each number and the one before it in the list.': [1, 0.875]
? '[c172] keep the first element same and replace rest of the elements with the multiplication of the entire previous elements.'
: [1, 1.0]
'[c172] keep the first two numbers the same, then each subsequent number is multiplied by the one before.': [1, 0.25]
'[c172] multiply all consecutive numbers until hitting a number that is not in the interval from 1 to 9 (inclusive).': [1, 0.875]
'[c172] multiply each current state by the next state.': [1, 0.375]
'[c172] multiply each element by its previous element.': [1, 1.0]
'[c172] multiply each element by its previous.': [1, 1.0]
'[c172] multiply each element by the previous one.': [1, 1.0]
'[c172] multiply each element in the list by the preceding one, then replace all numbers after 0 by 0.': [1, 1.0]
'[c172] multiply each number by the number that comes before it in the list.': [1, 1.0]
? '[c172] multiply every previous element by the current one, starting with the first number, if the first number is not zero.'
: [1, 1.0]
'[c172] multiply the current and next element.': [1, 0.375]
'[c172] multiply the current element with the previous element, with the first element left as is.': [1, 1.0]
? '[c172] replace an element with the product of itself and the next element, until an element is 0 or the last element in the list.'
: [1, 0.5]
'[c172] replace each element with the product of that element and the previous element.': [1, 1.0]
'[c172] replace each number with its power of the index in the list.': [1, 0.125]
'[c172] replace each number with the product of itself and the previous number, except the first number.': [1, 0.875]
'[c172] replace each number with the product of the number and the one before it.': [1, 1.0]
? '[c172] replace every number after the first with the product of itself and the previous number unless the previous number is 0, in which case replace it with 0.'
: [1, 1.0]
'[c172] retain the original number.': [1, 1.0]
'[c173] repeat the highest number encountered so far.': [1, 1.0]
'[c173] replace all elements from the third element onward with the largest number among the first three elements.': [1, 0.0]
'[c173] replace all subsequent elements with the largest element so far.': [1, 1.0]
'[c173] replace any element smaller than the previous one with the value of the previous one.': [1, 1.0]
'[c173] replace each element from the 2nd one onwards with the maximum between itself and the previous element.': [1, 1.0]
'[c173] replace each element where the previous element was larger with the larger number.': [1, 0.5]
'[c173] replace each element with the highest number seen so far in the list.': [1, 1.0]
'[c173] replace each element with the larger of the two adjacent elements.': [1, 0.0]
'[c173] replace each element with the largest element that has appeared before it.': [1, 1.0]
'[c173] replace each element with the largest yet in descending order.': [1, 1.0]
? '[c173] replace each number after the first occurrence of a number that is greater than or equal to 50 with that number until a larger number is encountered.'
: [1, 0.375]
'[c173] replace each number with the highest number seen so far in the list.': [1, 1.0]
'[c173] replace each number with the last biggest number seen so far.': [1, 1.0]
'[c173] replace every nth number in the list with the nth largest number in the list.': [1, 0.375]
'[c173] replace every number in the list that is less than the biggest number so far with the biggest number so far.': [1, 1.0]
'[c173] replace the current element with the highest preceding element, until the list is finished.': [1, 1.0]
? '[c173] replace the current number with the last number if the next number is smaller, else replace the current number with the next number.'
: [1, 0.375]
? '[c173] replace the elements with the highest value from the preceding elements or keep its value if no preceding elements are higher.'
: [1, 1.0]
'[c173] replace the elements with the maximum of the elements up to that position.': [1, 1.0]
'[c174] eliminate all but the first appearance of any repeating series of numbers.': [1, 0.0]
'[c174] eliminate the last element from the list.': [1, 0.125]
'[c174] keep all elements upto the last one which repeats immediately after.': [1, 0.125]
'[c174] keep the numbers until the first repetition.': [1, 0.25]
'[c174] keep the sequence until the first element is repeated the third time.': [1, 0.25]
? '[c174] leave the repeating elements from the beginning of the list till their first instance of interruption or the end of the list'
: [1, 0.0]
'[c174] loop through the list until the first repeat value is encountered and exclude all values following it.': [1, 0.25]
'[c174] remove any number that has already appeared twice in the list from its third appearance onward.': [1, 0.125]
'[c174] remove duplicate elements from the end.': [1, 0.25]
'[c174] remove the elements after the last unique number.': [1, 0.375]
'[c174] remove the elements of the list after the second repeated numbers.': [1, 0.0]
'[c174] remove the last duplicate items in the list.': [1, 0.125]
'[c174] remove the last element from the list.': [1, 0.25]
'[c174] remove the last element if it exists elsewhere in the list.': [1, 0.25]
'[c174] remove the last element if it is repeated directly before it.': [1, 0.125]
'[c174] remove the last occurrence of a repeating number.': [1, 0.125]
'[c174] remove the last occurrence of each number in the list.': [1, 0.375]
'[c174] remove the last occurrence of the first value in the list.': [1, 0.0]
'[c174] remove the last repeating numbers.': [1, 0.25]
'[c174] stop adding elements to the list after encountering an element that is already in the new list.': [1, 0.25]
'[c175] create a new list with elements that followed the number before.': [1, 0.0]
'[c175] discard any element that is a single digit number excluding the first, second and third elements of the list.': [1, 0.125]
'[c175] filter out and keep the numbers which are in the 10-base digits (i.': [1, 0.25]
'[c175] generate a list consisting of the positive numbers that are more than 10, or less than 5.': [1, 0.0]
'[c175] generate a list of elements that are at index divisible by 3 or their value is above 50.': [1, 0.125]
? '[c175] keep elements which are part of a sequence that starts from a single digit and increases by a single digit each time until it reaches a number that contains a 9.'
: [1, 0.125]
'[c175] keep numbers which are unequal to 0, 1, 2, 3, 4, 5.': [1, 0.125]
'[c175] keep only the elements greater than the previous one.': [1, 1.0]
'[c175] keep only the elements that are greater or equal to the next element on the right.': [1, 0.0]
'[c175] keep only the elements that are in odd positions and are also odd or multiples of 7.': [1, 0.0]
? '[c175] keep only the elements that are larger than the smallest number (first number of original sequence) but smaller than the largest number (last number of original sequence), inclusive.'
: [1, 0.0]
'[c175] keep only the numbers that are either single digits or divisible by 7.': [1, 0.0]
'[c175] keep only those elements that compose a number followed by an other number smaller.': [1, 0.0]
? '[c175] keep the elements until a number divisible by 10 appears, or until a number divisible by 5 but not by 10 appears following which you keep elements divisible by 5.'
: [1, 0.0]
'[c175] keep the elements until it encounters a number less than its predecessor.': [1, 0.25]
'[c175] keep the odd-indexed elements and the elements that are greater or equal to 50.': [1, 0.25]
'[c175] keep the values that are less than 10 and greater than 50, and remove the rest.': [1, 0.0]
'[c175] maintain only the numbers which are multiples of 2, 7, or are greater than or equal 50.': [1, 0.0]
'[c175] remove any number from the list that falls between 10 and 49.': [1, 0.0]
'[c175] remove numbers that are less than 10 and are right after a number less than 10.': [1, 0.125]
'[c176] add 3 to each element and exclude the last element.': [1, 0.0]
'[c176] add 3 to the current element and add 4 to the next element, and alternate this pattern.': [1, 0.0]
'[c176] add 4 to each element and multiply it by 2.': [1, 0.0]
'[c176] add 4 to each element and start the series from the second element.': [1, 0.0]
'[c176] add 4 to the first element, and for the rest elements, you add the previous number.': [1, 0.0]
'[c176] add 4 to the first number, discard the second number, then add 2 to every number afterwards.': [1, 0.0]
'[c176] add 5 to each element and keep it, and then subtract 1 from each next number.': [1, 0.0]
'[c176] add 7 to each of the elements.': [1, 0.0]
'[c176] add each element to its following index number.': [1, 0.0]
'[c176] add each number with the next one in the list.': [1, 1.0]
'[c176] add next element to the current number and make a new list with these new values.': [1, 1.0]
'[c176] add the first element and the next element.': [1, 1.0]
'[c176] add the first element to each subsequent element in the list and generate a new list from the results.': [1, 0.0]
'[c176] add the first element to the subsequent elements and ignore the last element.': [1, 0.0]
'[c176] add the first number and the next number, and output the result.': [1, 1.0]
? '[c176] add the first two elements together, then remove the first element, and repeat this until the last element is reached.'
: [1, 0.875]
? '[c176] add the following numbers: 7 (to the first number), 80 (to the second number), 8 (to the third number), 0 (to the 4th number), 83 (to the fifth number), 1 (to the sixth number), and 44 (to the seventh number).'
: [1, 0.0]
'[c176] calculate the sum between every two consecutive elements.': [1, 1.0]
? '[c176] make a new list such that each element at index i is the sum of the element at index i and the next one in the original list.'
: [1, 1.0]
? '[c176] step through the list from left to right and sum each pair of adjacent numbers, then construct a new list from the results.'
: [1, 1.0]
'[c177] add the last half of the list in reverse order to the end of the original list.': [1, 1.0]
'[c177] add the last three elements at the front and back.': [1, 0.25]
'[c177] append the mirror image of the list to the original list.': [1, 0.25]
'[c177] append the reversed list to the original list after swapping the first and last elements.': [1, 0.75]
? '[c177] arrange the numbers so that the first is first, the last is second, the second is third, the third is forth and then repeat in reverse.'
: [1, 0.25]
'[c177] create a new list by repeating the original list in reverse order two times.': [1, 0.625]
'[c177] double the list while reversing the order of the elements in the mirrored half.': [1, 0.875]
'[c177] duplicate the list but the second one is in reverse order.': [1, 1.0]
'[c177] duplicate the list but with the first and last elements swapped, and attached with the original list itself.': [1, 0.75]
'[c177] duplicate the original list but in reverse order and append it to the end of the original list.': [1, 0.625]
'[c177] form a larger list by combining elements of original list from start to end and then reversed from end to start.': [1, 0.875]
? '[c177] generate a list by appending the last element after the first one, second before the last after second, and so on, until all elements have been added twice in reverse order.'
: [1, 1.0]
'[c177] generate a list which is the original list and its reversed version appended together.': [1, 1.0]
'[c177] mirror the elements from both ends towards the middle.': [1, 1.0]
'[c177] mirror the list starting from the last element to the first.': [1, 1.0]
'[c177] reflect the sequence.': [1, 0.875]
'[c177] reverse and then repeat the list.': [1, 0.375]
'[c177] reverse the elements and then append the reversed list to the original one.': [1, 1.0]
'[c177] reverse the list twice with different steps.': [1, 0.625]
'[c177] reverse the list, then append the elements of the resulting list to those of the original list.': [1, 0.375]
'[c178] keep elements less or equal than the number 93 but more than 1.': [1, 0.0]
'[c178] keep elements until encountering an element that is below 10.': [1, 0.0]
'[c178] keep elements which are at odd indices in the list.': [1, 0.0]
'[c178] keep numbers that are followed or preceded by numbers that are multiples of 3.': [1, 0.125]
'[c178] keep only numbers in the list that are divisible by 0, 1, 2, 3, 4 or 5.': [1, 0.0]
'[c178] keep only the elements that are divisible by 3 or 5.': [1, 0.0]
'[c178] keep only the elements that are divisible by 3 or end with the digit ''5'' or ''0''.': [1, 0.0]
'[c178] keep only the elements that are in an odd position in the array.': [1, 0.0]
'[c178] keep only the numbers which include a digit 0 or digit 1 or digit 2 or digit 3 or digit 4.': [1, 0.0]
'[c178] keep only the odd-numbered elements.': [1, 0.0]
'[c178] keep the elements that are followed by a number divisible by 4.': [1, 0.25]
'[c178] keep the numbers in the original order that are followed by a number less than 10.': [1, 0.0]
'[c178] keep the numbers which are not perfect squares.': [1, 0.0]
'[c178] remove all elements after and including the last number that is less than 10.': [1, 0.0]
'[c178] remove all elements from the list that are prime numbers.': [1, 0.0]
'[c178] remove digits from the right of the number till a non-zero digit is encountered.': [1, 0.0]
'[c178] remove elements from the list whose value when divided by 3 leaves a remainder 1.': [1, 0.0]
'[c178] retain the elements in odd positions.': [1, 0.0]
'[c178] return list of numbers that are greater than the previous number.': [1, 0.0]
'[c178] select any numbers from the list that are not prime and greater than 1.': [1, 0.125]
'[c179] interchange the last three and first three elements.': [1, 0.0]
'[c179] order elements from smallest to largest but every other item starting with the first item is reversed.': [1, 0.125]
? '[c179] place the smallest even number first, largest odd number in the middle, and the smallest odd number at the end of the list.'
: [1, 0.0]
'[c179] rearrange the elements based on their divisibility by 2 and 3.': [1, 0.0]
? '[c179] rearrange the elements in ascending order and then invert the positions of the first and second, third and fourth numbers, and so on.'
: [1, 0.0]
? '[c179] rearrange the elements such that every other element starting from the first is in ascending order while the rest remains the same.'
: [1, 0.0]
? '[c179] rearrange the numbers in a specific order which is: elements finding closest number to 5, 7, 35, 55, 77, remainder in descending order then number 2 and 1 at the end.'
: [1, 0.0]
? '[c179] rearrange the numbers in groups of three, with the smallest one first, the largest one in the middle, and the second one last.'
: [1, 0.0]
'[c179] rearrange the numbers where the peaks indicate numbers that are a multiple of 4.': [1, 0.0]
'[c179] reorder the list such that the smallest and largest numbers are moved towards the middle.': [1, 0.0]
'[c179] replace third, fourth and last positions of the list with [7, last element, 0]': [1, 0.0]
'[c179] sort every two consecutive numbers in ascending order and the rest in descending order.': [1, 0.0]
'[c179] sort odd-indexed numbers in ascending order and even-indexed numbers in descending order.': [1, 0.0]
'[c179] sort the first half of the elements in ascending order and the second half in descending order.': [1, 0.0]
'[c179] sort the list in such a way that numbers in same parity are together with odd numbers coming first.': [1, 0.0]
? '[c179] sort the list in this way: place all even indexes elements from smallest to largest, append all odd indexes elements from largest to smallest.'
: [1, 0.0]
'[c179] swap adjacent numbers in groups of 3 until the end of the list or if only 2 numbers are left, swap them.': [1, 0.0]
? '[c179] swap the first and third elements, then swap the fourth and fifth elements and finally swap the second and last elements.'
: [1, 0.0]
'[c179] swap the first three and last three elements.': [1, 0.0]
? '[c179] switch the order of the first three and last three elements of the list, while keeping the order within the subsets.'
: [1, 0.0]
'[c180] alternate elements starting from the fourth in opposite directions.': [1, 0.0]
? '[c180] arrange the elements such that every alternate element starting from the first position is in ascending order and the rest are in descending order.'
: [1, 0.0]
? '[c180] arrange the first three numbers in ascending order, keep the middle two numbers as it is and arrange the last three numbers in descending order.'
: [1, 0.0]
'[c180] interchange first half of the list with the latter half when both halves have equal amounts of elements.': [1, 0.0]
? '[c180] move the last element to the third position from the start and second last element to the third position from the end.'
: [1, 0.0]
? '[c180] move the maximum and minimum to the end of the list, shift each element to the left, and place an element repeated two times in the middle.'
: [1, 0.0]
? '[c180] move the third, seventh and eighth elements to the first, second and fourth positions respectively, and the first, second and fourth elements to the fifth, seventh and eighth positions respectively.'
: [1, 0.0]
'[c180] order the elements so that they increase from the middle to the outer parts of the list.': [1, 0.0]
? '[c180] perform a complex rearrangement where the largest number goes first, second largest goes last, second smallest goes second, smallest goes second last, and repeat this pattern with the remaining numbers.'
: [1, 0.0]
? '[c180] position the highest three numbers first (in descending order), then the smallest three numbers (in ascending order), and finally the intermediate numbers (in ascending order).'
: [1, 0.0]
'[c180] sort first five numbers in ascending order and the last five numbers in descending order.': [1, 0.0]
'[c180] sort the elements in ascending order alternately starting from the rightmost digit then the leftmost digit.': [1, 0.0]
? '[c180] sort the even-indexed numbers and odd-indexed numbers separately, keeping the first half unchanged and reversing the second half.'
: [1, 0.0]
? '[c180] sort the list in a particular pattern: First an even index number in descending order, then an odd index number in ascending order.'
: [1, 0.25]
? '[c180] sort the list in a particular way: highest number that is not the maximum on the left side, lowest number that is not the minimal after it, the minimal number in the middle and then similar pattern on the right side with maximum number at the end.'
: [1, 0.0]
'[c180] sort the list in a specific way.': [1, 0.0]
'[c180] swap pairs at positions [1, 3], [4, 6], [0, 5], [2, 7] and then sort in ascending order.': [1, 0.0]
'[c180] swap places of the pairs of elements starting from the first and the last elements towards the middle.': [1, 0.0]
'[c180] swap the first two and last two elements in the list.': [1, 0.0]
'[c181] move the last two elements to the second and fourth places.': [1, 0.0]
'[c181] replace the second and last numbers, and the fourth and second to last numbers.': [1, 0.125]
'[c181] replace the second and the last elements in the given list.': [1, 0.125]
? '[c181] replace the second element with the last element, fourth element with second to last one and so on, leaving the first element and the rest unchanged.'
: [1, 0.25]
'[c181] swap the last and second element.': [1, 0.25]
'[c181] swap the last two elements.': [1, 0.0]
'[c181] swap the second and last element of the list.': [1, 0.5]
'[c181] swap the second and last elements in the list.': [1, 0.375]
'[c181] swap the second and last elements, and the fourth and third from the end elements.': [1, 0.75]
'[c181] swap the second and last elements.': [1, 0.5]
'[c181] swap the second and the last element in the list.': [1, 0.25]
'[c181] swap the second and the last element.': [1, 0.25]
'[c181] swap the second and the last elements of the list.': [1, 0.125]
'[c181] swap the second and the last elements.': [5, 2.125]
'[c181] swap the second element with the last one.': [1, 0.375]
'[c181] switch the second element with the last element.': [1, 0.5]
'[c182] extract the 3rd, 6th, and 9th elements from the list.': [1, 1.0]
'[c182] generate a list by taking the third, seventh and ninth element.': [1, 0.0]
'[c182] get every third element from the list starting from the second index.': [1, 0.875]
'[c182] include the third, seventh and ninth elements from the original list.': [1, 0.125]
'[c182] keep every third element starting from the first.': [1, 0.0]
'[c182] keep every third element starting from the second one.': [1, 0.125]
'[c182] keep only every third element starting from the first.': [1, 0.0]
'[c182] keep only the third, seventh and ninth elements.': [1, 0.5]
'[c182] keep the 3rd, 6th and 9th elements of the list.': [1, 1.0]
'[c182] pick the numbers from the third, seventh and the ninth position.': [1, 0.125]
'[c182] pick the third, seventh and ninth elements.': [1, 0.25]
'[c182] return the 3rd, 6th and 9th elements of the list.': [1, 1.0]
'[c182] select every third element from the list.': [1, 0.875]
'[c182] select every third element from the original list.': [1, 0.75]
'[c182] select every third element starting from the third position.': [1, 0.875]
'[c182] select the 3rd, 6th and 9th elements from the list.': [1, 1.0]
'[c182] select the 3rd, 6th, and 9th elements of the input array.': [1, 1.0]
'[c182] select the third, sixth and ninth elements from the list.': [1, 1.0]
'[c182] take every third element starting from the second position.': [1, 0.0]
'[c182] take the third, sixth and ninth element of the list.': [1, 1.0]
'[c183] count and list the number of each unique element in the list from smallest to biggest, excluding any count of 1.': [1, 0.0]
? '[c183] count the amount of distinct numbers and to create a sequence starting from 1 up to the amount of distinct numbers plus 1.'
: [1, 0.0]
'[c183] count the duplicates and assign a number from 1 to the number of unique elements.': [1, 0.0]
'[c183] count the number of consecutive identical numbers and add 2.': [1, 0.0]
'[c183] count the number of different elements and generate a list of natural numbers up to that count.': [1, 0.0]
'[c183] count the number of times each unique element appears, then sort the numbers and increment each one.': [1, 0.25]
'[c183] count the number of times the first element appears in the list, and generate a list from 1 to that count.': [1, 0.0]
'[c183] count the number of unique elements and return the count followed by the sequence of numbers.': [1, 0.125]
? '[c183] count the number of unique pairs of the same number appearing consecutively, and append the count of 1 up to the number of pairs found.'
: [1, 0.5]
'[c183] count the occurrences of each unique number in the input list and assign a sequence starting from 1 to the counts.': [1, 0.125]
'[c183] count the occurrences of unique elements, and present the counts in increasing order.': [1, 0.0]
'[c183] count the unique elements in the list and then create a new list starting from 1 to the count of unique elements.': [1, 0.0]
'[c183] count the unique elements.': [1, 0.0]
'[c183] create a list counting from 1 up to the number of unique elements in the list.': [1, 0.0]
'[c183] generate a list of integers, starting from 1.': [1, 0.0]
'[c183] generate a list of numbers, from 1 to N-1, where N is the number of distinct numbers in the input list.': [1, 0.0]
? '[c183] generate a sequence of numbers that starts at 1 and ends one less than the total count of the most frequently occurring element in the list.'
: [1, 0.375]
? '[c183] generate a sequence starting from 1 and ending with m, where m is one less than the number of unique elements in the initial list.'
: [1, 0.0]
'[c183] output a sequence containing 1 less than the count of unique elements in the list.': [1, 0.0]
? '[c183] return a list of consecutive numbers starting from 1 to n, where n is the number of unique elements other than the first element in the list.'
: [1, 0.0]
'[c184] create a new list by selecting every third digit starting from the second element in the original list.': [1, 0.0]
'[c184] filter out elements that are divisible by 4 and have the digit 1 in them.': [1, 0.125]
'[c184] filter out elements which are 1 and 2 or multiples of 7.': [1, 0.0]
'[c184] generate a list of elements where the element following it is an odd number.': [1, 0.0]
'[c184] generate a list of odd numbers.': [1, 0.0]
'[c184] include those numbers which have their immediate following number greater than them.': [1, 0.0]
'[c184] keep numbers that are less than 10 and are odd.': [1, 0.0]
'[c184] keep only numbers from 1-9 and eliminate all other numbers.': [1, 0.0]
'[c184] keep only odd numbers that are form a 3n+2 sequence (where n is a non-negative integer).': [1, 0.125]
'[c184] keep only the elements at position where the number is odd in original list.': [1, 0.125]
? '[c184] keep only the elements that are single digit or palindromes (values which remain the same when their digits are reversed) in their existing order.'
: [1, 0.0]
'[c184] keep only the odd numbers that are less than 100 and do not have the digit 3.': [1, 0.0]
'[c184] keep the elements at odd indices.': [1, 0.0]
'[c184] keep the odd integers, which are not 1, 3, 5, 7, 9.': [1, 0.0]
'[c184] retain elements that are divisible by 3 and delete the rest.': [1, 0.0]
'[c184] return elements where the tens digit is greater than the units digit.': [1, 0.0]
'[c184] return numbers in the list that ends with ''1'', ''7'' or ''3''.': [1, 0.0]
'[c184] select every other number, starting with the second one, if the number is less than 50.': [1, 0.25]
'[c184] select the odd-numbered elements which are also prime numbers.': [1, 0.0]
'[c184] select those elements that are between 1 and 9 inclusive.': [1, 0.0]
? '[c185] generate a list consisting of the first element, the sum of all elements except the first and last, and the last element.'
: [1, 0.625]
'[c185] generate a list consisting of the first, the sum of the middle elements and the last element.': [1, 0.875]
'[c185] generate a list containing the first number, then the sum of all the numbers and finally the last number.': [1, 0.0]
'[c185] generate a list with the first and last elements intact, and the sum of all the middle elements in between.': [1, 0.75]
? '[c185] keep the first and last element of the list and replace the rest of the elements with the total sum of numbers in the middle (excluding the first and last).'
: [1, 0.75]
'[c185] keep the first and last element, and replace the middle elements with their total sum.': [1, 1.0]
'[c185] keep the first and last elements and replace all the elements in between with their sum.': [1, 0.5]
'[c185] keep the first and last elements and replace the middle elements with their sum.': [1, 0.25]
'[c185] keep the first and last elements as is and replace all the elements in between with their sum.': [1, 1.0]
'[c185] keep the first and last elements the same, and replace the middle elements with the sum of all original elements.': [1, 0.0]
'[c185] keep the first and last elements, and replace the middle ones with their sum.': [1, 0.25]
'[c185] keep the first and last elements, and replace the middle with the sum of all elements.': [1, 0.0]
? '[c185] keep the first and last numbers and replace the middle section with the sum of the numbers that originally occupied the second and third-to-last positions.'
: [1, 0.0]
'[c185] keep the first and last numbers, and sum the others.': [1, 0.75]
'[c185] keep the first and the last element, and to add all the inner elements squared.': [1, 0.0]
'[c185] keep the first and the last elements, and sum all the others.': [1, 0.75]
? '[c185] keep the first element as it is, add up all the numbers between the first and last element, and keep the last element as it is.'
: [1, 0.75]
'[c185] retain the first and last elements and replace the middle elements with their sum.': [1, 1.0]
'[c185] retain the first and last elements of the list, and replace all the middle elements with their sum.': [1, 0.5]
'[c185] take the first number, then the sum of the middle numbers, then the last number in the list.': [1, 1.0]
'[c186] extract all elements greater than or equal to 16.': [1, 0.5]
'[c186] filter out elements larger than 9.': [1, 0.5]
'[c186] filter out elements less than 10.': [1, 0.25]
'[c186] generate a list of numbers that are equal or greater than 5.': [1, 0.0]
'[c186] generate a list of numbers that are more than 20.': [1, 0.375]
'[c186] include only the numbers above 10 in the output.': [1, 0.5]
'[c186] keep elements greater than or equal to 10.': [1, 0.5]
'[c186] keep elements that are bigger than 5.': [1, 0.0]
'[c186] keep only elements that are greater than 20.': [1, 0.5]
'[c186] keep only the elements that are greater than or equal to 10.': [1, 0.375]
'[c186] keep only the elements that are more than 9.': [1, 0.375]
'[c186] keep only those elements that are greater than 10.': [1, 0.375]
'[c186] keep the elements that are greater than or equal to 10.': [1, 0.5]
'[c186] keep the elements that are greater than or equal to 20.': [1, 0.5]
'[c186] remove all elements that are less than 10 and keep the rest.': [1, 0.25]
'[c186] retain numbers from the list that are greater than or equal to 20.': [1, 0.5]
'[c186] retain the numbers from the input that are greater than 30.': [1, 0.25]
'[c186] retain the numbers that are multiples of 3, dividing these numbers by 3 and if the quotient is least 10.': [1, 0.125]
'[c186] retain those elements, in their original order, that are more than or equal to the first number.': [1, 0.125]
'[c186] select elements greater than 30.': [1, 0.5]
'[c187] add 0 and the repeat the list once again.': [1, 1.0]
'[c187] add 0 to the end of the list, then repeat the contents of the original list.': [1, 1.0]
'[c187] add 0 to the middle of the list and repeat the original list after 0.': [1, 1.0]
'[c187] append 0 and a repeat of all the original elements after the original list.': [1, 1.0]
'[c187] append 0 and copy the entire list again.': [1, 1.0]
'[c187] append 0 and repeat the same list again.': [1, 1.0]
'[c187] append 0 and the original list to the end of the list.': [1, 1.0]
'[c187] append 0 and the original list to the list.': [1, 1.0]
'[c187] append 0 and then repeat the input list.': [1, 0.875]
'[c187] append 0 and then repeat the original list.': [1, 1.0]
'[c187] append 0 and then repeat the same list to the end of itself.': [1, 1.0]
'[c187] append 0 and then replicate the given list.': [1, 1.0]
'[c187] append 0 and then the whole list again to the original list.': [1, 1.0]
'[c187] append 0 then replicate the original list.': [1, 0.875]
'[c187] append 0 to the list and then duplicate the list.': [1, 1.0]
'[c187] append 0 to the list and then the list itself again.': [1, 1.0]
'[c187] append 0 to the list then append the original list to itself.': [1, 1.0]
'[c187] append 0 to the list, then append all the original elements again.': [1, 1.0]
'[c187] append the number 0 and then duplicate the original list.': [1, 0.875]
'[c187] double the entire list with an added 0 in the middle.': [1, 0.875]
'[c188] change each number into 1 if it is divisible by 3 and into 0 if it is not.': [1, 0.75]
'[c188] check if each number is divisible by 2, if it is, the number becomes 1 else it becomes 0.': [1, 0.0]
'[c188] convert each number into binary and take the least significant bit.': [1, 0.0]
'[c188] output 1 when the number is divisible by 3, and 0 otherwise.': [1, 0.0]
'[c188] replace each digit with 1 if it is odd else replace with 0 if it is even.': [1, 0.125]
'[c188] replace each element by 1 if it''s prime or divisible by 3, else replace it by 0.': [1, 0.125]
'[c188] replace each element in the list with 1 if it is divisible by 3, and 0 if it is not divisible by 3.': [1, 0.375]
'[c188] replace each element in the list with a 1 if the element is even and a 0 if the element is odd.': [1, 0.0]
'[c188] replace each element with 0 if it is divisible by 4, 1 if it is not divisible by 4.': [1, 0.0]
'[c188] replace each element with 0 or 1 depending on whether it is an even or odd number, respectively.': [1, 0.0]
'[c188] replace each element with 1 if it is divisible by 3, else replace it with 0.': [1, 0.75]
'[c188] replace each element with 1 if it is divisible by 6, and with 0 otherwise.': [1, 0.0]
'[c188] replace each element with 1 if the element is greater than or equal to the next element and 0 otherwise.': [1, 0.0]
'[c188] replace each element with a 1 if it is odd, or a 0 if it is even.': [1, 0.0]
'[c188] replace each number with 1 if it is divisible by 3 and with 0 if it is not.': [1, 0.375]
'[c188] replace each number with 1 if it is less than 10, otherwise replace it with 0.': [1, 0.0]
'[c188] replace even numbers by 0 and odd numbers by 1.': [1, 0.0]
'[c188] replace even numbers with 0 and odd numbers with 1.': [1, 0.125]
'[c188] replace numbers less than 10 with 1 and numbers greater than or equal to 10 with 0.': [1, 0.0]
'[c188] replace odd numbers with 0 and even numbers with 1.': [1, 0.125]
'[c189] create a list of numbers from the smallest number to the biggest in the original list.': [1, 1.0]
'[c189] generate a list of consecutive integers from the smallest to the largest unique number from the original list.': [1, 1.0]
'[c189] generate a list of consecutive numbers from the smallest value to the largest value in the original list.': [1, 1.0]
'[c189] generate a list of consequent numbers from the smallest to the largest number in the original list.': [1, 1.0]
'[c189] generate a list of distinct numbers starting from the smallest to the biggest in the list.': [1, 1.0]
'[c189] generate a list of integers from the smallest number to the largest number in the original list.': [1, 1.0]
'[c189] generate a list of integers that range from the minimum to the maximum value in the list, inclusive.': [1, 1.0]
'[c189] generate a list of numbers between and including the minimum and maximum number in the list.': [1, 1.0]
'[c189] generate a list of numbers from the lowest to the highest number in the list.': [1, 1.0]
'[c189] generate a list of numbers from the smallest to the largest numbers in the given list.': [1, 1.0]
'[c189] generate a list of unique numbers between the smallest and the largest number in the list, inclusive.': [1, 1.0]
'[c189] generate a new list containing all numbers from the minimum to the maximum in the original list.': [1, 1.0]
'[c189] generate a range from the smallest to the largest unique number in the list.': [1, 1.0]
'[c189] generate a range of integers between the minimum and maximum values in the list inclusive.': [1, 1.0]
'[c189] generate a range of numbers between the minimum and maximum element in the list.': [1, 1.0]
'[c189] generate a sequence of numbers from the smallest to the largest number in the list.': [1, 1.0]
'[c189] list all integers from the smallest to the largest number in the list.': [1, 1.0]
'[c189] list all the numbers from the smallest to the largest element without repetition.': [1, 1.0]
? '[c189] output the numbers in ascending order starting from the lowest number in the list to the highest, without duplicates.'
: [1, 1.0]
'[c189] take the minimum and maximum numbers and generate a range between them.': [1, 1.0]
? '[c190] construct a list starting from the smallest odd number from the input and add two until you come up with an odd value that is in the input.'
: [1, 0.25]
? '[c190] create a list of all even numbers between the first and the last element of the list and ignore any other elements if they exist.'
: [1, 0.5]
? '[c190] create a list of all even numbers in ascending order, starting from the smallest number and ending at the largest number if the list contains at least 2 even numbers.'
: [1, 0.0]
'[c190] create a list of odd numbers between the first and last element of each input list.': [1, 0.5]
'[c190] generate a list containing all even numbers between the first and second number in the input (inclusive).': [1, 0.375]
'[c190] generate a list of all even numbers starting from the first and ending at the second value in ascending order.': [1, 0.125]
? '[c190] generate a list of all odd numbers starting from the first number to the second number if the first number is lesser; if not, then just the first and second number if they are odd.'
: [1, 0.0]
? '[c190] generate a list of all odd/even numbers between the minimum and maximum value of the list (inclusive), following the same parity as the minimum number.'
: [1, 0.25]
'[c190] generate a list of all possible even numbers starting from the first element up to the second element inclusive.': [1, 0.5]
'[c190] generate a list of elements that are divisible by 2 and are lesser or equal to 8.': [1, 0.0]
'[c190] generate a list of even numbers between the smallest and the highest number inclusive.': [1, 0.0]
'[c190] generate a list of numbers from the smallest to the largest value in the list, incrementing by 2.': [1, 0.5]
'[c190] generate a list of odd integers starting from the first element and ending at the last element.': [1, 0.625]
'[c190] generate a list of odd numbers between the smallest and largest element.': [1, 0.125]
'[c190] generate a list of odd numbers only in sequential order starting with the smallest odd number.': [1, 0.25]
"[c190] generate a sequence of odd numbers starting from the input list\u2019s first element and ending at the last element.": [1, 0.875]
? '[c190] generate all even numbers between the first and last elements (inclusive) if the first is even, or all odd numbers if the first is odd.'
: [1, 1.0]
? '[c190] list every odd number from the smallest to the largest found in the original list, with each number being followed by the next odd number.'
: [1, 0.375]
? '[c190] list off all even integers inclusive between the smallest and largest values in the input list, unless the smallest value is odd, in which case we list all odd integers between the smallest and largest values.'
: [1, 0.375]
'[c190] return an array with the odd numbers from first till last inclusive with a step of 2.': [1, 0.625]
'[c191] append, 8 times for the highest digit or 3 times for other digits if no highest digit.': [1, 0.0]
'[c191] insert as many times as its value every number which is multiple of 3 and greater than 5.': [1, 0.0]
'[c191] list each element as many times as its tens digit.': [1, 0.5]
'[c191] repeat each element n times, where n is the last digit of the number itself.': [1, 0.0]
'[c191] repeat each number in the list the same number of times as the largest digit in that number.': [1, 0.25]
'[c191] repeat every number which is multiple of 6 in the list.': [1, 0.0]
'[c191] repeat the elements as many times as the element''s value counting from the second item.': [1, 0.0]
? '[c191] repeat the first occurrence of each number for as many times as the number itself, stopping at 5 repetitions maximum.'
: [1, 0.0]
'[c191] repeat the highest element eight times and then repeat the second highest element thrice.': [1, 0.0]
'[c191] repeat the highest number 9 times and second highest number 3 times.': [1, 0.0]
? '[c191] repeat the last two digit second number as per the first one digit number and so on till it reaches a last one digit number and repeats next two digit number as per the last one digit number.'
: [1, 0.125]
'[c191] repeat the maximum number in the list 9 times followed by the 2nd maximum number 6 times.': [1, 0.0]
? '[c191] repeat the numbers divisible by 10 once and repeat numbers that are multiples of 5 based on the number of tens present in them.'
: [1, 0.125]
? '[c191] replace each element in the list with the next number in the list as many times as the value of the next number, until the last element in the list, which is represented once.'
: [1, 0.0]
'[c191] replace each element with the largest value in the list an amount of times equal to its last digit.': [1, 0.125]
? '[c191] replace each number (except for the first and last number) with the next number in the list, repeating it as many times as the value of the next number, skipping 0s and 1s.'
: [1, 0.0]
? '[c191] replace each number by this number repeated as many times as the value of the next number, unless the number is the last of the list, in which case it is replaced by as many times as its own value.'
: [1, 0.0]
'[c191] replace numbers smaller than 10 with other numbers.': [1, 0.25]
'[c191] replicate each element in the list by the number of its tens digit.': [1, 0.125]
'[c192] keep only the tenth digits of all numbers in the list.': [1, 1.0]
'[c192] replace each element by the first digit of that element.': [1, 1.0]
'[c192] replace each element with its digits reversed and if it contains only one digit, prepend a 0.': [1, 0.0]
'[c192] replace each element with its first digit.': [1, 0.25]
'[c192] replace each element with the first digit of that element, except 0 if it doesn''t have two digits.': [1, 1.0]
'[c192] replace each element with the last digit of that number.': [1, 0.0]
'[c192] replace each number by the first digit of the number.': [1, 1.0]
? '[c192] replace each number in the list with the first digit of the number, if the number itself is not a single digit number, otherwise replace it with 0.'
: [1, 1.0]
'[c192] replace each number in the list with the sum of its digits.': [1, 0.0]
'[c192] replace each number with its tens digit.': [1, 1.0]
'[c192] replace each number with the digit in its tens place (or with 0 if there is no tens place).': [1, 1.0]
'[c192] replace each number with the first digit of that number.': [1, 0.25]
'[c192] replace each number with the first digit.': [1, 1.0]
'[c192] replace every digit in the list with its last digit.': [1, 0.0]
'[c192] replace every number with the digit in the tens place.': [1, 1.0]
'[c192] replace the second digit of each number with 0, if it exists.': [1, 0.25]
'[c192] take the first digit of each number in list, if the number has no digits (it''s 0), then replace it with 0.': [1, 0.25]
'[c192] take the first digit of each number in the list.': [1, 1.0]
'[c192] take the first digit of each number.': [1, 0.375]
'[c192] take the tens place digit of each entry and represent it as a single digit number.': [1, 1.0]
? '[c193] discard any numbers from the input list that are greater than or equal to 80, then sort the remaining elements in ascending order.'
: [1, 0.0]
'[c193] generate a list of odd numbers starting from one that ends before the 2nd - 1st number times two.': [1, 0.0]
'[c193] multiply each number by 2.': [1, 0.0]
'[c193] only keep the elements less than 70, then sort the elements in ascending order.': [1, 0.0]
'[c193] order the elements in ascending order and remove numbers above 80.': [1, 0.0]
'[c193] remove any number above 60 and then sort the remaining numbers.': [1, 0.0]
'[c193] sort the elements in ascending order after eliminating any excess numbers over 100 or negative numbers.': [1, 0.0]
'[c193] sort the elements in ascending order and only keep unique single digits and multiples of ten.': [1, 0.0]
'[c193] sort the elements in ascending order and remove any element that is a multiple of 11 or 99.': [1, 0.0]
'[c193] sort the elements in ascending order and remove the elements that are above 80.': [1, 0.0]
'[c193] sort the elements in ascending order but excluding numbers greater than or equal to 60.': [1, 0.0]
'[c193] sort the elements in ascending order.': [2, 0.0]
'[c193] sort the elements in increasing order, removing duplicate values (except in the case where the value is over 50)': [1, 0.0]
'[c193] sort the list from lowest to highest while ignoring numbers in the list that are greater than 80.': [1, 0.0]
'[c193] sort the list in an ascending order after removing all numbers bigger than 70.': [1, 0.0]
'[c193] sort the list in ascending order while removing any number greater than or equal to 100.': [1, 0.0]
'[c193] sort the list in ascending order, but only keep numbers less than or equal to 100.': [1, 0.0]
'[c193] sort the list in increasing order, while removing numbers above the 85th percentile.': [1, 0.0]
'[c193] sort the list into ascending order.': [1, 0.0]
'[c193] sort the numbers in ascending order and remove numbers greater than 80.': [1, 0.0]
'[c193] sort the numbers in increasing order.': [1, 0.0]
'[c194] add a count of the number of digits in the first element to both ends of the list.': [1, 0.5]
'[c194] add the length of the list to both ends of the list.': [1, 1.0]
'[c194] add the number of elements at the beginning and end of the list and reverse the original list between them.': [1, 1.0]
'[c194] add the number of elements in the list at the beginning and end, and reverse the list.': [1, 1.0]
'[c194] add to both ends the number of digits in the first number of the list.': [1, 0.25]
'[c194] append and prepend a number which is the length of the array.': [1, 1.0]
'[c194] append and prepend number of digits in the last number of the list.': [1, 0.125]
'[c194] append and prepend the count of digits in the list to the list itself.': [1, 0.75]
'[c194] append and prepend the count of digits present in the list.': [1, 1.0]
'[c194] append and prepend the length of the list to the list after reversing it.': [1, 1.0]
'[c194] append and prepend the length of the list to the list.': [2, 1.25]
'[c194] append and prepend the number of digits in the given list.': [1, 1.0]
'[c194] append and prepend the number of digits in the list.': [1, 1.0]
'[c194] append and prepend the number of elements in the list to the list and reverse it.': [1, 1.0]
'[c194] append and prepend the number of elements in the original list, and reverse the rest of the list.': [1, 1.0]
'[c194] append and prepend the number of multiples of 5 in the list.': [1, 0.0]
'[c194] append and prepend the sum of the digits of the first number to the list.': [1, 0.0]
'[c194] append the count of elements and append to the beginning and end of the list and reverse the original list.': [1, 1.0]
'[c194] append the number of elements in the list to the beginning and end of the list.': [1, 1.0]
'[c195] insert the sequence 23, 68, 42, 99, 71 between the first and the last element.': [1, 1.0]
'[c195] keep the first and last element as it is, and replace the rest with the series [23, 68, 42, 99, 71].': [1, 1.0]
? '[c195] keep the first and the last elements of the list, and replace all the middle elements with the sequence [23, 68, 42, 99, 71].'
: [1, 1.0]
'[c195] keep the first, replace 2nd to 6th elements with 23, 68, 42, 99, 71 respectively and keep the last element.': [1, 1.0]
'[c195] replace all elements after the first and before the last with the sequence [23, 68, 42, 99, 71].': [1, 1.0]
'[c195] replace all elements except the first and last with the series 23, 68, 42, 99, 71.': [1, 1.0]
'[c195] replace all the elements between first and last with the list [23, 68, 42, 99, 71].': [1, 1.0]
'[c195] replace all the elements except the first and last with the sequence [23, 68, 42, 99, 71].': [1, 1.0]
'[c195] replace all the elements from the second to the sixth with the sequence 23, 68, 42, 99, 71.': [1, 0.5]
'[c195] replace positions 2 to 6 with the sequence 23, 68, 42, 99, 71.': [1, 1.0]
'[c195] replace the 2nd, 3rd, 4th, 5th, and 6th elements with 23, 68, 42, 99, and 71 respectively if present.': [1, 0.0]
'[c195] replace the elements from position 2 to 6 with the sequence [23, 68, 42, 99, 71].': [1, 0.875]
'[c195] replace the elements from the second position to the second last position with the sequence: 23, 68, 42, 99, 71.': [1, 1.0]
? '[c195] replace the elements in the middle of the list with the sequence [23, 68, 42, 99, 71], while retaining the first and last elements.'
: [1, 1.0]
? '[c195] replace the first four elements after the first one with the list [23, 68, 42, 99, 71] but keeping the last element.'
: [1, 1.0]
'[c195] replace the numbers from the second to the sixth (if exist) with 23, 68, 42, 99, 71, respectively.': [1, 0.25]
'[c195] replace the second through sixth elements with 23, 68, 42, 99, and 71 respectively.': [1, 0.125]
'[c195] replace the second through sixth elements with the numbers 23, 68, 42, 99, 71 respectively.': [1, 1.0]
'[c195] replace the second to sixth elements with 23, 68, 42, 99, 71, in that order.': [1, 0.5]
? '[c195] retain the first and last elements, but replace all other elements with a series of specific numbers: 23, 68, 42, 99, 71.'
: [1, 1.0]
'[c196] add [17, 38, 82] at the beginning and [1, 55, 27] at the end of any given list.': [1, 1.0]
'[c196] add [17, 38, 82] at the beginning of the list, and [1, 55, 27] at the end.': [1, 1.0]
'[c196] add [17, 38, 82] at the start and [1, 55, 27] at the end of each list.': [1, 1.0]
'[c196] add [17, 38, 82] at the start and [1, 55, 27] at the end of the list.': [1, 1.0]
'[c196] add [17, 38, 82] to the front of the list and [1, 55, 27] to the end of the list.': [1, 1.0]
'[c196] add [17, 38, 82] to the front of the list, and [1, 55, 27] to the end of the list.': [1, 1.0]
'[c196] add elements 17, 38, 82 at the beginning and 1, 55, 27 at the end.': [1, 1.0]
'[c196] add the list [17, 38, 82] at the beginning and [1, 55, 27] at the end.': [1, 1.0]
'[c196] append 17, 38, 82, 1, 55, 27 at the start and end of the list respectively.': [1, 1.0]
? '[c196] append the numbers 17, 38, 82 to the beginning of the list, and append the numbers 1, 55, 27 to the end of the list.'
: [1, 1.0]
? '[c196] append the numbers 17, 38, and 82 to the beginning of the list, and the numbers 1, 55, and 27 to the end of the list.'
: [1, 1.0]
'[c196] insert [17, 38, 82] at the beginning of the list and [1, 55, 27] at the end.': [1, 1.0]
'[c196] insert the numbers 17, 38, and 82 at the beginning and the numbers 1, 55, and 27 at the end.': [1, 1.0]
'[c196] prefix the list with the series [17, 38, 82] and suffix the list with the series [1, 55, 27].': [1, 1.0]
'[c196] prepend [17, 38, 82] and append [1, 55, 27] to the given list.': [2, 2.0]
'[c196] prepend [17, 38, 82] and append [1, 55, 27].': [1, 1.0]
'[c196] prepend [17, 38, 82] to the list and append [1, 55, 27] to the list.': [1, 1.0]
'[c196] prepend the list with [17, 38, 82] and append [1, 55, 27] to the end of the list.': [1, 1.0]
'[c196] prepend the list with [17, 38, 82] and append [1, 55, 27] to the list.': [1, 1.0]
'[c197] convert each number into a digit count.': [1, 0.125]
'[c197] count the number of times each element appears in the list and return the counts in order of appearance.': [1, 0.75]
'[c197] count the occurrence of each number in the list and replace the number with its occurrence count.': [1, 0.875]
'[c197] replace all of the elements with the number of unique elements in the list.': [1, 0.125]
'[c197] replace each element by the count of that element in the list.': [2, 1.75]
'[c197] replace each element with the number of its appearances in the list.': [1, 1.0]
'[c197] replace each element with the sum of its digits.': [2, 0.0]
'[c197] replace each number by its repetition count in the list.': [1, 1.0]
? '[c197] replace each number in the list by its tens digit (the second digit from the right, or the digit in the tens place if thought of as a decimal number).'
: [1, 0.0]
'[c197] replace each number with its number of prime factors.': [1, 0.125]
'[c197] replace each number with the count of itself in the list.': [1, 1.0]
'[c197] replace each number with the number of occurrences of that number in the list.': [1, 0.875]
'[c197] replace each number with the sum of its digits mod 4.': [1, 0.125]
'[c197] replace each unique number in the list with a unique number starting from 1 in order of appearance.': [1, 0.0]
'[c197] replace each value with the count of that value in the list.': [1, 0.875]
'[c197] replace every element with the count of its appearances.': [1, 0.875]
'[c197] replace numbers lower than 50 with 1 and numbers greater or equal to 50 with 2.': [1, 0.125]
'[c197] replace the element with the last digit of the element.': [1, 0.0]
'[c198] keep each unique element while sorting it in descending order.': [1, 1.0]
'[c198] keep only unique elements and sort them in descending order.': [1, 1.0]
'[c198] list each unique number in a list in descending order.': [1, 1.0]
'[c198] order the unique elements in descending order.': [1, 1.0]
'[c198] remove duplicates and sort the list in descending order.': [1, 1.0]
'[c198] reorder the list from highest to lowest.': [1, 0.625]
'[c198] return a list in descending order but without duplicates.': [1, 1.0]
'[c198] sort descending, but maintaining the first number in its place.': [1, 0.0]
'[c198] sort the elements in descending order while removing any duplicates.': [1, 1.0]
'[c198] sort the elements in descending order, but exclude repetitions.': [1, 1.0]
'[c198] sort the elements in descending order.': [2, 1.25]
'[c198] sort the list in decreasing order but leaving smallest 3 elements in the original order at the end of the list.': [1, 0.0]
'[c198] sort the list in decreasing order.': [1, 0.75]
'[c198] sort the numbers descending and remove the duplicates.': [1, 1.0]
'[c198] sort the numbers from highest to lowest.': [1, 0.625]
'[c198] sort the numbers in descending order.': [2, 1.25]
'[c198] sort the unique elements in descending order.': [2, 2.0]
'[c198] swap the second and third items and the last and second last items in the list.': [1, 0.625]
'[c199] generate a list in ascending order with an index before each number.': [1, 1.0]
'[c199] insert an ascending number sequence starting from 1 before each element, and sort the list in ascending order.': [1, 1.0]
'[c199] insert ascending numbers starting from 1 at the start of every other position.': [1, 1.0]
'[c199] insert ascending order numbers starting from 1 in between each element of the sorted list.': [1, 1.0]
'[c199] insert the number corresponding to the position before each number, sorted in ascending order.': [1, 1.0]
'[c199] interleave the count from 1 and sort the original list.': [1, 1.0]
'[c199] interleave the elements of the original list with numbers from 1 to n, where n is the length of the list.': [1, 1.0]
'[c199] intersperse a counting sequence starting from 1 with the sorted sequence of input numbers.': [1, 1.0]
'[c199] organize the numbers in ascending order and prepend index before each number starting from 1.': [1, 1.0]
'[c199] re-order and place elements by increasing values, but also add index number before each number.': [1, 1.0]
'[c199] reorder the list in ascending order and insert a numbering order before each element.': [1, 1.0]
'[c199] sort the elements and add a number before each one starting from 1.': [1, 1.0]
'[c199] sort the elements and then append a number representing their order in the list before the element.': [1, 1.0]
'[c199] sort the elements and then organize the list in a fashion where an incrementing index precedes each number.': [1, 1.0]
'[c199] sort the elements and then prefix each element with its 1-based index in the list.': [1, 1.0]
'[c199] sort the elements and then prefix each element with its index starting from 1.': [1, 1.0]
'[c199] sort the list and then, for each element, prepend its order number.': [1, 1.0]
'[c199] sort the list in ascending order and prefix each number with its rank starting from 1.': [1, 1.0]
'[c199] sort the list in increasing order and add an incrementing counter (starting from 1) before each element.': [1, 1.0]
'[c199] sort the numbers in ascending order and index them starting from 1.': [1, 1.0]
'[c200] count the occurrences of each digit in the list from 0 to 9 and output them in order.': [1, 0.0]
'[c200] extract and sort the unique leading digits.': [1, 0.25]
'[c200] rearrange the elements in ascending order and replace number to its first digit.': [1, 0.125]
'[c200] replace each element with its unit''s digit.': [1, 0.0]
? '[c200] replace each element with the count of its digits which are also just counts of positive digits and leading zeros are not counted.'
: [1, 0.0]
'[c200] replace each number by its first digit.': [1, 0.0]
'[c200] replace each number by the highest digit in that number.': [1, 0.0]
'[c200] replace each number with its last digit.': [1, 0.0]
'[c200] replace each number with the first digit of the number.': [1, 0.0]
'[c200] replacing each element by its last non-zero digit.': [1, 0.0]
'[c200] sort the digits found in all the numbers and remove duplicate digits.': [1, 0.0]
'[c200] sort the digits in ascending order from each number in the list.': [1, 0.0]
'[c200] sort the elements based on the second digit (in ascending order).': [1, 0.375]
'[c200] sort the last digit of each number in the list.': [1, 0.0]
'[c200] sort the unique digits in ascending order that appear in the elements.': [1, 0.0]
'[c200] sort the unique first digit of all numbers from smallest to greatest.': [1, 0.0]
'[c200] take the last digit of each number and replace the number with its last digit.': [1, 0.0]
'[c200] take the tens digit from each number and sort the list in ascending order.': [1, 0.375]
'[c200] take the tens digit of each number in the list.': [1, 0.125]
? '[c201] create a new list with elements from the largest to the smallest value that are bigger or equal to 50, followed by smaller ones from the biggest to the smallest.'
: [1, 0.0]
'[c201] drop the first and last number if they are odd numbers.': [1, 0.125]
'[c201] extract the elements higher than 50.': [1, 0.0]
'[c201] generate a list of all elements greater than or equal to 42 except the first element.': [1, 0.375]
'[c201] invert the order of the elements after the first one.': [1, 0.5]
'[c201] keep only the numbers greater than or equal to 30 and sort the remaining ones in descending order.': [1, 0.0]
'[c201] keep the elements that are greater than or equal to 50 and remove the first number.': [1, 0.25]
'[c201] keep the numbers above 50 and move them to the start of the list.': [1, 0.0]
? '[c201] move all the elements higher than 50 to the beginning of the array, and all elements lower than 50 to the end, while maintaining their original order.'
: [1, 0.0]
'[c201] place any number greater than 50 at the front, and the rest at the end.': [1, 0.0]
'[c201] remove first element if it''s greater than or equal to 30, and reverse the rest.': [1, 0.375]
'[c201] remove the first and any other number less than 10 from the list.': [1, 0.25]
'[c201] remove the first and last elements in the list.': [1, 0.125]
? '[c201] remove the first element in the list, and only keep elements greater than or equal to the original first element''s 10''s digit times 10.'
: [1, 0.0]
? '[c201] remove the first number and then take all numbers 30 or above, then add all numbers below 30 at the end in the original order.'
: [1, 0.75]
'[c201] remove the first number if it is below 50 and keep it otherwise, then reverse the order.': [1, 0.125]
'[c201] remove the first number if it is less than 50 and keep the rest.': [1, 0.25]
'[c201] remove the first number if it is less than 50, and rearrange the list with the numbers greater than 50 first.': [1, 0.375]
? '[c201] reorder the list, putting elements greater than 40 first while retaining their original order, followed by the remaining elements.'
: [1, 0.25]
'[c201] reverse the order of elements and then remove the first two elements.': [1, 0.125]
'[c202] count the digits from 0 to 9 and output them in ascending order.': [1, 0.0]
? '[c202] count the number of digits in each number, then return a list starting from one, that has the same length as the longest count.'
: [1, 0.125]
'[c202] count the number of digits in the elements of the list starting from 1.': [1, 0.125]
'[c202] count the number of single digit numbers, 10s and 50s+.': [1, 0.0]
? '[c202] count the number of times each digit from 0-9 appears in the input list, and output the numbers that appear more than once.'
: [1, 0.0]
'[c202] generate a list of indexes (starting from 1) that the element is divisible by 3.': [1, 0.0]
? '[c202] generate a list of integers until the number of items in the list matchs the number of even numbers in the original list.'
: [1, 0.25]
? '[c202] generate a list of numbers indicating the position of multiples of 3 in the original sequence, starting from count 1.'
: [1, 0.0]
'[c202] generate a list of numbers where the number is included if it has a digit 4 or 7.': [1, 0.0]
'[c202] generate a list of the place values from 1 to 9 that are found in the list.': [1, 0.0]
'[c202] generate a list of the positions of single digit numbers in the input.': [1, 0.0]
'[c202] generate a list of unique digits contained in the inputs values.': [1, 0.0]
'[c202] generate a list of unique digits found in two-digit numbers in the input, ascending order.': [1, 0.0]
'[c202] list numbers 1 to 9, excluding those that appear in the provided list.': [1, 0.0]
'[c202] output the indices of single digit numbers present in the list.': [1, 0.0]
? '[c202] return a list of incrementing numbers starting from 1, for each input list that contains a number ending in 1, 2, 3, 4, 5, 6, 7, 8, 9, in this order.'
: [1, 0.0]
'[c202] return the digit that each position in the array is divisible by, if there is one.': [1, 0.0]
'[c202] return the indexes of numbers less than 10.': [1, 0.0]
'[c202] return the indices of the single-digit numbers in a list, starting from 1.': [1, 0.0]
'[c202] select distinct last digits of each number in the input, sort them and skip the number 0 if present in the list.': [1, 0.0]
? '[c203] create a list of multiples of 3 starting from the smallest element with the list size equal to the original list size.'
: [1, 0.625]
? '[c203] generate a list to start from the last element and each subsequent element is the previous element plus the number 27.'
: [1, 0.25]
? '[c203] generate a new list with the first number, then add 22 to each number and use that in place of the original number until there is disagreement with the other number on the list, then just repeat the first number.'
: [1, 0.5]
'[c203] replace all but the last element with multiples of the last element, starting from the last and ascending.': [1, 0.625]
'[c203] replace all elements with even indices by their half and all elements with odd indices by their double.': [1, 0.125]
? '[c203] replace all elements with their multiples of 2, starting from the smallest number in the list to the largest by incrementing the multiplier by 1.'
: [1, 1.0]
? '[c203] replace all numbers in a list with their position in the list multiplied by 5, except when there''s only one number in which case it remains the same.'
: [1, 0.25]
? '[c203] replace each element with its corresponding multiple of 4 in its position order (first number is multiple of 4, second number is multiple of 8 and so on).'
: [1, 0.5]
? '[c203] replace each element with its corresponding multiple of 4, starting from the first element (1st element * 4, 2nd element * 8, 3rd element * 12,.'
: [1, 0.0]
'[c203] replace each index i with array[i] if i is even, and 2*array[i] if i is odd.': [1, 0.5]
? '[c203] replace each number in the list with the maximum number that can be obtained by multiplying from 1 to n (inclusive) some number until it is less than or equal to the current number.'
: [1, 0.75]
'[c203] replace every digit number in the list with the double of its value in regards to modulo 10.': [1, 0.5]
'[c203] replace the last element with its double.': [1, 0.0]
'[c203] replace the values of the sequence from the smallest one up, incrementing each value by the smallest one.': [1, 1.0]
? '[c203] set the first element of the list to the smallest number in the list and then the rest of the elements to (smallest number)*2, (smallest number)*3 and so on.'
: [1, 1.0]
? '[c203] start from 4 and increment by 4 for the length of the list or if the length of the list is 1 then return the same element.'
: [1, 0.625]
'[c203] start with the smallest number in the list, then add it on itself and form a new list.': [1, 1.0]
'[c203] take the smallest number in the list and multiply it by i+1 for the new list, where i is the index of the new list.': [1, 1.0]
? '[c203] take the smallest number in the list and replace all numbers with a sequence starting from that number and increasing by 4.'
: [1, 0.5]
'[c204] extract the numbers before each 0 starting from the second 0.': [1, 0.125]
'[c204] get every element before a 0 and the first 0, excluding duplicate elements.': [1, 0.125]
'[c204] include the sequence of numbers till a 0 is encountered and include one extra 0.': [1, 0.0]
'[c204] insert the number before the first ''0'' in the list and the number after the last ''0'' in the list.': [1, 0.0]
'[c204] keep distinct elements from each set, ignoring zeros.': [1, 0.0]
'[c204] keep elements prior to encountering a 0 until it encounters a second 0, start again on the third zero and so on.': [1, 0.125]
'[c204] keep only the last element before each sequence of 0s.': [1, 0.25]
? '[c204] keep only the unique elements in the same order and ignore the zeroes in between, but include the first zero after a number.'
: [1, 0.0]
'[c204] keep the first and last elements before 0.': [1, 0.125]
'[c204] keep the number before the first 0 in/before the sequence, and the last number in the array.': [1, 0.0]
'[c204] produce a list containing only elements that are followed by a 0.': [1, 0.5]
'[c204] remove all duplicate entries from the list, leaving only the first occurrence of each, then reverse the list.': [1, 0.0]
'[c204] remove all zeros and subsequent elements.': [1, 0.0]
'[c204] remove duplicate values from the list but keep the last occurrence of the 0s.': [1, 0.0]
'[c204] remove numbers if the next number is a zero.': [1, 0.25]
'[c204] retain unique, non-zero elements appearing from the right end of the list.': [1, 0.0]
'[c204] return only the elements between the first and last appearances of 0.': [1, 0.0]
'[c204] return the number before 0, followed by the number after 0.': [1, 0.5]
'[c204] strip all trailing zeros and needs at least one occurrence of zero between other numbers.': [1, 0.0]
'[c204] take the second element every time two same numbers appear in a row.': [1, 0.0]
'[c205] count how many times the number 4 appears and return four times that count.': [1, 0.0]
'[c205] count the number of occurrences of 4, 6, 8 multiplied by 4.': [1, 0.0]
'[c205] count the number of one-digit numbers, multiply it with 4 and add it with the number of two digits numbers.': [1, 0.0]
? '[c205] create an array containing the number of elements from the input array that belong in each sub-group 1-9, 10-19, 20-29, 30-39,.'
: [1, 0.125]
'[c205] find the frequency of 4 in the given list, square that frequency and return it in a list.': [1, 0.0]
'[c205] find the sum of all numbers that are multiples of 4 or 8, noting that both 4 and 8 are counted too.': [1, 0.125]
'[c205] multiply all the numbers after the last even number.': [1, 0.0]
'[c205] produce the number of elements multiplied by 16.': [1, 0.0]
'[c205] replace the list with the square of the number of elements that is lower than 7.': [1, 0.125]
'[c205] return a list with one element being double the second number in the list.': [1, 0.0]
'[c205] return the value which is 4 times the number of 4''s in the list.': [1, 0.0]
'[c205] square the first occurrence of 4 or 2 or 8 in the list.': [1, 0.25]
'[c205] square the value of the first occurrence of either 2, 4, 6, or 8.': [1, 0.375]
'[c205] sum all the multiples of 4 and add 16.': [1, 0.125]
? '[c205] sum the squares of all the numbers that are not contained between 2 and 7 (exclusively), and produced a list with the sum within it.'
: [1, 0.0]
'[c205] sum up the squares of 2, 4, 8, and return as a list.': [1, 0.125]
'[c205] sum up the values where the index is equal to 3 or 8 or the value is equal to 7 or 9.': [1, 0.0]
'[c205] take the number of occurrences of 4 and 8, add them, and square this sum.': [1, 0.375]
'[c205] take the number of occurrences of the smallest number in the list and take the square of it.': [1, 0.0]
'[c206] exclude the first and last numbers and any repeated numbers.': [1, 0.125]
'[c206] exclude the first two elements and the second last element.': [1, 0.0]
'[c206] generate a list of elements starting from the first element divisible by 4 to the end.': [1, 0.0]
'[c206] generate a list starting from the third item until the end, skipping every third element.': [1, 0.0]
? '[c206] include all the elements after the first instance of a number less than 20 to the before the second number above 70.'
: [1, 0.0]
'[c206] keep numbers that comes after 50 and before 100.': [1, 0.0]
'[c206] keep the elements from the first even number in the list till the end.': [1, 0.0]
'[c206] omit the first element, the last element, and every third element from the list.': [1, 0.0]
'[c206] remove all elements not ending in the number 4, 5, 6, 8 or 9.': [1, 0.0]
'[c206] remove every odd-indexed element in the initial list.': [1, 0.0]
? '[c206] remove numbers higher than 85 and numbers with a units digit of 0, then leave the remaining numbers in the original order.'
: [1, 0.0]
'[c206] remove the elements if they are multiples of 10 or if they are equal to 1, 2 or 3.': [1, 0.0]
'[c206] remove the first and last numbers if they are higher than 10 and retain the rest of the list.': [1, 0.0]
'[c206] remove the first and second element, and also the last but one element.': [1, 0.125]
'[c206] remove the first two and last two numbers, and keep the rest.': [1, 0.0]
'[c206] remove the first two and last two numbers, and reverse the remaining list.': [1, 0.0]
'[c206] remove the first two elements and the last element from the list.': [1, 0.0]
'[c206] remove the first two numbers and the last number.': [1, 0.0]
'[c206] remove the first, second and last elements if they''re greater than 9.': [1, 0.0]
'[c206] return a list of elements which are neither prime nor even numbers, in the order they appear.': [1, 0.0]
'[c207] add 3 to the first and last elements and add 65 to the other elements.': [1, 0.0]
'[c207] add 4 to the middle elements and add 7 to the first and last elements.': [1, 0.0]
'[c207] add 5 to the first element, add 1 to the second element, and multiply the 3rd element by 2.': [1, 0.0]
'[c207] add 9 to the first and last elements and to add 2 to the interior elements.': [1, 0.0]
'[c207] add each element in the list by the last element.': [1, 0.0]
'[c207] add the first and last element of the original list to each number in the original list.': [1, 0.0]
'[c207] add the first and last element, last second and second element, and so on from the list.': [1, 0.125]
? '[c207] add the first and last elements and replace the first and last elements with their sum and replace the middle elements with their double.'
: [1, 0.25]
'[c207] add the first and last elements, then add the sum to each element in the list.': [1, 0.0]
'[c207] add the last number with each element of the list and place two of the sums side by side.': [1, 0.0]
? '[c207] calculate the sum of first and last element and double of the second and one before last element while reversing the list.'
: [1, 0.0]
'[c207] double the middle numbers and replace the first and last number by their sum.': [1, 0.125]
'[c207] replace each element with a value that is computed by adding 4 to the element then multiplying the result by 2 (i.': [1, 0.0]
? '[c207] replace each even number with the sum of itself and the last element, and each odd number with the difference of the first and last numbers.'
: [1, 0.0]
'[c207] replace each first and last element with their sum and the rest of the numbers with their doubled value.': [1, 0.0]
? '[c207] replace the first and the last elements with their sum, the second and second last elements with their sum, and so on.'
: [1, 0.125]
'[c207] reverse the digits and summe them with the same element position from the end.': [1, 0.0]
'[c207] reverse the order of the digits in the numbers.': [1, 0.0]
'[c207] swap the digits of a number if it has two.': [1, 0.0]
'[c207] take each element, add it to the last element in the list and put the result in its place.': [1, 0.0]
'[c208] cut the list at the first 3 (or similar digit) and keep the second part (including the 3).': [1, 0.0]
'[c208] delete elements from the start of the list up to and including the first number which is lesser than 10.': [1, 0.25]
'[c208] discard elements from the start of the list until encountering a number found in the range 0-9 (inclusive).': [1, 0.0]
'[c208] keep only the elements after the third occurrence of any number.': [1, 0.125]
'[c208] keep the elements from the last occurrence of the number 3 to the end of the list.': [1, 0.0]
'[c208] output a list starting from the second past last element that is a multiple of 3.': [1, 0.0]
'[c208] remove all elements from the beginning up to (and including) the last occurrence of number 3.': [1, 0.125]
'[c208] remove all elements until the first number less than 10 is found, then return the rest of the list.': [1, 0.0]
'[c208] remove all elements up to and including the second occurrence of 3, if present.': [1, 0.25]
'[c208] remove elements from the beginning until an element is found that is divisible by 3.': [1, 0.0]
? '[c208] remove the elements from the beginning of the list until a number less than 10 is found and keep all the remaining elements intact.'
: [1, 0.0]
'[c208] remove the first and second elements from the list.': [1, 0.25]
'[c208] remove the first element of the list until you encounter an element less than 10.': [1, 0.125]
'[c208] remove the first half of the list.': [2, 0.5]
'[c208] remove the first two elements.': [1, 0.5]
'[c208] remove the leading numbers smaller than 10.': [1, 0.0]
'[c208] return the remainder of the elements in the list after the last zero, or the last element if there are no zeros.': [1, 0.125]
'[c208] shorten the list from the first 1 or 2 found.': [1, 0.375]
'[c208] slice off the elements from the first occurrence of 3.': [1, 0.0]
'[c209] add between the second and the third elements a sum of the second and third elements from the beginning.': [1, 0.0]
'[c209] add the first two elements and insert the result after the second element, then sort in ascending order.': [1, 0.0]
'[c209] append a number 100 minus the first element, then append the rest of elements in their original sequence.': [1, 0.0]
? '[c209] arrange the elements in increasing order and add a new element after the smallest element whose value is the total of the smallest and the largest elements of the original list.'
: [1, 0.0]
? '[c209] arrange the list with the minimum element first, followed by the next smaller, append the sum of all elements, then arrange the remaining elements in ascending order.'
: [1, 0.0]
'[c209] first sort the inputs, then add  a number that is 1 more than the original first item after the new first item.': [1, 0.0]
'[c209] insert the increment of the maximum element by 1 between the minimum and maximum elements.': [1, 0.125]
? '[c209] insert the original list''s third element (plus one) after the first element, while preserving original order of rest of the elements.'
: [1, 0.0]
'[c209] insert the sum of the smallest and largest number of the list at the third position.': [1, 0.25]
'[c209] keep the smallest numbers at the start of the list while bringing the highest ones to the end.': [1, 0.0]
? '[c209] order the list in ascending order, then insert the number that is 3 higher than the second number after the second number.'
: [1, 0.0]
? '[c209] organize the initial list by placing the lowest numbers first, following with the sum of 52 and the third initial number, then the remaining numbers in ascending order.'
: [1, 0.0]
? '[c209] place the smallest two numbers at the beginning, append their sum, then append the rest of the list in increasing order.'
: [1, 0.0]
? '[c209] reorder the numbers in increasing sequence and insert the number which is 1 + maximum number at the third place from left.'
: [1, 0.125]
'[c209] sort the array in ascending order inserting a number (its previous number + 1) after one.': [1, 0.0]
? '[c209] sort the input list in ascending order, then insert the sum of the first and third elements of the list after the third element.'
: [1, 0.0]
'[c209] sort the list in ascending order and insert the sum of the first and last elements before the second number.': [1, 0.125]
? '[c209] sort the list, add an extra element which is the sum of element one and element two and place it in the third position, then repeat the process.'
: [1, 0.0]
'[c209] sort the list, but if number 9 exists, the number after it is always increased by 1.': [1, 0.0]
'[c209] take the smallest and largest elements and the sum of all elements on a list.': [1, 0.0]
'[c210] generate a list replacing the third element with the last, then appending the last element.': [1, 0.0]
'[c210] insert the largest number in the list before the smallest number, maintaining the order of the rest of the list.': [1, 0.125]
'[c210] insert the last digit at the 5th position, and append the last digit again to the end.': [1, 0.125]
'[c210] insert the last element before the largest element of the list.': [1, 0.25]
? '[c210] insert the last number in the list before the first number divisible by 2 and also append it at the end of the list.'
: [1, 0.0]
'[c210] move the last number before the first maximum number.': [1, 0.375]
'[c210] move the last number just before any 5 in the list if 5 exists, else append the last number.': [1, 0.125]
'[c210] place the largest number after the smallest number in the list and add the smallest number at the end of the list.': [1, 0.25]
'[c210] place the smallest and largest numbers next to each other, and these two numbers repeat at the end of the list.': [1, 0.0]
'[c210] put the last number in the initial list after the third number and again at the end of the list.': [1, 0.0]
'[c210] replace the 4th element with the 3rd and append the 3rd element to the end of the list.': [1, 0.0]
? '[c210] replace the element before the last with the last element and also append the last element one more time at the end of the list.'
: [1, 0.375]
'[c210] replace the element right before the last element with the last element and append the last element at the end.': [1, 0.125]
? '[c210] replace the last element before the element 5 (if present) with the first element in the list, apart from that append the first element to the end of the list.'
: [1, 0.0]
'[c210] replace the last element before the number 5 with the last number in the list.': [1, 0.25]
'[c210] replace the second last element with the last element and append the last element at the end again.': [1, 0.125]
? '[c210] replace the third-to-last element with the last element, and then append the replaced element at the end of the list.'
: [1, 0.0]
'[c210] reverse the last three elements of the list and then append the last element again.': [1, 0.0]
? '[c210] shift the element preceding the last element to the second position and add the element at the last position to the end of the list.'
: [1, 0.0]
'[c210] substitute the second to last element with the last element while keeping the order.': [1, 0.5]
? '[c211] add the last 2 numbers in reverse order and then the middle two numbers twice, and finally the first two numbers in reverse order.'
: [1, 0.0]
'[c211] add the middle element twice in between the reversed list.': [1, 0.5]
'[c211] add the second half of the list reversed to itself and then appended together with the previous list elements.': [1, 0.0]
'[c211] add two elements at the end of the list which are the fourth from start and fourth from end.': [1, 0.0]
'[c211] append the reversed list to the unique elements of the list from the midpoint to the end.': [1, 0.5]
? '[c211] create a list where the first half is the reverse of the second half and the second half is the mirror of the first half.'
: [1, 0.125]
'[c211] create a new list with two copies of the fourth last element and all the elements in reverse.': [1, 0.0]
? '[c211] generate a list of elements that contains the original list in reverse order, while the middle two items are duplicated.'
: [1, 0.25]
? '[c211] insert the fourth element in between the fifth and sixth elements of the original list, and then reverse the entire list.'
: [1, 1.0]
'[c211] mirror the elements except the first two and the last two numbers.': [1, 0.0]
? '[c211] replace the first element with the last element, replace the second with the second to last element and so on, then add a copy of the third to last, second to last and last element at the end of the list.'
: [1, 0.0]
? '[c211] reverse the elements where the middle two elements of the original list are both listed twice in the center of the new list.'
: [1, 0.0]
'[c211] reverse the elements, repeat the fourth and fifth element, then append the original order of elements.': [1, 0.25]
'[c211] reverse the list and add the elements at index 2 and 3 of the original list in between.': [1, 1.0]
'[c211] reverse the list and repeat elements 4 and 5.': [1, 0.25]
'[c211] reverse the list and repeat elements at fourth and fifth position.': [1, 0.25]
'[c211] reverse the list, and for the 4th, 5th, and 6th spots in the list, replace with the original 4th element.': [1, 0.0]
'[c211] reverse the list, spot the number located in the middle and duplicate it then return the new list': [1, 0.0]
'[c211] take the last three numbers from the original list, repeat them, then append the original list in reverse order.': [1, 0.0]
'[c212] add three 3s before the third element.': [1, 1.0]
'[c212] insert 3 repeated 3 times before the third position.': [1, 1.0]
'[c212] insert [3, 3, 3] before the numbers from 3rd position to go to its original order.': [1, 1.0]
'[c212] insert three ''3''s after the second element in the list.': [1, 1.0]
'[c212] insert three ''3''s after the second element.': [1, 1.0]
'[c212] insert three ''3''s after the second position in the list.': [1, 1.0]
'[c212] insert three 3''s after the 2nd element.': [1, 1.0]
'[c212] insert three 3''s after the second element.': [1, 1.0]
'[c212] insert three 3''s before the second last element of the list.': [1, 0.125]
'[c212] insert three 3''s before the third position.': [1, 1.0]
'[c212] insert three 3''s between the first two numbers where the second number is greater than 3.': [1, 0.25]
'[c212] insert three 3''s between the second and third elements of the list.': [1, 1.0]
'[c212] insert three 3s after the second element in the list.': [1, 1.0]
'[c212] insert three 3s after the second element of the list.': [1, 1.0]
'[c212] insert three 3s after the second element.': [2, 1.875]
'[c212] insert three consecutive 3''s after the second number in the list.': [1, 1.0]
'[c212] insert three consecutive 3s after the second element.': [1, 1.0]
'[c212] insert three consecutive 3s before the third element.': [1, 1.0]
'[c212] insert three occurrences of 3 at the point of the third element in the list.': [1, 1.0]
'[c213] arrange the elements less than 50 in increasing order.': [1, 0.25]
'[c213] filter out the numbers that are divisible by 7 from the list and place them in ascending order.': [1, 0.0]
'[c213] find the three numbers less than or equal to 50 and return them in ascending order.': [1, 0.75]
'[c213] keep only numbers that are less than 50 and sort them in increasing order.': [1, 0.25]
'[c213] keep only single-digit numbers and numbers that are multiples of ten.': [1, 0.125]
'[c213] keep only the elements less than or equals to 50 and sort them in ascending order.': [1, 0.25]
'[c213] keep the values less than or equal to 41 and sort them in ascending order.': [1, 0.25]
? '[c213] keep the values that end in 0, 1, 2, 3, 4, 5, 6, 7, 8 and remove the values that end in 9 and then sort them in ascending order.'
: [1, 0.0]
'[c213] list all single digit numbers in the list in ascending order.': [1, 0.25]
'[c213] return a list of single digit numbers, maintaining the order of appearance in the initial list.': [1, 0.0]
'[c213] return sorted list which consists of all elements of the original list that are less than 50.': [1, 0.375]
'[c213] return the elements under 100 in ascending order.': [1, 0.0]
'[c213] return the elements which are less than 100 - (the number of elements - 1) * 10 in ascending order.': [1, 0.375]
'[c213] select elements that are below or equals 50, and sort them in ascending order.': [1, 0.0]
'[c213] select numbers less than or equal to 100 and not divisible by 3, then sort from lowest to highest.': [1, 0.0]
'[c213] select numbers that are single digit or ends with a digit less than 5 and then sort.': [1, 0.125]
'[c213] select numbers which are divisible by 1 or 2 without any remainder and sort them in increasing order.': [1, 0.125]
'[c213] select single-digit numbers and numbers ending in zero from the provided list and arrange them in ascending order.': [1, 0.0]
'[c213] sort the numbers less than 10.': [1, 0.0]
'[c213] take all single digit numbers and numbers that end in zero, and sort them in ascending order.': [1, 0.375]
'[c214] remove all 4 and 5 from the list.': [1, 0.0]
'[c214] remove any element that follows a number in the list less than 4.': [1, 0.25]
'[c214] remove elements 1, 2, 4, 5 and 64 (if they exist) from the list.': [1, 0.25]
'[c214] remove every element which in the position same as the first digit in the first element.': [1, 0.125]
'[c214] remove numbers that are the 3rd (beginning with index 1) and 5th.': [1, 0.125]
'[c214] remove the 1st and the 4th last elements.': [1, 0.375]
'[c214] remove the element following the number 5.': [1, 0.0]
'[c214] remove the element if it is the same as the amount of elements in the list.': [1, 0.125]
'[c214] remove the elements 1 and 2 if they are present.': [1, 0.0]
'[c214] remove the elements 4, 5, 2, and 3, if they are in the first place.': [1, 0.0]
'[c214] remove the first and last odd numbers of the list, and the list remains the same for the rest.': [1, 0.0]
'[c214] remove the first and the last value after every number 5 in the sequence.': [1, 0.0]
'[c214] remove the first and third elements from the list.': [1, 0.125]
'[c214] remove the first element and the second to last element.': [1, 0.375]
'[c214] remove the first even number and all numbers less than it.': [1, 0.0]
'[c214] remove the first even number in the list.': [1, 0.0]
'[c214] remove the first occurrence of number 2 if present, and remove the final occurrence of number 0 (if any).': [1, 0.0]
'[c214] remove the number 4 if it''s the first element and the number 1 regardless of its position.': [1, 0.125]
'[c214] remove the second element from the list.': [1, 0.0]
'[c214] remove the third element from the list.': [1, 0.0]
'[c215] eliminate the first number, then replace the number right after 3 with its increased by one.': [1, 0.0]
'[c215] increase the third number in the list by 1.': [1, 0.0]
'[c215] remove 6 when it appears and increment the next number by 1.': [1, 0.0]
? '[c215] remove elements that are multiples of 9, and replace elements that are multiples of 3 but not multiples of 9 with their half.'
: [1, 0.0]
? '[c215] remove the first instance of 3 from the list and replace the first instance of 2 with the number directly succeeding it in the list (or keep it the same if 2 is the last number).'
: [1, 0.0]
'[c215] replace number 3 prior to number 4 with number 10.': [1, 0.0]
'[c215] replace the "number + 1"th position element with the number itself.': [1, 0.0]
'[c215] replace the first 5 in the list with 8, and the first 4 with 9.': [1, 0.0]
? '[c215] replace the first element with the count of 8s in the list and the second last element with the count of 3s in the list.'
: [1, 0.0]
? '[c215] replace the first instance of 4 with 6, the first instance of 5 with 8, and the first instance of 3 with the sum of the two digits after.'
: [1, 0.0]
'[c215] replace the first zero with 9, the first two with 4 and the first three with 10.': [1, 0.0]
'[c215] replace the fourth number with the fourth number''s final digit.': [1, 0.0]
'[c215] replace the number following 3 or 4 by the sum of their digits.': [1, 0.0]
'[c215] replace the number next to 3 with (3*number next to 3)%10.': [1, 0.0]
'[c215] replace the third element with the number 10.': [1, 0.0]
'[c215] replace the third element with the sum of the first two elements.': [1, 0.0]
'[c215] replace the third number in the list with number plus 2.': [1, 0.0]
'[c215] replace the third number in the list with the sum of the first and second numbers.': [1, 0.0]
? '[c215] start at the first digit, if the digit is less than 5, remove the digit and replace the next digit by its square root rounded down.'
: [1, 0.0]
? '[c215] subtract 2 from the element following a 3 and subtract 1 from the element following a 5, unless the value would turn less than 0 in which case it remains as 0.'
: [1, 0.0]
'[c216] arrange the elements in ascending order.': [1, 0.125]
'[c216] sort elements in an ascending order allowing one large number at the beginning.': [1, 0.375]
? '[c216] sort the elements from smallest to largest, excluding the last two largest numbers which are placed at the end of the list in a descending order.'
: [1, 0.0]
? '[c216] sort the elements in ascending order except the largest and smallest numbers which remain in their original position.'
: [1, 0.25]
'[c216] sort the elements in ascending order excluding the largest number, and put the largest number at the end.': [1, 0.375]
'[c216] sort the elements in ascending order, but keep numbers larger than 90 at the end.': [1, 0.375]
'[c216] sort the elements in ascending order.': [3, 0.75]
'[c216] sort the elements.': [1, 0.25]
? '[c216] sort the list in ascending order but all numbers greater than or equal to 70 should be placed at the end in ascending order.'
: [1, 0.25]
? '[c216] sort the list in ascending order, but the numbers greater than or equal to 70 are placed at the end of the list, in ascending order.'
: [1, 0.75]
'[c216] sort the list in ascending order, excluding the last number.': [1, 0.375]
'[c216] sort the list in ascending order.': [1, 0.375]
'[c216] sort the numbers from smallest to largest.': [1, 0.125]
'[c216] sort the numbers from smallest to the highest.': [1, 0.375]
? '[c216] sort the numbers in ascending order but all the numbers above 50 are placed at the end of the list in ascending order.'
: [1, 0.625]
'[c216] sort the numbers in ascending order.': [1, 0.375]
'[c216] sort the numbers while keeping the largest number last in the list.': [1, 0.125]
'[c216] sort the numbers, but place the highest number at the end.': [1, 0.25]
? '[c217] arrange the elements such that the first even number is the first, the first odd number is the last, and the rest are in the middle in their original order.'
: [1, 0.125]
? '[c217] keep the first, third and fifth value the same, then swap the 2nd value with the last value, and 4th value with 6th (if they exist).'
: [1, 0.0]
? '[c217] place the odd index elements in ascending order at the front and the even index elements in descending order at the back.'
: [1, 0.0]
? '[c217] place the smallest element at the first place, the second smallest element at the third place, and the third smallest element at the second place.'
: [1, 0.125]
? '[c217] rearrange the elements according to the following rule: the lowest two elements move to the front in increasing order, the highest two elements move to the end in decreasing order, the remaining numbers stay in the same order.'
: [1, 0.25]
? '[c217] rearrange the list by putting the smallest and the largest number at first two places and then follow the original order of the rest of the list.'
: [1, 0.0]
? '[c217] rearrange the order of elements, such that the new list contains: the second smallest, smallest, second largest, third smallest, third largest, fourth smallest, and so on until all elements are listed.'
: [1, 0.125]
'[c217] rotate the elements two positions to the left.': [1, 0.0]
? '[c217] shuffle the elements in the list such that every odd-indexed number moves one step forward and every even-indexed number moves one step back.'
: [1, 0.125]
? '[c217] shuffle the list such that the last element moves to the beginning, and the first and second elements exchange places.'
: [1, 0.0]
? '[c217] sort the elements in following order: numbers ending in 1, then in 2, and so on upto numbers ending in 9, and finally 0, if any.'
: [1, 0.25]
'[c217] sort the elements in the pattern ''Odd - Even - Lowest - Highest - First - Last''.': [1, 0.0]
'[c217] sort the first three and last three numbers from lowest to highest, keeping the middle elements unchanged.': [1, 0.0]
? '[c217] sort the first three elements and the last three elements in ascending order while leaving elements in the middle as they are.'
: [1, 0.0]
'[c217] sort the list but with every third element (0-indexed) kept in its original place.': [1, 0.0]
? '[c217] sort the list in a certain pattern: the elements from the third to the last are sorted in ascending order and placed at the beginning of the list, the first element is placed in the middle of the list, the second and the last elements are placed at the end of the list, also in ascending order.'
: [1, 0.125]
'[c217] sort the list in ascending order except for the third and last element.': [1, 0.125]
? '[c217] sort the list such that the smallest and largest elements are at the two ends, and all other numbers are in the middle in descending order.'
: [1, 0.125]
'[c217] sort the numbers from smallest to largest, excluding the last two numbers of the original list.': [1, 0.125]
'[c217] sort, where the even index numbers ascending and odd numbers descending.': [1, 0.0]
'[c218] condense all same consecutive numbers into one number.': [1, 0.0]
'[c218] generate a list that contains exactly 3 copies of any number which appears at least 3 times in the original list.': [1, 0.0]
'[c218] generate a list that only contains the first element of the list, repeated as many times as it appears in the list.': [1, 0.125]
'[c218] generate a list with only the first number.': [1, 0.125]
'[c218] keep only distinct, sequential repeated numbers, removing any duplicates following the sequence.': [1, 0.0]
'[c218] keep only the first and last occurrence of the first element in the list.': [1, 0.25]
'[c218] keep only the repeated numbers from the list and remove the rest.': [1, 0.125]
'[c218] keep only the repetitive elements until the first non-repetitive element shows up.': [1, 0.25]
'[c218] keep only those elements that occur maximum number of times.': [1, 0.25]
'[c218] keep the repeating elements from the start and discard the rest.': [1, 0.25]
'[c218] keep the repeating number and discard the rest.': [1, 0.375]
? '[c218] output a list with only the first element of the list repeated for as many times as it appears in the original list.'
: [1, 0.125]
'[c218] output the first half of list repetitions.': [1, 0.375]
'[c218] pick out the repeating number pairs from the list.': [1, 0.375]
'[c218] retain all consecutive duplicates of any numbers that occur thrice or more.': [1, 0.125]
'[c218] retain all repeating numbers in the array.': [1, 0.25]
'[c218] retain only elements that appear more than twice.': [1, 0.5]
'[c218] retain the sequences of the same number.': [1, 0.125]
'[c218] return a list that consists only of the most frequent element in the initial list.': [1, 0.25]
'[c218] return only the most frequent number or numbers in the list.': [1, 0.0]
'[c219] generate a list comprised of the first element, every third element from that, and the last element.': [1, 0.0]
"[c219] keep each element that isn\u2019t naturally divisible by 3.": [1, 0.0]
'[c219] keep elements in the positions that are divisible by 3, starting from 0.': [1, 0.0]
'[c219] keep every 2nd element and the first element, and the last element if it is even.': [1, 0.75]
'[c219] keep every alternate element starting from the first element.': [1, 0.625]
'[c219] keep every alternate element starting with the first element.': [1, 0.625]
'[c219] keep every second element starting from the first element.': [1, 0.625]
'[c219] keep every second number from the original list.': [1, 0.375]
'[c219] keep every second number in the sequence.': [1, 0.5]
'[c219] keep only elements which are less than 10 or greater than 50.': [1, 0.0]
'[c219] keep only the elements in the positions of multiples of 3 (starting from 0).': [1, 0.0]
'[c219] keep only the numbers that their last digit is not a 0.': [1, 0.0]
'[c219] keep the 1st, 3rd, 5th, and 7th elements.': [1, 0.25]
'[c219] keep the elements at the odd indices (considering that the indexing starts at 0).': [1, 0.375]
'[c219] keep the elements at the odd indices.': [1, 0.5]
'[c219] remove all elements that are less than 10 and not multiples of 9.': [1, 0.0]
'[c219] remove the elements which are not multiples of 3 or 4 or 5.': [1, 0.0]
'[c219] retain alternate elements starting from the first element.': [1, 0.75]
'[c219] retain the elements which at the ones place have a digit from 0 to 4.': [1, 0.0]
'[c219] select an element if its position is even or if the number is odd.': [1, 0.5]
'[c220] double each element in the list.': [3, 1.5]
'[c220] double each element.': [1, 0.625]
'[c220] double the elements.': [1, 0.5]
'[c220] multiply each element by 2 and add 2.': [1, 0.0]
'[c220] multiply each element by 2, or double the given set.': [1, 0.5]
'[c220] multiply each element by 2.': [3, 1.25]
'[c220] multiply each element by 3.': [5, 2.25]
'[c220] multiply each number by 3.': [2, 0.75]
'[c220] multiply the elements by 3.': [1, 0.5]
'[c220] triple each element.': [2, 0.75]
'[c221] add 3 times the second element to the last element, then subtract 2.': [1, 0.0]
'[c221] add all elements divisible by 2.': [1, 1.0]
'[c221] add all the digits from 0-9 found in the list.': [1, 0.0]
'[c221] add up all the single digit numbers and multiply by 4.': [1, 0.0]
'[c221] add up the ones and tens places of all the numbers in the list and output the sum within a list.': [1, 0.0]
'[c221] calculate the sum of all the digits of the numbers divided by 10 (ignoring fractions).': [1, 0.0]
'[c221] calculate the sum of element at the first, middle, and last position.': [1, 0.0]
'[c221] calculate the sum of the single digit numbers.': [1, 0.0]
'[c221] generate a list of the sum of digits that are lesser than 10.': [1, 0.0]
'[c221] generate the sum of the remaining numbers after ignoring the first two largest numbers.': [1, 0.0]
'[c221] subtract the sum of 1, 2, 3, 4, 5, 6, 7, 8, and 0 from the sum of all the elements in the list.': [1, 0.0]
'[c221] sum all elements divided by 2, then subtract all odd numbers and add all even numbers.': [1, 0.125]
'[c221] sum all even numbers.': [1, 1.0]
'[c221] sum all numbers in the list that are less than 30.': [1, 0.0]
'[c221] sum all the elements and subtract the sum by their count.': [1, 0.0]
'[c221] sum the elements divisible by 3.': [1, 0.125]
'[c221] sum the elements from the list that are greater than 40.': [1, 0.0]
'[c221] sum the numbers at the positions 0, 2, 4, 6, and 8 if existent.': [1, 0.0]
'[c221] sum up all the numbers whose last digit is less than 5.': [1, 0.0]
'[c221] sum up the elements which are less than 10.': [1, 0.0]
'[c222] calculate the length of the list and replace every element in the given list with this length.': [1, 1.0]
'[c222] count the number of elements in the list and then replace all elements with that count.': [1, 1.0]
'[c222] count the number of even numbers in the list and replace all elements with that count.': [1, 0.125]
'[c222] replace all elements of the list with the count of elements in the list.': [1, 1.0]
'[c222] replace all elements with the count of digits of the first element.': [1, 0.0]
'[c222] replace all elements with the count of elements in the list.': [2, 2.0]
'[c222] replace all elements with the length of the input list.': [1, 1.0]
'[c222] replace all elements with the length of the list.': [1, 1.0]
'[c222] replace all elements with the number of elements in the list.': [2, 2.0]
'[c222] replace all numbers with the count of elements.': [1, 1.0]
'[c222] replace all the elements with the length of the list.': [1, 1.0]
'[c222] replace all the numbers with the number of elements in the list.': [1, 1.0]
'[c222] replace each element with number of digits it has.': [1, 0.0]
'[c222] replace each element with the count of elements in the list.': [1, 1.0]
'[c222] replace each element with the current position count of the list starting from 1.': [1, 0.125]
? '[c222] replace each element with the number of divisors of the highest number in the list, excluding the number itself and 1.'
: [1, 0.0]
'[c222] replace every element with the count of digits in the largest number in the list.': [1, 0.125]
'[c222] replace the numbers with the count of numbers in the given list.': [1, 1.0]
'[c223] reverse each digit in the number starting from the second number till the second last number.': [1, 0.0]
'[c223] reverse each element''s digits.': [1, 0.25]
'[c223] reverse each individual number.': [1, 0.125]
'[c223] reverse each number if it''s more than a single digit.': [1, 0.125]
'[c223] reverse each two-digit number and replace single-digit numbers with number*10.': [1, 1.0]
'[c223] reverse the digits of each element except the last one.': [1, 0.125]
'[c223] reverse the digits of each element in array except if the element is divisible by 11.': [1, 1.0]
'[c223] reverse the digits of each element in the array.': [1, 0.875]
'[c223] reverse the digits of each element in the list.': [2, 2.0]
'[c223] reverse the digits of each element.': [1, 0.25]
'[c223] reverse the digits of each number in the list.': [1, 0.0]
'[c223] reverse the digits of each number, if a number has only one digit, multiply it by 10.': [1, 1.0]
'[c223] reverse the digits of each number, if a number is a single digit then a zero is added in front.': [1, 1.0]
'[c223] reverse the digits of each number.': [2, 0.375]
'[c223] reverse the digits of the elements.': [1, 0.125]
'[c223] reverse the digits.': [1, 1.0]
'[c223] swap the numbers of each digit and concatenate a 0 at the end of single-digit numbers.': [1, 1.0]
'[c223] swap the tens and ones place of each number.': [1, 1.0]
'[c224] generate a new list swapping the first and the second half.': [1, 0.0]
'[c224] move the last two elements to the start and remaining elements in the original order.': [1, 0.0]
'[c224] pick the numbers 6, 5, 1 in order if they present, followed by remaining numbers in ascending order.': [1, 0.0]
'[c224] place the odd numbers before the even numbers in the reverse order.': [1, 0.0]
? '[c224] re-order the elements based on their position and value, with smallest element in the beginning followed by the largest, third smallest, third largest, and so on.'
: [1, 0.0]
? '[c224] rearrange the first 4 elements and the last 4 elements, while leaving the middle elements in their original positions.'
: [1, 0.125]
? '[c224] rearrange the list with the same number of elements but in the order of: last, second last, second, first, third, fourth element and so on.'
: [1, 0.0]
'[c224] reverse every 3 elements.': [1, 0.0]
'[c224] reverse the elements.': [1, 0.0]
'[c224] reverse the list with odd indices only.': [1, 0.0]
'[c224] reverse the order after sorting the first half entries ascendingly and the second half descendingly.': [1, 0.0]
'[c224] rotate the elements to the left three times.': [1, 0.0]
? '[c224] shift the elements to the left, with the first element moving to the position after the third element, and the last element moving to the first position.'
: [1, 0.0]
? '[c224] sort the elements in a specific way: first, all elements that are single digits in ascending order, then all elements that are double digits should be ordered in descending order.'
: [1, 0.0]
? '[c224] sort the list in a specific way: the value in the middle of the sorted list is moved to the front, followed by the element at the start but in the order from least to greatest, and end of the given list in the order from greatest to least.'
: [1, 0.0]
'[c224] swap the first and last elements, third and fifth, and so on.': [1, 0.25]
'[c224] swap the first and second half of the list, keeping the order of the halves intact.': [1, 0.0]
'[c224] swap the first three and last three elements, and leave the middle portion (if any) unchanged.': [1, 0.0]
'[c224] switch the first and last elements, second and second last elements and so on.': [1, 0.0]
'[c224] switch the first and third element, and the second and last element.': [1, 0.0]
'[c225] delete the first two elements and the last element.': [1, 0.625]
'[c225] extract the elements between the first zero and the last single digit number.': [1, 0.0]
'[c225] filter out any numbers less than or equal to 10 or greater than or equal to 90.': [1, 0.0]
? '[c225] generate a list of numbers starting from the first one that''s higher than or equal to 22 and ending before the first number that''s 4 or smaller.'
: [1, 0.0]
'[c225] generate a list starting from the third element till the second last one.': [1, 0.5]
'[c225] get the elements from third through eighth.': [1, 0.5]
'[c225] include only the elements from the third element to the end.': [1, 0.0]
'[c225] keep all the elements after the first zero inclusive in the list.': [1, 0.125]
'[c225] keep only the elements located in an odd position, not including the first and last elements.': [1, 0.75]
'[c225] keep only the elements that are in positions 3, 4, and 5.': [1, 0.125]
'[c225] keep the elements after (and including) the first element that ends with "9".': [1, 0.0]
'[c225] keep the elements after (and including) the first number that is greater than or equal to 10.': [1, 0.0]
'[c225] remove the first and the last two elements of the list.': [1, 0.625]
'[c225] remove the first two and last two elements.': [2, 1.75]
'[c225] remove the first two elements and control the process once an element equals 8 or less.': [1, 0.125]
'[c225] remove the first two elements and keep the rest of the list until an element is found that is divisible by 7.': [1, 0.375]
'[c225] remove the first two elements and the last element from the list.': [1, 0.25]
'[c225] return the elements from the third to the end.': [1, 0.0]
'[c225] take elements starting from index 2 and stop before the last 2 elements.': [1, 0.5]
'[c226] filter elements greater than or equal to the second number or equal to the first number.': [1, 0.0]
'[c226] generate a list of elements in every alternate index 1, 3, 5, etc.': [1, 0.0]
'[c226] generate a list of elements that are preceding the number 2.': [1, 0.25]
'[c226] get the list of elements between the second occurrence of the smallest number to the end.': [1, 0.0]
'[c226] keep elements from the first element equal to 2, 3, 0, or 1.': [1, 0.0]
'[c226] keep elements in the list if the next element is smaller than or equal to the current one.': [1, 0.0]
'[c226] keep elements in the list that are above 3 and not primes.': [1, 0.125]
'[c226] keep only the consecutive numbers with the same units digit.': [1, 0.0]
'[c226] keep the elements between the first occurrence of 4 or 5 and the last occurrence of 8 or 9.': [1, 0.125]
'[c226] keep the odd-indexed elements starting from index 1.': [1, 0.0]
'[c226] omit elements that are smaller than the last and second last element.': [1, 0.0]
'[c226] remove 1, 2, 3, and 5 from the list.': [1, 0.0]
'[c226] remove all numbers that are followed by other numbers that are not the multiplication of 2 or 3.': [1, 0.0]
'[c226] remove all numbers until the next number is higher than the current one.': [1, 0.0]
'[c226] remove the first and last numerical elements, and continuing to remove them until a number divisable by 4 is left.': [1, 0.125]
'[c226] remove the first, last and any middle repeating elements if such exist.': [1, 0.125]
? '[c226] return a list of elements after removing the first and last occurrence of unique numbers and if the number is recurring then return the sequence till the last recurring number.'
: [1, 0.0]
'[c226] return all duplicates in the array.': [1, 0.0]
'[c226] return the first sequence of repeating numbers.': [1, 0.125]
? '[c226] return the sublist starting from the first element that''s not smaller than its previous until the first element that''s smaller than its previous.'
: [1, 0.0]
'[c227] interleave the elements in the list dropping duplicate values.': [1, 1.0]
'[c227] keep the first and last element of each unique number and remove any other duplicates.': [1, 0.375]
? '[c227] keep the first and last elements in their places, remove all duplicate values, and if size is more than 2 then reverse the values between them.'
: [1, 0.0]
'[c227] keep the first and the last element in their position and reverse the order of the rest.': [1, 0.0]
? '[c227] move first element to the start, last element to the second place, second element to the third place, second last element to the fourth place, and so on.'
: [1, 0.75]
'[c227] move the last two elements to the second and fourth position.': [1, 0.375]
? '[c227] place the first element first, the last element second, and then place the rest of the lists besides the first and last elements in reverse order.'
: [1, 0.25]
? '[c227] place the last element in the second position, remove any duplicates from the list, and then return the original list with the changes made.'
: [1, 0.5]
? '[c227] remove duplicate elements and rearrange the elements in descending order, except for the first element which is kept the same.'
: [1, 0.375]
? '[c227] replace the last few elements with the first few elements and remove duplicates, but keep the order between each unique number.'
: [1, 1.0]
'[c227] replace the second and second last elements in the list.': [1, 0.125]
'[c227] replace the second number with the last number, and the second last number with the second number.': [1, 0.0]
? '[c227] retain the first occurrence of each element and eliminate subsequent duplicates, then retaining the first and last number at their position and swapping the rest.'
: [1, 1.0]
? '[c227] reverse the pairs from the beginning and the end of the list, leaving the series as it is in the case of an odd number of elements.'
: [1, 0.5]
? '[c227] sort the list in a way that keeps the first element at the beginning, the last element as the second, and the rest of the unique elements arranged in descending order.'
: [1, 0.125]
'[c227] swap the first and last element, and the second and second to last element etc.': [1, 0.125]
'[c227] swap the first and last elements and the third and sixth elements if they exist.': [1, 0.0]
'[c227] swap the second element to the second last position.': [1, 0.125]
'[c227] take the first and last unique elements of a list and place them at the beginning and end, respectively.': [1, 0.125]
'[c227] take the first element and the last element and omit repeating elements.': [1, 0.625]
? '[c228] assign each unique element starting from 1, and then for each occurrence of the element increase its assigned value by 1.'
: [1, 1.0]
'[c228] count repetitive elements in a sequence and replace them with their corresponding count.': [1, 1.0]
'[c228] count the number of recurring numbers in order of their appearance.': [1, 1.0]
? '[c228] count the numbers of instances of each value in the list, returning the order of appearance each time the value appears.'
: [1, 1.0]
'[c228] count the recurrence of each number in sequence.': [1, 1.0]
'[c228] enumerate the occurrence of each number in order.': [1, 1.0]
'[c228] replace a repeated number with the count of its previous appearances in the list plus one.': [1, 1.0]
'[c228] replace each element of the list with the count of its occurrence up to that point in the list.': [1, 1.0]
'[c228] replace each element with the count of the element''s occurrence so far.': [1, 1.0]
'[c228] replace each instance of repeated numbers with the order in which they appear repeated.': [1, 1.0]
'[c228] replace each number with the number of times it has occurred in the list up till its position.': [1, 1.0]
'[c228] replace each occurrence of a number by a 1-based index of its appearance.': [1, 1.0]
'[c228] replace each occurrence of a number with its occurrence count.': [1, 1.0]
'[c228] replace each occurrence of the most frequent number with an increasing sequence starting at 1.': [1, 0.875]
'[c228] replace each repeating number with its subsequent occurrence number in the list.': [1, 0.875]
'[c228] replace each unique integer in a list with a corresponding number in an ascending order from 1 to 4.': [1, 1.0]
? '[c228] replace each unique number with 1, then for each additional occurrence of that number in chronological sequence, increase that number by 1.'
: [1, 1.0]
'[c228] replace every number with a counter that increases each time the number is encountered.': [1, 1.0]
? '[c228] replace identical numbers in a sequence with increasing numbers from 1 to 4 in a order and then cycle back to 1 when reached to 4.'
: [1, 0.875]
'[c228] replace the elements with the count of occurrences up to that element.': [1, 1.0]
? '[c229] create a list that only includes non-prime numbers that are divisible by the first digit of the original list, in reverse order.'
: [1, 0.0]
'[c229] create a new list with elements that are smaller or equal to 50 and to reverse this list.': [1, 0.0]
'[c229] generate a list of elements that are followed by bigger number in original list in the same order.': [1, 0.5]
? '[c229] return all the elements from the end of the list to the start of the list that are not multiples of the first element.'
: [1, 0.0]
'[c229] return the list in reverse order until a single digit number is reached.': [1, 0.25]
'[c229] reverse every consecutive four elements from the last of the list.': [1, 0.125]
'[c229] reverse only the elements greater than or equal to 9.': [1, 0.0]
'[c229] reverse the elements after every 3 elements.': [1, 0.25]
'[c229] reverse the elements after the last zero.': [1, 0.0]
'[c229] reverse the elements and only keep the numbers that are larger than or equal to 30.': [1, 0.125]
'[c229] reverse the elements in the list and keep only elements lesser than or equal to 58.': [1, 0.0]
'[c229] reverse the elements up to a prime number.': [1, 0.0]
'[c229] reverse the elements, excluding multiple of 6 and 8.': [1, 0.0]
'[c229] reverse the list and keep elements from the first number which is under 10 (inclusive) to the end.': [1, 0.0]
'[c229] reverse the list and remove all numbers less than 10.': [1, 0.0]
'[c229] reverse the list and remove any elements that are multiples of 10, then return the new list.': [1, 0.0]
'[c229] reverse the list and remove elements below 10.': [1, 0.0]
'[c229] reverse the list and remove elements that are multiples of 5.': [1, 0.0]
'[c229] reverse the list and remove every third value starting from the second (index 1).': [1, 0.0]
'[c229] reverse the order of all the numbers in the list divisible by 2 or 5.': [1, 0.0]
? '[c230] create a range from the first to the second number in increments of 2, if the first number is smaller than the second.'
: [1, 0.25]
'[c230] create a sequence from the first to last element in the list, incremented by 2.': [1, 0.625]
'[c230] generate a list from the smallest to the largest given number, counting by 2s.': [1, 1.0]
'[c230] generate a list of all even numbers from the smallest to the largest number.': [1, 0.25]
'[c230] generate a list of integers from the smallest to the largest one by 2.': [1, 1.0]
'[c230] generate a list of numbers between the first and last integers inclusive increasing by 2.': [1, 1.0]
'[c230] generate a list of numbers between the smallest and the largest numbers in a given list in steps of 2.': [1, 1.0]
'[c230] generate a list of odd ascending numbers between the smallest and largest values, inclusive.': [1, 1.0]
'[c230] generate a list of odd numbers between (and including) the smallest and largest number in the list.': [1, 1.0]
? '[c230] generate a list of odd numbers between first and last numbers if both are the same or a list of even numbers if both are distinct.'
: [1, 0.625]
'[c230] generate a list of odd numbers starting from the last element to the first element.': [1, 0.625]
'[c230] generate a list starting from the smallest number in the input up to the largest number, with a step of 2.': [1, 1.0]
'[c230] generate a list with increments of 2, starting from the smallest number to the largest.': [1, 1.0]
'[c230] generate a sequence from the smallest to the largest element in the input list, with a step size of 2.': [1, 1.0]
'[c230] generate a sequence starting with the first element, increasing by 2 until reaching the last element.': [1, 1.0]
'[c230] generate a series of ascending numbers starting with the smallest value ending in the biggest value.': [1, 0.75]
'[c230] generate an array of all integers between the smallest and largest number of the input (inclusive), stepping by 2.': [1, 1.0]
? '[c230] generate an increasing series that starts with the smallest number and ends with the largest number, with an increment of 2.'
: [1, 1.0]
'[c230] generate ascending series from the smallest to the largest number with a step of 2 within the input list.': [1, 1.0]
? '[c230] produce a range of numbers with an increment of 2 starting from the first number until the last if the first number is smaller than the last.'
: [1, 0.875]
'[c231] count and record the occurrence of each number.': [1, 0.375]
'[c231] count the appearance of each number and put these counts in ascending order.': [1, 0.5]
'[c231] count the frequency of each distinct number from least to greatest.': [1, 0.625]
'[c231] count the frequency of each element and replace it with its frequency.': [1, 0.0]
'[c231] count the frequency of each element in the list (from left to right) and return the counts as a list.': [1, 0.0]
'[c231] count the frequency of each number and return those frequencies in a list.': [1, 0.125]
'[c231] count the frequency of each unique number in the list.': [1, 0.125]
'[c231] count the frequency of repeated elements.': [1, 0.25]
'[c231] count the number of distinct elements in the list.': [1, 0.0]
'[c231] count the number of occurences of each element and produce a new list.': [1, 0.125]
'[c231] count the number of repeating elements in the list.': [1, 0.375]
'[c231] count the number of times each number appears.': [1, 0.25]
'[c231] count the number of times each unique value is repeated in the list.': [1, 0.375]
'[c231] count the number of unique numbers and the number of duplicate numbers.': [1, 0.25]
'[c231] count the occurrence of each number in the order they appear.': [1, 0.25]
'[c231] count the occurrences of each number in order and depict the count as list values.': [1, 0.125]
'[c231] count the occurrences of each unique element in the list and return the counts in ascending order.': [1, 0.75]
'[c231] replace each unique element with the frequency of its occurrence in the list.': [1, 0.0]
'[c231] return the frequency of each unique number in the list.': [1, 0.375]
? '[c231] transform the original list into a list indicating how many groups of distinct integers are there along with how many of those groups are repeated in the original list in the order they appear (ascending order of their first appearance).'
: [1, 0.125]
'[c232] add all single digit numbers in the list.': [1, 0.0]
'[c232] add the digits of the second number then subtract the digits of the first number from the result.': [1, 0.0]
'[c232] average all the values and round to the nearest integer.': [1, 0.875]
'[c232] calculate the average of numbers and return the floor value.': [1, 1.0]
'[c232] calculate the mean of the list, round it down and subtract 1.': [1, 0.875]
'[c232] compute the mean of the numbers modulo 10, i.': [1, 0.25]
'[c232] divide the sum of the numbers by 3 and round up to the nearest integer.': [1, 0.125]
'[c232] find the average of the first and last element of the list, rounded down.': [1, 0.0]
'[c232] generate a list with the second smallest element.': [1, 0.0]
'[c232] subtract the second element from the sum of the third and fourth elements.': [1, 0.0]
'[c232] subtract the second element from the third.': [1, 0.0]
'[c232] subtract the second number from the third number.': [1, 0.0]
'[c232] subtract the smallest number in the list from the largest number in the list.': [1, 0.0]
'[c232] subtract the sum of last two digits of each element in the list from 100.': [1, 0.0]
'[c232] subtract the sum of the last three numbers from the first number.': [1, 0.0]
'[c232] sum all elements with index divisible by 2 (or index starting from 0), then subtract 8.': [1, 0.0]
'[c232] sum up the last two digits of the first number and the last digit of the second number.': [1, 0.0]
'[c232] take the average of the smallest and largest numbers in the list.': [1, 0.125]
'[c232] take the last two digits of the first number, subtract the second number, and add the last number.': [1, 0.0]
? '[c232] take the sum of all the digits in each number in the list, and output a list with a single number that is the average of all those numbers.'
: [1, 0.0]
'[c233] count how many times each number appears and return the counts in order.': [1, 1.0]
'[c233] count occurrences of each unique element in order of appearance.': [1, 1.0]
'[c233] count repeated occurrences of the same value in sequence.': [1, 0.375]
'[c233] count the consecutive appearances of the same number.': [1, 0.375]
'[c233] count the frequency of each distinct element in its first place of occurrence.': [1, 0.875]
'[c233] count the frequency of each element in order of their appearance and remove duplicates.': [1, 1.0]
'[c233] count the frequency of each number and return the counts.': [1, 0.75]
'[c233] count the frequency of each number in order.': [1, 0.75]
'[c233] count the number of occurrences of each unique element (in the order they appear) in the list.': [1, 0.75]
? '[c233] count the occurrence of each unique element and write it in the order they appear without repeating the same number.'
: [1, 1.0]
'[c233] count the occurrence of each unique element in the list.': [1, 0.875]
'[c233] count the occurrences of each distinct element in the list ordered by their first appearance.': [1, 1.0]
'[c233] count the occurrences of each element in the list sequentially and represent it as an array.': [1, 0.5]
'[c233] count the occurrences of each unique number in the list and represent them in the order of appearance.': [1, 0.5]
'[c233] count the occurrences of each unique number in the list and show them in the order they first appeared.': [1, 0.75]
'[c233] count the occurrences of each unique number in the list.': [1, 1.0]
'[c233] count the occurrences of each unique value in the list in order of their appearance.': [1, 1.0]
'[c233] count the same elements repeatedly and ignore the other different elements.': [1, 0.25]
'[c233] find the frequency of elements in descending order of their first occurrence.': [1, 1.0]
'[c233] replace consecutive same integers with their count.': [1, 0.25]
? '[c234] count each number''s occurrence and only keep those numbers that appear more than twice and reorganize them in the original order they appear.'
: [1, 0.5]
? '[c234] count the occurrences of each number, then the distinct numbers remain in the order they appear and keep their first two occurrences, any subsequent occurrences are removed.'
: [1, 0.125]
'[c234] display the repeating numbers once and non-repeating numbers are removed.': [1, 0.625]
? '[c234] generate a list that includes every unique element of the original list, repeated once for each consecutive group of repeated instances in the original list.'
: [1, 0.0]
'[c234] keep all instances of any number that occurs exactly three or more times.': [1, 0.25]
'[c234] keep only the items that are repeated more than twice.': [1, 0.375]
'[c234] keep only the most frequent element(s) in the list.': [1, 0.25]
'[c234] keep the duplicates but remove the excess duplicates that appear more than three times.': [1, 0.125]
'[c234] keep the elements that appear more than once and remove the last repeated element.': [1, 0.625]
'[c234] keep those numbers which appear at least twice in a sequence, also removing the last duplicate.': [1, 0.875]
'[c234] maintain consecutive duplicates and remove non-duplicates or non-consecutive duplicates.': [1, 0.375]
'[c234] make a sequence of the first two different numbers that appear in the input sequence.': [1, 0.125]
'[c234] remove duplicates while retaining the leftmost occurrence of a number.': [1, 0.125]
'[c234] remove the first occurrence of each unique number.': [1, 0.375]
'[c234] remove the first unique element in the list, preserving the order of the remaining elements.': [1, 0.25]
'[c234] repeat each number in the list the same number of times as it appears, but only once if it appears more than once.': [1, 0.625]
'[c234] retain the numbers which are repeated at least twice consecutively, and keep the sequence as is.': [1, 0.25]
'[c234] return a list of repeated elements excluding the last occurrence.': [1, 0.375]
'[c234] return a list of repeated elements in a list, appearing in the first order they repeat in.': [1, 0.125]
'[c235] create a descending sequence starting from the first element to next distinct element.': [1, 1.0]
? '[c235] create a list starting from the first element incrementing by one until it surpasses the second element, then reverse the process until it reaches the third element.'
: [1, 1.0]
? '[c235] create a range of values starting from the first input value to the third (including both) in steps of 1 reducing or increasing depending on the relation between first and third value, or repeating this operation multiple times if there''re more numbers.'
: [1, 0.375]
'[c235] create a sequence of numbers from first to the second last element incrementing or decrementing by 1.': [1, 1.0]
'[c235] create a sequential list of number from the first number until it reaches the next number in the original list.': [1, 1.0]
'[c235] create an array from the first to the last element, including all numbers in between into the list.': [1, 1.0]
? '[c235] fill the gap between the first and last element with a sequence of descending integers including the boundary values.'
: [1, 0.375]
? '[c235] fill the gaps between the first and second elements with numbers in ascending order, and then if there is a third element, do the same in the descending order.'
: [1, 0.375]
'[c235] fill the gaps in descending or ascending sequence if the sequence has gaps.': [1, 1.0]
'[c235] generate a list from the first number to the last number in ascending or descending order and all unique numbers.': [1, 1.0]
'[c235] generate a range of numbers between the distinct numbers in the list (inclusive) going up or down as necessary.': [1, 0.625]
'[c235] generate a sequence between first and last number inclusive, irrespective of their order.': [1, 0.875]
? '[c235] generate all elements within the range of the smallest and largest number in the list, in both ascending and descending order.'
: [1, 0.25]
? '[c235] generate and return a list starting and ending with the given first and last elements and containing all the integers in between.'
: [1, 0.875]
'[c235] generate numbers incrementally/decrementally starting from the first number to the last.': [1, 1.0]
'[c235] generate the sequence from lesser number to higher number found in the list skipping duplicates.': [1, 0.125]
'[c235] generate the sequence of numbers from the highest to the lowest in the list.': [1, 0.25]
? '[c235] keep the first number, then add every possible integer between it and the second number (in ascending order if first is less than the second, decreasing if the second is smaller), and repeat this for every consecutive pair of numbers, excluding duplicated numbers.'
: [1, 0.875]
'[c235] list all the numbers between the pairs in the list in descending order.': [1, 0.875]
? '[c235] replace all duplicate values in the list with the range of values from the first element to the second element, then reverse that new range.'
: [1, 0.625]
'[c236] divide all even numbers by 2 and remove the odd numbers.': [1, 1.0]
'[c236] divide all even numbers by 2.': [1, 1.0]
? '[c236] divide by 2 even numbers, if a number end with 5 or 0 keep the digit at the start, and keep the digit at the end for odd numbers.'
: [1, 0.0]
'[c236] divide by 2 the numbers divisible by 2.': [1, 1.0]
'[c236] divide each element by 2 if it is even, else to return half of the number after subtracting 1.': [1, 0.0]
'[c236] divide each even number by 2 and ignore odd numbers.': [1, 1.0]
'[c236] divide each number by 2, and only keep the result if it''s a whole number without decimals.': [1, 0.0]
'[c236] divide every number by 2 if it is even number else ignore it.': [1, 0.875]
'[c236] filter the even numbers and divide them by 2.': [1, 1.0]
'[c236] generate a list containing half of every odd numbered element.': [1, 0.0]
'[c236] generate a list of elements that are even, then divide them by 2.': [1, 1.0]
'[c236] generate a list of half the number if it is even, otherwise ignore it.': [1, 1.0]
'[c236] half odd numbers, ignore even numbers and remove last number from the list.': [1, 0.0]
'[c236] half the elements and include only even dividends.': [1, 0.625]
'[c236] halve the elements.': [1, 0.0]
'[c236] keep only the even numbers and divide them by 2.': [1, 1.0]
'[c236] produce a list of halfs of the even numbers.': [1, 1.0]
'[c236] replace every element with half of its value if it''s even, else ignore the number.': [1, 1.0]
'[c236] select those that are divisible by 2 and divide them.': [1, 1.0]
'[c236] take only the even numbers from the list and then divide each by 2.': [1, 1.0]
'[c237] add consecutive elements until the sequence resets (the next element is less than or equal to the previous).': [1, 0.0]
'[c237] add each pair of consecutive numbers.': [1, 0.0]
'[c237] add each two consecutive numbers in list.': [1, 0.0]
'[c237] add every two elements, starting with the first two, and generating a new list.': [1, 0.0]
'[c237] adding numbers until there is a change from the previous number.': [1, 0.0]
'[c237] compute cumulative sums of elements and representing each distinct sum value once.': [1, 0.0]
'[c237] decrease the list size to half and add consecutive elements (odd indices added to following even indices).': [1, 0.0]
? '[c237] generate a list with the first element of the original list, and then for each following element, add it to the previous element and append it to the list.'
: [1, 0.0]
'[c237] group odd-indexed elements together and sum them up.': [1, 0.0]
'[c237] keep the first element and then add the next element to the previous total.': [1, 0.0]
? '[c237] keep the first number, then add the following ones to produce a new number, and continue this until the last number.'
: [1, 0.0]
? '[c237] reduce consecutive repeat elements to a single instance, and if a repeat sequence is found, its elements are summed to form a new element.'
: [1, 0.0]
'[c237] reduce the list by pairing each two consecutive elements and summing them up.': [1, 0.0]
'[c237] reduce to unique elements and for each element, add all preceding values for the final count of that element.': [1, 0.125]
'[c237] sum adjacent elements, excluding duplicates.': [1, 0.0]
'[c237] sum all the consecutive similar numbers into one number.': [1, 0.0]
'[c237] sum consecutive elements until the number 8 is reached.': [1, 0.0]
'[c237] sum consecutive pairs of numbers and keep the original number if it is the same as the next.': [1, 0.0]
'[c237] sum every two consecutive elements.': [1, 0.0]
'[c237] sum the elements until the result changes.': [1, 0.0]
'[c238] keep all elements except for the most frequently repeated one.': [1, 0.5]
? '[c238] keep only the distinct values and the first occurrence of the smallest number and the last occurrence of the largest number.'
: [1, 0.375]
'[c238] keep only the elements which are not repeated either before or after their position.': [1, 1.0]
'[c238] keep the numbers that aren''t repeated consecutively.': [1, 0.125]
'[c238] remove all but the first and the last occurrence of each number.': [1, 0.875]
'[c238] remove all duplicate elements.': [2, 1.375]
'[c238] remove all repeating elements leaving only the unique ones.': [1, 0.75]
'[c238] remove all repeating elements, keeping only unique values that appear once.': [1, 1.0]
'[c238] remove all repeating elements.': [1, 1.0]
'[c238] remove all the repeating elements except for the first appearance.': [1, 0.125]
'[c238] remove any number that appears more than once in the list.': [1, 1.0]
'[c238] remove any numbers that appear more than once.': [1, 1.0]
'[c238] remove duplicates from the list in the order they appear.': [1, 0.875]
'[c238] remove elements that are repeated more than twice.': [1, 0.75]
'[c238] remove repeated elements.': [2, 1.625]
'[c238] remove the duplicates and keep the unique elements.': [1, 0.875]
'[c238] remove the numbers that appear more than once.': [1, 1.0]
'[c238] return elements that do not repeat.': [1, 1.0]
'[c239] check if the list contains a 3 and return a list containing a single element, either 1 (if 3 is present) or 0.': [1, 0.375]
'[c239] check if the list contains at least two identical non-zero elements.': [1, 0.625]
'[c239] count the amount of times the most frequent number appears.': [1, 0.25]
'[c239] count the most frequent element in the list, if there are no elements or all elements are unique, return 0.': [1, 0.625]
'[c239] count the number of ''3''s in the list.': [1, 0.5]
'[c239] count the number of duplicate elements in the list.': [1, 0.75]
'[c239] count the number of instances of the number 3.': [1, 0.375]
'[c239] count the number of multiples of 3 in the list.': [1, 0.25]
'[c239] count the number of pairs of same consecutive numbers.': [1, 0.625]
'[c239] count the number of repeated elements in the list.': [1, 0.875]
'[c239] count the number of repeating element in the list.': [1, 0.875]
'[c239] count the number of repeating elements in the list.': [1, 0.75]
'[c239] count the number of repeating numbers within the list and output that number wrapped in a list.': [1, 0.875]
'[c239] count the number of the most frequent element.': [1, 0.125]
'[c239] count the numbers repeating more than once in the list.': [1, 0.75]
'[c239] count the numbers that occur more than once.': [1, 0.75]
'[c239] count the occurrence of the number 96.': [1, 0.625]
'[c239] determine if the first number appears again at the end of the list.': [1, 0.5]
'[c239] find how many times the smallest number appears.': [1, 0.125]
'[c239] return the number of appearance of the smallest element in the list.': [1, 0.25]
'[c240] count how many times the last element appears in the list.': [1, 0.375]
'[c240] count how many times the most frequent non-repeating number appears.': [1, 1.0]
'[c240] count the amount of pairs of the same number in a row.': [1, 0.25]
'[c240] count the distinct numbers repeat times.': [1, 0.0]
'[c240] count the most frequent number in a list and display the count.': [1, 0.875]
'[c240] count the most frequent number.': [1, 0.875]
'[c240] count the most frequently occurring number in the list.': [1, 0.875]
'[c240] count the most repeated number.': [1, 0.875]
'[c240] count the number of distinct numbers in the list, plus 1.': [1, 0.0]
'[c240] count the number of elements that appear more than once.': [1, 0.0]
'[c240] count the number of pairs of identical consecutive digits and return this count as a list.': [1, 0.375]
'[c240] count the number of times the most frequently appearing element appears in the list.': [1, 1.0]
'[c240] find the number of different elements.': [1, 0.0]
? '[c240] find the sum of the first and last digits in the list (as numbers not coordinates) and return it as a single-element list.'
: [1, 0.0]
'[c240] return a list with a single element, 2.': [1, 0.375]
'[c240] return a list with a single element, which is the last digit of the first number in the input list.': [1, 0.375]
'[c240] return the number of distinct repeat numbers.': [1, 0.5]
'[c240] select the most frequent number.': [1, 0.375]
'[c240] sum the last digits of all items in the list and return it in a list.': [1, 0.125]
'[c241] count how many digits in the list are less than 7.': [1, 0.0]
'[c241] count how many numbers in the list can be divided evenly by 3.': [1, 0.125]
'[c241] count how many single digit numbers there are in the list.': [1, 0.0]
'[c241] count numbers in the set {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} in the list.': [1, 0.0]
'[c241] count the number of ''6'' in the list.': [1, 0.0]
'[c241] count the number of divisors of 6 in the list.': [1, 0.0]
'[c241] count the number of elements in the list that are divisible by 3.': [1, 0.0]
'[c241] count the number of elements smaller than 10.': [1, 0.0]
'[c241] count the number of numbers less than 10.': [2, 0.0]
'[c241] count the number of single digit numbers in the list.': [2, 0.0]
'[c241] count the number of single-digit integers in the list.': [1, 0.0]
'[c241] count the number of single-digit numbers in the list.': [1, 0.0]
'[c241] count the occurrence of digits from 0 to 9 and output the count of least occurrence digit.': [1, 0.0]
'[c241] count the times a number divisible by 3 appears in the list.': [1, 0.25]
'[c241] return a list containing the count of the number 1 in the function input.': [1, 0.0]
'[c241] return a single-element list containing the count of elements that are multiples of 3.': [1, 0.125]
'[c241] return how many items in the list are divisible by 3.': [1, 0.0]
? '[c242] arrange the elements as follows: the smallest three numbers, the largest three numbers, all other numbers in decreasing order.'
: [1, 0.0]
? '[c242] arrange the numbers in the list in sequence from smallest to biggest, ignoring the number following 80s and putting the numbers following 40s at the end.'
: [1, 0.0]
'[c242] move all elements that end with a digit of 1, 4, or 6 to the front, and the rest to the back in the original order.': [1, 0.125]
'[c242] order the first half of the list in ascending order and the second half in descending order.': [1, 0.125]
? '[c242] organize numbers as follows: first the smallest, then the smallest prime number, after that the largest prime number, and at last the largest.'
: [1, 0.0]
? '[c242] rearrange the numbers in a specific order: first the smallest number (that is not a maximum or minimum of the list), next a number that is not minimal or maximal and differs from the first by the maximum possible value, and so on.'
: [1, 0.125]
? '[c242] rearrange the order of the elements in the following sequence: smallest odd number, smallest even number, next smallest odd number, next smallest even number, etc.'
: [1, 0.125]
? '[c242] reorder the elements where even-index elements are sorted in increasing order and odd-index elements are sorted in decreasing order.'
: [1, 0.125]
'[c242] reorder the elements.': [1, 0.125]
'[c242] sort all numbers and then skip every other number starting with the first.': [1, 0.0]
? '[c242] sort the elements in increasing order until the list contains a number bigger than all previously sorted numbers, and then append the rest of the list to the sorted list in the original order.'
: [1, 0.125]
'[c242] sort the first half of the list in ascending order and second half in descending order.': [1, 0.125]
'[c242] sort the first half of the list in ascending order and the second half in descending order.': [1, 0.0]
? '[c242] sort the list according to the following conditions: smallest even number first, then smallest odd number, then by ascending order for the remaining numbers excluding the highest even number which is placed second from the last, and finally the highest odd number at the end.'
: [1, 0.0]
'[c242] sort the list in an increasing order until the mid-point, and from there, a decreasing order.': [1, 0.0]
? '[c242] sort the list in the order of the second smallest and second largest elements, until the penultimate smallest element, followed by the smallest and largest elements.'
: [1, 0.125]
'[c242] sort the list separately in ascending order and descending order for first half and latter half respectively.': [1, 0.0]
? '[c242] sort the list such that all the values that are multiples of 3 come first followed by values ending with a digit 5 and then follows all the other digits.'
: [1, 0.0]
'[c242] sort the numbers into even, odd, and then decreasing order.': [1, 0.0]
? '[c242] take the second lowest, the second highest, the lowest, and the highest number, and in that order, place them at the beginning of the list the rest of the elements follow in their original order.'
: [1, 0.0]
'[c243] count how many single digit numbers there are in each list.': [1, 0.125]
'[c243] count number of single-digit numbers in the list.': [1, 0.125]
'[c243] count the digits from lowest to highest (0-9) in the first number in the sequence.': [1, 0.125]
'[c243] count the instances of numbers in the list less than 10.': [1, 0.0]
'[c243] count the number of digits that are less than 5.': [1, 0.125]
'[c243] count the number of elements from 0 to 9 in the list.': [1, 0.125]
'[c243] count the number of single digit numbers in the list.': [2, 0.25]
'[c243] count the number of single-digit integers.': [1, 0.0]
'[c243] count the number of single-digit numbers in the list.': [2, 0.25]
'[c243] find the count of single-digit numbers.': [1, 0.0]
'[c243] find the index of number 7.': [1, 0.25]
'[c243] find the smallest number in the list that is greater than or equal to 4 and less than or equal to 7.': [1, 0.125]
'[c243] find the smallest number in the list that is larger than 1.': [1, 0.125]
'[c243] pick the fourth element from the list.': [1, 0.125]
'[c243] return a list containing the lowest single digit number in the list.': [1, 0.0]
'[c243] return the list of the 1st single-digit number.': [1, 0.0]
'[c243] take the count of digits 1, 2, 4, 5, 6, and 7.': [1, 0.25]
'[c244] count how many times the number 3 appears in the list.': [1, 1.0]
'[c244] count the frequency of 3 in the list.': [1, 1.0]
'[c244] count the number of ''3'' in the list.': [1, 1.0]
'[c244] count the number of ''3''s in the input list.': [1, 1.0]
'[c244] count the number of 3 in the list.': [2, 2.0]
'[c244] count the number of 3''s in the list and subtract it from 9.': [1, 0.0]
'[c244] count the number of 3''s in the list.': [4, 4.0]
'[c244] count the number of 3''s.': [1, 1.0]
'[c244] count the number of 3s in the list.': [3, 2.875]
"[c244] count the number of 3\u2019s in the list.": [1, 1.0]
'[c244] count the number of the digit 3.': [1, 0.875]
'[c244] count the number of times the number 3 appears in the list.': [1, 1.0]
'[c244] return a list of one element - the number of 3''s in the list.': [1, 1.0]
'[c244] return the last digit of the sum of the numbers in the array.': [1, 0.125]
'[c245] calculate how many times the digit 4 appears on the list.': [1, 0.25]
'[c245] count how many times the smallest number repeats in the list.': [1, 0.375]
'[c245] count the digit frequency of 4.': [1, 0.125]
'[c245] count the frequency of number 4 in the list.': [1, 0.25]
'[c245] count the frequency of the smallest non-zero number in the list.': [1, 0.125]
'[c245] count the number of "4" in a list.': [1, 0.0]
'[c245] count the number of 4 and 6 in the list.': [1, 0.0]
'[c245] count the number of 4 in the list.': [1, 0.125]
'[c245] count the number of 4''s in the list.': [1, 0.125]
'[c245] count the number of 4s and 6s in the list.': [1, 0.25]
'[c245] count the number of 6s in the list.': [1, 0.25]
'[c245] count the number of occurrences of the smallest element.': [1, 0.25]
'[c245] count the number of the digit 6 in the list.': [1, 0.25]
'[c245] count the number of times the lowest element appears in the list.': [1, 0.25]
'[c245] count the occurrences of the number 4 and return a single-element list containing this count.': [1, 0.125]
'[c245] count the occurrences of the number 6.': [1, 0.25]
'[c245] determine how many times does ''6'' appear in the list.': [1, 0.375]
? '[c245] return [0] when there are more even numbers in the list and to return [1] when there are more odd numbers in the list.'
: [1, 0.5]
'[c245] return the count of number 4 in the list.': [1, 0.125]
'[c245] return the number of elements in the list divided by 2 and rounded down.': [1, 0.0]
'[c246] count how many single-digit numbers are in the list.': [1, 0.125]
'[c246] count the elements.': [1, 1.0]
'[c246] count the number of digits in all the numbers and return the count in a list.': [1, 0.25]
'[c246] count the number of distinct numbers in the list.': [2, 1.875]
'[c246] count the number of elements in the list and return that number in a list.': [1, 0.625]
'[c246] count the number of elements in the list and then represent that count as a list.': [1, 0.875]
'[c246] count the number of elements in the list.': [1, 0.875]
'[c246] count the number of numbers that are less than 10.': [1, 0.125]
'[c246] count the number of single-digit numbers and return that count into a list.': [1, 0.0]
'[c246] count the number of single-digit numbers in the list.': [1, 0.0]
'[c246] count the number of unique digits in the list.': [1, 0.5]
'[c246] count the number of unique elements in the list and give it as output.': [1, 1.0]
'[c246] count the number of unique numbers divisible by 2 in the input.': [1, 0.25]
'[c246] count the number of unique numbers in the list.': [1, 1.0]
'[c246] count the numbers in the list that end with the digit 0, 1, 2 or 3.': [1, 0.125]
'[c246] find the largest digit of the largest number.': [1, 0.125]
'[c246] return a list containing the number of unique elements.': [1, 1.0]
'[c246] sum the number of distinct digits in all elements of the list.': [1, 0.375]
'[c246] take the last digit of the last number in the list.': [1, 0.0]
'[c247] generate a list of elements before the first 0 appears.': [1, 1.0]
'[c247] get elements from the list up to and not including the first incidence of zero.': [1, 1.0]
'[c247] keep elements until a 0 appears.': [1, 1.0]
'[c247] keep elements until the first occurrence of 0.': [1, 1.0]
'[c247] keep elements until the second occurrence of 0.': [1, 0.0]
'[c247] keep elements up until before the first 0 appears.': [1, 1.0]
'[c247] keep the elements from the start of the list until the first 0 is encountered.': [1, 1.0]
'[c247] keep the elements in the list until a zero is found.': [1, 1.0]
'[c247] keep the elements in the list until reaching a zero, then remove the rest.': [1, 1.0]
'[c247] keep the elements until and excluding the first zero.': [1, 1.0]
'[c247] keep the elements until the first zero appears.': [1, 1.0]
'[c247] keep the elements up to (but not including) the first 0.': [1, 1.0]
'[c247] keep the sequence of elements before the first 0 and remove everything after that.': [1, 1.0]
'[c247] keep the sequence of numbers from the start until it meets a 0.': [1, 1.0]
'[c247] preserve sequence until 0 appears, and stop to the sequence once the 0 is found.': [1, 1.0]
'[c247] remove all elements after the first occurrence of 0.': [1, 1.0]
'[c247] remove all elements from the list after the second 0 is encountered, including the second 0.': [1, 0.25]
'[c247] remove elements until the occurrence of the number 0.': [1, 1.0]
'[c247] retain the elements of the list before the first occurrence of zero.': [1, 1.0]
'[c247] return consecutive elements until you find a number followed by 0.': [1, 1.0]
'[c248] keep only the elements after (and including) the second 0.': [1, 0.875]
'[c248] keep only the elements after the last occurrence of 0.': [1, 1.0]
'[c248] keep the elements after (and including) the final zero in the sequence, or the entire sequence if there is no zero.': [1, 1.0]
'[c248] keep the elements after the last 0.': [1, 1.0]
'[c248] keep the elements from the last zero (inclusive) to the end.': [1, 0.375]
'[c248] keep the elements from the last zero to the end of the list.': [1, 0.875]
'[c248] keep the elements starting from the first 0 found in the list.': [1, 0.625]
'[c248] keep the subarray starting from the last zero, if exists; otherwise, keep the original array.': [1, 1.0]
'[c248] remove all elements before and including the last occurrence of the number 0.': [1, 1.0]
'[c248] remove all elements before the first 0, and the 0 itself.': [1, 0.5]
'[c248] remove all elements before the first occurrence of zero and keep the remaining list.': [1, 0.5]
'[c248] remove all the elements before the last zero in the list, if there is a zero.': [1, 1.0]
'[c248] remove all the elements up to and including the last zero.': [1, 1.0]
'[c248] remove the numbers from the beginning of the list up to and including the first 0, and keep the rest.': [1, 0.25]
'[c248] return the elements after the last occurrence of the digit 0.': [1, 1.0]
'[c248] take the elements after (and including) the last 0 in the list.': [1, 0.875]
'[c248] take the elements of the list after the last zero.': [1, 1.0]
'[c248] take the last unique elements from the end of the original list until a 0 or the end of the list is hit.': [1, 0.375]
'[c248] trim the list at the first instance of ''0''.': [1, 0.125]
'[c248] truncate all elements before the last occurrence of the number 0.': [1, 1.0]
'[c249] delete duplicates from the list that are not succeeded by a 0.': [1, 0.0]
? '[c249] generate a list containing the first element of the initial list, the first element that occurs twice and the first element that occur three times, in that order if they exist.'
: [1, 0.0]
'[c249] keep numbers before the first 0, and the last number.': [1, 0.0]
'[c249] keep only the first and last occurrences of the same number and remove all the duplicates in between.': [1, 0.0]
'[c249] keep only the first instance of a number which occurs three or more times and the unique numbers from the list.': [1, 0.125]
'[c249] keep only the first number, the first number 0 and the last number before gaining a next 0.': [1, 0.125]
'[c249] keep only the first occurrence of every number until encountering a zero, everything after a zero is omitted.': [1, 0.125]
? '[c249] keep only the largest number occurring before a 0 and any following distinct numbers until another 0 appears, and repeat.'
: [1, 0.0]
'[c249] keep the first element and then keep every third element after a 0.': [1, 0.875]
'[c249] keep the first occurrence of each number and omit any subsequent duplicates.': [1, 0.0]
? '[c249] keep the first occurrence of each number if it is followed by a different number, and keep the last when followed by the same number.'
: [1, 0.125]
'[c249] keep unique numbers and remove all numbers that have duplicates.': [1, 0.125]
'[c249] only keep the first and last occurrence of each element in the list.': [1, 0.125]
'[c249] remove all elements before 0 and after 0 in the list, leaving only the head and the tail.': [1, 0.125]
'[c249] remove any numbers that doesn''t sandwich a 0.': [1, 0.0]
'[c249] retain the unique elements in their order of appearance.': [1, 0.125]
'[c249] return a list containing only the first recurring number(s).': [1, 0.125]
? '[c249] return a list containing the first element of the input list, followed by each element which is followed by zero in the input list.'
: [1, 0.875]
'[c249] return the list of first elements of the unique pairs where both possesses the same values.': [1, 0.0]
'[c249] take every unique number that comes after a 0 in the list.': [1, 0.0]
? '[c250] append every alternate element excluding 0 from left to right, starting with the second element, and then append every alternate element excluding 0 from right to left starting from the last element.'
: [1, 0.0]
'[c250] eliminate the 0s and adjust the sequence of the numbers.': [1, 0.0]
'[c250] generate a list that removes all 0s and appends the last non-zero number at the start.': [1, 0.0]
? '[c250] generate a new list starting from the first instance of the number 0 in the original list to the end, and reverse the order of this new list.'
: [1, 0.0]
'[c250] move all zeros to the end of the list and keep other elements in the order.': [1, 0.0]
'[c250] move any 0s from their current position to become the second element, rest remains the same.': [1, 0.0]
? '[c250] move the last unique number of the original list to the first slot of a new list and then push back only the duplicates of that number in the same order as they appeared in the list.'
: [1, 0.0]
'[c250] move the repeated elements from the start and end of the list to the middle.': [1, 0.0]
'[c250] move the second half of the list to the front and reverse its order.': [1, 0.375]
'[c250] move zeros from the list and move them to front and sort the rest of the numbers.': [1, 0.0]
? '[c250] put all the unique numbers in the list in an ascending order at the beginning of the list and put all the duplicated numbers at the end of the list in the appearance order.'
: [1, 0.0]
'[c250] rearrange the elements from least to greatest while preserving the mirrored structure.': [1, 0.0]
'[c250] remove all zeroes and then reverse the list.': [1, 0.125]
'[c250] remove all zeros and reverse the elements.': [1, 0.125]
'[c250] reorder the list by grouping duplicates together, starting with the duplicate from the list''s end to the beginning.': [1, 0.375]
'[c250] reposition the 0s in the list.': [1, 0.0]
'[c250] reverse the order of the unique elements in the list.': [1, 0.0]
'[c250] reverse the order of unique elements and following sequences of same element remain in their original order.': [1, 0.0]
'[c250] swap the first two numbers, remove the first 0 from the list (if exists) and reverse the rest of the elements.': [1, 0.0]
'[c250] swap the positions of the first two types of numbers, and remove zeros.': [1, 0.0]
