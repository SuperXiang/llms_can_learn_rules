'[c001] extract the minimum element.': [1, 0.0]
'[c001] find and return the element that appears twice.': [1, 0.125]
'[c001] find and return the maximum element.': [1, 0.0]
'[c001] find the element that appears only once in the list.': [1, 0.125]
'[c001] find the maximum value and add 1 to it.': [1, 0.125]
'[c001] find the middle element.': [1, 0.5]
'[c001] find the second largest element.': [1, 0.375]
'[c001] find the third smallest element.': [1, 0.125]
'[c001] identify the element that is repeated and choose the one that appears at the highest index.': [1, 0.125]
'[c001] list all elements that are greater than both their next and previous elements.': [1, 0.5]
'[c001] output the highest odd number.': [1, 0.125]
'[c001] pick the element whose index is equal to its value.': [1, 0.25]
'[c001] remove all elements in the list except the largest one.': [1, 0.0]
'[c001] remove elements in odd positions from the list.': [1, 0.0]
'[c001] return the element that appears only once.': [1, 0.25]
'[c001] return the element that appears twice.': [1, 0.25]
'[c001] return the largest element.': [1, 0.0]
'[c001] return the second largest element.': [1, 0.375]
'[c001] return the second smallest element from the list.': [1, 0.25]
'[c002] generate a list of elements which are less than both their neighbours.': [1, 0.625]
'[c002] list the odd elements.': [1, 0.375]
'[c002] remove all elements except the first one.': [1, 0.375]
'[c002] remove all elements except the second largest.': [1, 0.375]
'[c002] remove all elements that have no adjacent neighbors with a smaller value.': [1, 0.5]
'[c002] remove all even elements from an array.': [1, 0.5]
'[c002] remove duplicates while preserving order.': [1, 0.625]
'[c002] remove elements by their index if below 3.': [1, 0.625]
'[c002] remove elements that are greater on both the left and right side.': [1, 0.625]
'[c002] remove the elements at even indices.': [2, 0.625]
'[c002] remove the first multiple of 3.': [1, 0.375]
'[c002] remove the largest odd numbers.': [1, 0.625]
'[c002] remove the min of the list.': [1, 0.5]
'[c002] remove the minimum number in the list.': [1, 0.5]
'[c002] return a list of odd numbers.': [1, 0.5]
'[c002] return all even numbers.': [1, 0.125]
'[c002] return elements which are divisible by 5.': [1, 0.5]
'[c002] return original list if even, and return odd elements in a new list if the list length is odd.': [1, 0.625]
'[c002] return the elements at even indices.': [1, 0.5]
'[c003] extract and return the smallest positive integer which is not present in the list.': [1, 0.125]
'[c003] extract the smallest element.': [1, 0.125]
'[c003] filter and return the smallest element from the list.': [1, 0.125]
'[c003] find the last even number of the list.': [1, 0.375]
'[c003] find the minimum element in the list.': [1, 0.125]
'[c003] find the minimum of the list.': [1, 0.125]
'[c003] find the minimum value in the list.': [1, 0.125]
'[c003] find the smallest element in the list.': [1, 0.125]
'[c003] output the minimum value in the input list.': [1, 0.125]
'[c003] output the third element.': [1, 0.0]
'[c003] pick the last element greater than or equal to 3.': [1, 0.5]
'[c003] print the last digit in the list.': [1, 0.5]
'[c003] retain the last element if it''s less than 5.': [1, 0.375]
'[c003] return the first even number in the list.': [1, 0.125]
'[c003] return the first even number present in the list.': [1, 0.125]
'[c003] return the minimum element.': [1, 0.125]
'[c003] return the smallest element in the list.': [1, 0.125]
'[c003] return the smallest number that does not exist in the input list.': [1, 0.125]
'[c003] take the last element of the list.': [1, 0.5]
'[c004] find the element which is not repeated.': [1, 0.125]
'[c004] find the greatest element in the list.': [1, 0.0]
'[c004] find the highest number in the list.': [1, 0.0]
'[c004] find the largest element.': [1, 0.0]
'[c004] find the lowest integer.': [1, 0.125]
'[c004] find the maximum number and return it in a new list.': [1, 0.0]
'[c004] find the maximum number in the list.': [1, 0.0]
'[c004] give the maximum element of the list.': [1, 0.0]
'[c004] keep the maximum number.': [1, 0.0]
'[c004] remove all elements except the one with the largest value.': [1, 0.0]
'[c004] remove all elements except the smallest.': [1, 0.125]
'[c004] remove all even numbers from the list.': [1, 0.0]
'[c004] remove element 7, if present.': [1, 0.125]
'[c004] remove the smallest number.': [1, 0.25]
'[c004] return the element that appears only once.': [1, 0.125]
'[c004] return the largest element.': [1, 0.0]
'[c004] return the only odd number in the list.': [1, 0.125]
'[c004] return the smallest element in the list.': [1, 0.125]
'[c004] return the smallest number.': [1, 0.125]
'[c004] return the unique element in the list.': [1, 0.0]
'[c005] append the 2nd smallest number from the list.': [1, 0.125]
'[c005] find and print the smallest element in the list.': [1, 0.375]
'[c005] find the kth smallest element in the list, where k is the number of 0s in the list.': [1, 0.25]
'[c005] find the lowest element.': [1, 0.375]
'[c005] find the minimum number in the list.': [1, 0.375]
'[c005] find the second largest element.': [1, 0.375]
'[c005] find the second smallest element.': [1, 0.375]
'[c005] find the smallest element of the list.': [1, 0.375]
'[c005] find the smallest number in the array.': [1, 0.375]
'[c005] find the smallest odd number in the list.': [1, 0.125]
'[c005] get the smallest number in the list.': [1, 0.375]
'[c005] pick every element that comes after an even element.': [1, 0.125]
'[c005] replace all even numbers with 6.': [1, 0.25]
'[c005] return the element with the least value.': [1, 0.375]
'[c005] return the maximum value of the list.': [1, 0.25]
'[c005] return the minimum element.': [1, 0.375]
'[c005] return the only odd number in the list.': [1, 0.125]
'[c005] return the smallest element in the list.': [1, 0.375]
'[c005] select the maximum value from the list.': [1, 0.0]
'[c006] extract the maximum and second maximum element from the list.': [1, 0.0]
'[c006] generate a list of the first two elements.': [1, 1.0]
'[c006] generate the list of the first two elements.': [1, 1.0]
'[c006] get the greatest element and the smallest element in the list.': [1, 0.0]
'[c006] keep the first and second largest elements.': [1, 0.0]
'[c006] keep the first element and the element in the middle.': [1, 0.125]
'[c006] keep the max element and the min element.': [1, 0.0]
'[c006] list the maximum number and the second maximum number.': [1, 0.0]
'[c006] remove all elements in the list except the first 2.': [1, 1.0]
'[c006] replace the first element with the second element.': [1, 0.0]
'[c006] retain only the first two elements.': [1, 1.0]
'[c006] retain the first two elements if present.': [1, 1.0]
'[c006] return the first and second elements.': [1, 1.0]
'[c006] return the first two elements if the second element is greater than the first, else return the first element.': [1, 0.625]
'[c006] return the first two elements of the list.': [1, 1.0]
'[c006] return the first two elements.': [1, 1.0]
'[c006] select the first two numbers from the list.': [1, 1.0]
'[c006] take the first two elements of the list.': [1, 1.0]
'[c007] extract the first two elements of the list.': [1, 1.0]
'[c007] form the pair of first and third elements.': [1, 0.25]
'[c007] generate a list of the first two elements.': [1, 1.0]
'[c007] give the first two elements.': [1, 1.0]
'[c007] keep the first two smallest elements.': [1, 1.0]
'[c007] remove all elements except for the first two elements.': [1, 0.875]
'[c007] remove the 3rd and 6th elements.': [1, 0.125]
'[c007] retain only first two elements from the list.': [1, 1.0]
'[c007] return the first 2 elements of the list.': [1, 0.875]
'[c007] return the first two elements from the list.': [1, 1.0]
'[c007] return the first two elements of the list.': [1, 1.0]
'[c007] return the first two elements.': [2, 2.0]
'[c007] select the first 2 elements.': [2, 2.0]
'[c007] take elements at even indices.': [1, 0.125]
'[c007] take the first 2 elements.': [1, 1.0]
'[c007] use only the first two elements from the given list.': [1, 1.0]
'[c008] delete all elements with odd indices.': [1, 0.25]
'[c008] delete the last 4 elements.': [1, 0.625]
'[c008] eliminate every other element.': [1, 0.5]
'[c008] generate a new list containing the first half of elements.': [1, 0.25]
'[c008] remove all elements greater than or equal to 5.': [1, 0.25]
'[c008] remove all even elements.': [1, 0.25]
'[c008] remove all even numbers.': [2, 0.625]
'[c008] remove all numbers 7.': [1, 0.5]
'[c008] remove all occurrences of 5.': [1, 0.625]
'[c008] remove all odd numbers.': [1, 0.25]
'[c008] remove all the elements greater than the last element in the list.': [1, 0.125]
'[c008] remove all the odd elements from the list.': [1, 0.25]
'[c008] remove elements at even indexes.': [1, 0.25]
'[c008] remove elements at odd indices.': [1, 0.25]
'[c008] remove the elements 5, 7, then 2.': [1, 0.625]
'[c008] remove the last element if it is even.': [2, 0.75]
'[c009] do nothing.': [5, 1.875]
'[c009] keep the list the same if there are no duplicate elements, else remove all the duplicate elements.': [1, 0.375]
'[c009] keep the original order of the list.': [1, 0.375]
'[c009] leave the list unchanged.': [1, 0.375]
'[c009] remove all elements that are greater than all elements on its right side.': [1, 0.125]
'[c009] remove all instances of 5.': [1, 0.125]
'[c009] remove duplicate elements.': [1, 0.375]
'[c009] remove the last element.': [2, 0.0]
'[c009] removed duplicate elements.': [1, 0.375]
'[c009] retain the first element and remove all other occurrences of the same element.': [1, 0.375]
'[c009] skip every element at an odd index.': [1, 0.125]
'[c010] filter out only the even elements.': [1, 0.125]
'[c010] remove 8s.': [1, 0.0]
'[c010] remove all 8s.': [1, 0.0]
'[c010] remove all elements that are greater than 8.': [1, 0.0]
'[c010] remove all occurences of the first element.': [1, 0.875]
'[c010] remove any element that equals 8.': [1, 0.0]
'[c010] remove elements less than the first element.': [1, 0.25]
'[c010] remove the element at index 0.': [1, 1.0]
'[c010] remove the elements with value 8.': [1, 0.125]
'[c010] remove the first element if it is a 2, else remove the last occurrence of 8.': [1, 0.0]
'[c010] remove the first element if it is even.': [1, 1.0]
'[c010] remove the first element of the list.': [1, 0.875]
'[c010] remove the first element.': [2, 1.875]
'[c010] remove the greatest element.': [1, 0.125]
'[c010] remove the max element.': [1, 0.625]
'[c010] return the list without the first element.': [1, 1.0]
'[c011] delete all the odd elements.': [1, 0.25]
'[c011] drop even numbers.': [1, 0.0]
'[c011] remove all elements at an even index.': [1, 0.125]
'[c011] remove all elements except the even elements.': [1, 0.375]
'[c011] remove all elements that are greater than the first element.': [3, 0.625]
'[c011] remove all elements that are less than the head of the list.': [1, 0.125]
'[c011] remove all occurrences of 7.': [1, 0.125]
'[c011] remove all odd elements.': [1, 0.25]
'[c011] remove all odd numbers.': [1, 0.25]
'[c011] remove elements at even positions, indexing from 0.': [1, 0.25]
'[c011] remove elements greater than or equal 7.': [1, 0.25]
'[c011] remove elements with odd index.': [1, 0.25]
'[c011] remove the even numbers.': [1, 0.25]
'[c011] remove the first element.': [3, 1.75]
'[c011] remove the last element if it is less than the first element.': [1, 0.125]
'[c011] return the list without the first element.': [1, 0.625]
'[c012] delete the first element if it is even.': [1, 0.375]
'[c012] filter the first 3 even numbers.': [1, 0.25]
'[c012] remove all elements except for even elements.': [1, 0.375]
'[c012] remove all numbers greater than the first element.': [1, 0.625]
'[c012] remove all odd elements.': [1, 0.5]
'[c012] remove all odd numbers from list.': [1, 0.5]
'[c012] remove all odd numbers from the list.': [2, 1.125]
'[c012] remove all the elements that appear in the odd positions.': [1, 0.5]
'[c012] remove all the odd numbers.': [2, 0.875]
'[c012] remove elements greater than or equal to 6.': [1, 0.625]
'[c012] remove odd elements from the list.': [1, 0.625]
'[c012] remove only elements which occur more than one time.': [1, 0.375]
'[c012] remove the first and last elements.': [1, 0.375]
'[c012] remove the first element if it is even.': [1, 0.625]
'[c012] remove the first element if it''s even.': [1, 0.375]
'[c012] remove the first element.': [1, 0.625]
'[c012] return the numbers greater than and equal to 5.': [1, 0.25]
'[c013] delete all digits that are equal to or less than the first digit.': [1, 0.125]
'[c013] discard all even elements in the list.': [1, 0.125]
'[c013] filter the list for even elements.': [1, 0.25]
'[c013] generate a list of elements obtained after removing the first and last element.': [1, 0.125]
'[c013] remove 0.': [1, 0.25]
'[c013] remove all elements at even indices.': [1, 0.125]
'[c013] remove all elements that are even.': [1, 0.125]
'[c013] remove all elements that are less than or equal to 3.': [1, 0.125]
'[c013] remove all even elements.': [1, 0.125]
'[c013] remove all instances of the first element.': [1, 0.125]
'[c013] remove all occurrences of 0 in the array.': [1, 0.25]
'[c013] remove all occurrences of 0.': [1, 0.0]
'[c013] remove elements in even positions.': [1, 0.125]
'[c013] remove elements that are greater than 2.': [1, 0.125]
'[c013] remove the first element if it is 0.': [1, 0.25]
'[c013] remove the number in the 0th and 1st index.': [1, 0.25]
'[c013] retain the elements that are greater than 0, and greater than itself.': [1, 0.125]
'[c013] return a list of elements that are greater than the first element.': [1, 0.125]
'[c014] generate a new list of elements from the original list if the element is greater than previous element.': [1, 0.25]
'[c014] keep only the elements with an odd index.': [1, 0.0]
'[c014] remove all consecutive elements with a difference of 1.': [1, 0.25]
'[c014] remove all elements except 0, 3, 5, 6.': [1, 0.0]
'[c014] remove all elements except the ones at odd indices.': [1, 0.0]
'[c014] remove all elements that are greater than or equal to 5.': [1, 0.0]
'[c014] remove all even numbers.': [1, 0.125]
'[c014] remove any element that is greater than its predecessor.': [1, 0.0]
'[c014] remove elements at odd indices.': [1, 0.0]
'[c014] remove elements that appear twice.': [1, 0.0]
'[c014] remove elements that are not smaller than 5.': [1, 0.0]
'[c014] remove every other element starting from the second element.': [1, 0.125]
'[c014] remove numbers less than 5.': [1, 0.25]
'[c014] remove odd elements.': [1, 0.0]
'[c014] remove odd numbers.': [2, 0.125]
'[c014] remove odd values from a list.': [1, 0.125]
'[c014] remove the element at index 0.': [1, 0.0]
'[c014] remove the first and last elements of the list.': [1, 0.125]
'[c014] remove the first element.': [1, 0.0]
'[c015] eliminate the duplicates.': [1, 0.0]
'[c015] remove all consecutive duplicates of an element.': [1, 0.0]
'[c015] remove all duplicate elements in order.': [1, 0.0]
'[c015] remove all duplicate elements.': [1, 0.0]
'[c015] remove all occurrences of the maximum element.': [1, 0.0]
'[c015] remove all the elements except the distinct ones.': [1, 0.0]
'[c015] remove any duplicate elements.': [1, 0.0]
'[c015] remove consecutive duplicates.': [1, 0.0]
'[c015] remove duplicated elements.': [1, 0.0]
'[c015] remove duplicates and keep the first occurrence element.': [1, 0.0]
'[c015] remove duplicates in the array.': [1, 0.0]
'[c015] remove the duplicate elements.': [3, 0.0]
'[c015] remove the last occurrence of each element.': [1, 0.0]
'[c015] retrieve elements that appear only once.': [1, 0.0]
'[c016] change every 3 to an 8.': [1, 0.5]
'[c016] replace 0 by 8.': [1, 0.25]
'[c016] replace 3 if the list contains a 3, else append 8 if the list contains a 0.': [1, 0.375]
'[c016] replace 3 with 8.': [4, 2.75]
'[c016] replace all 0 with 8.': [1, 0.125]
'[c016] replace all 0s in the list with 8s.': [1, 0.25]
'[c016] replace all elements greater than or equal to 5 with 8.': [1, 0.375]
'[c016] replace any 0 with 8.': [1, 0.125]
'[c016] replace every 0 in the array with 8.': [1, 0.125]
'[c016] replace every 3 with an 8.': [1, 0.75]
'[c016] replace the 3 with an 8.': [1, 0.875]
'[c016] replace the first 3 (if it exists) with an 8.': [1, 0.75]
'[c016] replace the first digit with 8.': [1, 1.0]
'[c016] replace the first element with 8 if the list contains 0, else replace with 8 if the list contains 3.': [1, 0.25]
'[c016] replace zeros with eights.': [1, 0.25]
'[c016] substitute 0 with 8.': [1, 0.25]
'[c017] find the first number lesser than 8 and set it to 8, then return the new list.': [1, 0.625]
'[c017] replace 7 with 8.': [4, 0.125]
'[c017] replace 7''s with 8''s in the list.': [1, 0.0]
'[c017] replace 8 with 7.': [1, 1.0]
'[c017] replace 8 with a 7 that is not the first element.': [1, 0.0]
'[c017] replace all 7s with 8s.': [1, 0.0]
'[c017] replace all 8s with 8s.': [1, 0.875]
'[c017] replace all 8s with value 8.': [1, 0.0]
'[c017] replace all instances of 8 with 8.': [1, 0.25]
'[c017] replace any 7 with 8.': [1, 0.0]
'[c017] replace each element with the sum of the element itself and 8.': [1, 0.0]
'[c017] replace the 8 with 0.': [1, 0.0]
'[c017] replace the first 8 with the number 7.': [1, 0.625]
'[c017] replace the first occurrence of 6 with 8.': [2, 0.0]
'[c017] replace the number 7 with 8.': [1, 0.0]
'[c018] check if 3 exists in the list and replace it with 3.': [1, 0.125]
'[c018] insert 3 if the list contains odd number of elements, or 4 if the list contains even number of elements.': [1, 0.0]
'[c018] replace 1, 6, and 8 with 3.': [1, 0.0]
'[c018] replace 2 with 3.': [2, 0.375]
'[c018] replace all 3s with 0s.': [1, 0.125]
'[c018] replace all 3s with 3s.': [1, 0.125]
'[c018] replace all the 3''s with a 3.': [1, 0.125]
'[c018] replace all the elements 3 with 1 and place it near the end.': [1, 0.125]
'[c018] replace any element that is not 3 with 3.': [1, 0.0]
'[c018] replace every 2 with a 3 if there is any 2 in the list.': [1, 0.125]
'[c018] replace every occurrence of 3 by 1.': [1, 0.125]
'[c018] replace the first 9 with a 3.': [1, 0.125]
'[c018] replace the first element that is a multiple of 3 with a 3.': [1, 0.125]
'[c018] replace the first instance of 3 by 2.': [1, 0.125]
'[c018] replace the first instance of 9 with 3.': [1, 0.25]
'[c018] replace the first occurrence of 6 with a 3 if it is present.': [1, 0.25]
'[c018] replace the first occurrence of a 2 with 3.': [1, 0.25]
'[c018] replace the last element with 3 if the list contains a 3, otherwise replace the last element with 8.': [1, 0.0]
'[c018] replace the number 3 with 3 if it exists.': [1, 0.125]
'[c019] add 3 after every element.': [1, 0.5]
'[c019] add 3 to the element at index 3 in the array if the index 3 exists.': [1, 0.5]
'[c019] append 3 if it exists, else append 0.': [1, 0.25]
'[c019] append 3 if the list contains a 3, else append 9 if the list contains a 9.': [1, 0.375]
'[c019] append 3 if the list contains a 3, else append the first element.': [1, 0.25]
'[c019] append 3 if the list contains an even number.': [1, 0.5]
'[c019] append the third element if it is odd.': [1, 0.625]
'[c019] check if the list contains 3; if it does, insert 3 after it.': [1, 0.375]
'[c019] insert 3 after any number less than 3.': [1, 0.25]
'[c019] insert 3 after each element.': [1, 0.25]
'[c019] insert 3 after each odd number.': [1, 0.375]
'[c019] insert 3 after every element.': [1, 0.25]
'[c019] insert 3 after the first digit found in the array that is greater than 3.': [1, 0.375]
'[c019] insert 3 after the first even element.': [1, 0.375]
'[c019] insert 3 between 3 and 5.': [1, 0.375]
'[c019] insert a 3 after every element in the list.': [1, 0.25]
'[c019] insert a 3 after every odd number.': [1, 0.375]
'[c019] insert the value 3 after 1.': [1, 0.25]
'[c019] replace 3 to 3.': [1, 0.625]
'[c019] replace the first 3 if exists with 3.': [1, 0.625]
'[c020] add the last element to the beginning and keep the original in sequence.': [1, 0.0]
'[c020] append 3 if the list contains a 3, else append 9 if the list contains a 9.': [1, 0.5]
'[c020] repeat the last element.': [1, 1.0]
'[c020] replace the first element with the last element.': [10, 10.0]
'[c020] replace the last element with the first element.': [1, 1.0]
'[c021] add 8 after every element and insert 8 as the first element.': [1, 0.0]
'[c021] add 8 after every element.': [1, 0.25]
'[c021] add 8 in the second position.': [1, 1.0]
'[c021] add a 8 after every element of the list.': [1, 0.25]
'[c021] insert 8 after every element in the list.': [1, 0.25]
'[c021] insert 8 after every element.': [1, 0.25]
'[c021] insert 8 after the first element in the list.': [1, 1.0]
'[c021] insert 8 between every element.': [1, 0.25]
'[c021] insert 8 between two elements in the list.': [1, 1.0]
'[c021] insert 8 in between any two consecutive odd elements.': [1, 1.0]
'[c021] insert a 8 in between every element.': [1, 0.25]
'[c021] insert an 8 after every element in the given list.': [1, 0.25]
'[c021] insert an 8 in a random position.': [1, 0.625]
'[c021] modify the list to [element, 8, element, next element, .': [1, 1.0]
'[c021] replace the first occurrence of 7 by a 8.': [1, 0.125]
'[c022] add 5 in the middle of the array.': [1, 0.375]
'[c022] add 5 to all elements in the list.': [1, 0.25]
'[c022] insert 5 after any number.': [1, 0.25]
'[c022] insert 5 after each element, except the last one.': [1, 0.125]
'[c022] insert 5 after each element.': [1, 0.0]
'[c022] insert 5 after every element in the list.': [1, 0.125]
'[c022] insert 5 after every element.': [1, 0.125]
'[c022] insert 5 after the first element.': [1, 1.0]
'[c022] insert 5 at the index of each element that is greater than 4.': [1, 0.5]
'[c022] insert 5 between every two consecutive numbers.': [1, 0.125]
'[c022] insert 5 in second index of the list.': [1, 1.0]
'[c022] insert 5 in the odd-indexed positions.': [1, 0.375]
'[c022] insert a 5 after each element having a value less than 5.': [1, 0.25]
'[c022] insert a 5 after each element of the list.': [1, 0.125]
'[c022] insert a 5 after each element.': [1, 0.125]
'[c022] insert a 5 after every element.': [1, 0.125]
'[c022] insert a 5 between every adjacent digit.': [1, 0.125]
'[c022] replace 0 with 5.': [1, 0.0]
'[c022] replace every 5 with a 5.': [1, 0.125]
'[c023] add 5 to any number that is not 5.': [1, 0.375]
'[c023] append 5 if the list length is greater than 5.': [1, 0.125]
'[c023] append 5 to elements in the list containing an even number.': [1, 0.25]
'[c023] insert 5 after every element in the list.': [1, 0.0]
'[c023] insert 5 at every odd position.': [1, 0.625]
'[c023] insert 5 before the number 3 if 8 exists in the list.': [1, 0.125]
'[c023] insert 5 between every element of the array.': [1, 0.0]
'[c023] insert 5 to the right of every other element.': [1, 0.0]
'[c023] insert 8 after 4, 5 after 0, and 2 after 6.': [1, 0.375]
'[c023] insert 8 immediately after 6 and 5 immediately after 9.': [1, 0.375]
'[c023] insert a 5 after each element that is greater than 4.': [1, 0.375]
'[c023] insert the 5 at the second index in the list.': [1, 0.125]
'[c023] insert the mid-point element 5 to every odd index.': [1, 0.625]
'[c023] replace the first 3 with a 5.': [1, 0.0]
'[c023] shift each element to the next position, and the last element moves to the first position.': [1, 0.0]
'[c023] substitute 8 with 5.': [1, 0.0]
'[c024] append 5 or 8 if the list contains 5 or 8 respectively.': [1, 0.375]
'[c024] append a 5 to the list.': [1, 0.0]
'[c024] insert 5 after each element that is greater than or equal to 5.': [1, 0.25]
'[c024] insert 5 after each element.': [2, 0.0]
'[c024] insert 5 after every element that is greater than 5.': [1, 0.125]
'[c024] insert 5 after every element.': [1, 0.0]
'[c024] insert 5 at index that is equal to the first element in the list and then shift all the elements to the right.': [1, 0.5]
'[c024] insert 5 before every element at odd positions.': [1, 0.0]
'[c024] insert 5 before every odd element.': [1, 0.0]
'[c024] insert 5 between every consecutive pair of integers.': [1, 0.0]
'[c024] insert 5 in between all the elements of the original list.': [1, 0.0]
'[c024] insert a 5 immediately after 8.': [1, 0.125]
'[c024] insert a 5 immediately after every element that is greater than 4.': [1, 0.25]
'[c024] insert an element 5 after every element of the list.': [1, 0.125]
? '[c024] insert an element at an index equal to half the length of the list, and the element is 5 if the list contains an even number of elements, else 8 if it contains an odd number of elements.'
: [1, 0.25]
'[c024] put a 5 after the first even number.': [1, 0.25]
'[c024] replace 8 with 5.': [1, 0.0]
'[c024] replace every instance of 8 with 5.': [1, 0.0]
'[c024] replace the 8 with a 5.': [1, 0.0]
'[c025] delete the smallest element.': [1, 0.0]
'[c025] discard the maximum number from the list.': [1, 0.25]
'[c025] iterate through the list and remove all instances of the first element.': [1, 0.0]
'[c025] remove all elements greater than 3 if they exist.': [1, 0.0]
'[c025] remove all even digits from the list.': [1, 0.125]
'[c025] remove all even numbers.': [1, 0.0]
'[c025] remove all instances of the smallest element in the list.': [1, 0.0]
'[c025] remove all odd numbers.': [1, 0.0]
'[c025] remove elements after the first occurrence of 0.': [1, 0.0]
'[c025] remove even elements.': [1, 0.0]
'[c025] remove specified elements.': [1, 0.0]
'[c025] remove the element at index 1.': [1, 0.625]
'[c025] remove the element at index 2.': [1, 0.125]
'[c025] remove the even elements.': [1, 0.25]
'[c025] remove the first element of the list if it is not 0.': [1, 0.0]
'[c025] remove the first element.': [1, 0.0]
'[c025] remove the first occurrence of 4, if present.': [1, 0.0]
'[c025] remove the last element if it is 0.': [1, 0.0]
'[c025] remove the last element.': [1, 0.0]
'[c025] remove the maximum element.': [1, 0.0]
'[c026] append the last element if the last element is less than 5.': [1, 0.0]
'[c026] drop consecutive even numbers.': [1, 0.125]
'[c026] remove 7, 8, or 9.': [1, 0.0]
'[c026] remove all 7 and 8.': [1, 0.0]
'[c026] remove all elements at even indices.': [1, 0.0]
'[c026] remove all elements that are greater than 5.': [1, 0.0]
'[c026] remove all elements that are greater than one of their adjacent element.': [1, 0.0]
'[c026] remove all even elements from the list.': [1, 0.0]
'[c026] remove all even elements.': [1, 0.0]
'[c026] remove all even numbers from the list.': [1, 0.0]
'[c026] remove all even numbers.': [2, 0.0]
'[c026] remove all even values.': [1, 0.0]
'[c026] remove all the even elements.': [1, 0.0]
'[c026] remove all the even numbers.': [1, 0.0]
'[c026] remove duplicate elements in the list.': [1, 0.0]
'[c026] remove duplicate elements.': [1, 0.0]
'[c026] remove even elements.': [1, 0.0]
'[c026] remove even numbers.': [1, 0.0]
'[c026] remove the number which is repeated twice in a single pass.': [1, 0.25]
'[c027] eliminate the consecutive duplicate elements.': [1, 0.375]
'[c027] remove adjacent duplicate elements.': [2, 0.75]
'[c027] remove all consecutive elements.': [1, 0.375]
'[c027] remove all consecutive equal elements from the list.': [1, 0.25]
'[c027] remove all duplicate elements.': [1, 0.375]
'[c027] remove all occurrences of 0.': [1, 0.125]
'[c027] remove all the duplicate elements.': [1, 0.375]
'[c027] remove consecutive elements.': [1, 0.125]
'[c027] remove duplicate elements [7].': [1, 0.375]
'[c027] remove duplicate elements, keeping only the first occurence.': [1, 0.375]
'[c027] remove duplicate elements.': [4, 1.5]
'[c027] remove the duplicate elements.': [1, 0.375]
'[c027] remove the last element if it is equal to 1.': [1, 0.0]
'[c027] remove the last occurrence of the second smallest element in the list.': [1, 0.375]
'[c028] delete all the duplicated elements.': [1, 0.0]
'[c028] delete the first occurrence of 0.': [1, 0.375]
'[c028] remove all duplicate elements adjacent to each other.': [1, 0.0]
'[c028] remove all duplicates.': [1, 0.0]
'[c028] remove all elements of the first occurrence.': [1, 0.0]
'[c028] remove all occurences of the first element.': [1, 0.0]
'[c028] remove all occurrences of 0 excluding the 0th element.': [1, 0.375]
'[c028] remove all occurrences of 0.': [2, 0.75]
'[c028] remove all occurrences of the first element in the list.': [1, 0.0]
'[c028] remove all occurrences of the last element.': [1, 0.0]
'[c028] remove all occurrences of the number 0.': [1, 0.375]
'[c028] remove all the occurrences of 0.': [2, 0.75]
'[c028] remove all the occurrences of the first element.': [1, 0.0]
'[c028] remove any duplicates.': [1, 0.0]
'[c028] remove duplicate elements.': [1, 0.0]
'[c028] remove duplicate integers.': [1, 0.0]
'[c028] remove the duplicate elements from the list.': [1, 0.0]
'[c028] remove the last element if it is equal to the first element.': [1, 0.0]
'[c029] discard the elements with the maximum and minimum values.': [1, 0.0]
'[c029] filter out all zeros.': [1, 0.0]
'[c029] filter the even elements.': [1, 0.125]
'[c029] get elements at odd indices.': [1, 0.0]
'[c029] keep only the even numbers in the list.': [1, 0.125]
'[c029] remove all elements at even indices.': [2, 0.125]
'[c029] remove all elements less than 5.': [1, 0.0]
'[c029] remove all elements smaller than the first element.': [1, 0.0]
'[c029] remove all elements which are at even indices.': [1, 0.0]
'[c029] remove all odd elements.': [1, 0.0]
'[c029] remove all the elements at even indices.': [1, 0.0]
'[c029] remove element 0s.': [1, 0.0]
'[c029] remove elements 0 and higher.': [1, 0.5]
'[c029] remove the first and last element.': [1, 0.125]
'[c029] remove the first and last elements.': [1, 0.25]
'[c029] sort and remove duplicates.': [1, 0.0]
'[c030] eliminate all elements larger than 6.': [1, 0.0]
'[c030] remove all elements greater than 5.': [1, 0.125]
'[c030] remove all elements greater than 6.': [1, 0.125]
'[c030] remove all elements greater than or equal to 6.': [1, 0.0]
'[c030] remove all elements that are greater than 6.': [1, 0.0]
'[c030] remove all even elements from the list.': [1, 0.25]
'[c030] remove all even elements.': [3, 1.125]
'[c030] remove all even numbers from the list.': [1, 0.125]
'[c030] remove all even numbers.': [1, 0.375]
'[c030] remove all odd numbers.': [1, 0.0]
'[c030] remove all the elements which are less than 4.': [1, 0.0]
'[c030] remove all the even elements.': [1, 0.125]
'[c030] remove all the odd elements.': [1, 0.0]
'[c030] remove even elements.': [1, 0.25]
'[c030] remove the last 3 elements.': [1, 0.5]
'[c030] remove the last element if it is a 7.': [1, 0.0]
'[c030] remove the last element of the list if the last element is less than 6.': [1, 0.0]
'[c030] remove the odd numbers from the array.': [1, 0.0]
'[c031] delete all duplicate elements.': [1, 0.125]
'[c031] remove adjacent similar values.': [1, 0.125]
'[c031] remove all duplicate elements.': [1, 0.125]
'[c031] remove all duplicates.': [1, 0.125]
'[c031] remove all the duplicate elements.': [1, 0.125]
'[c031] remove all the repeating elements.': [1, 0.125]
'[c031] remove consecutive duplicates.': [1, 0.125]
'[c031] remove duplicate adjacent elements.': [1, 0.125]
'[c031] remove duplicate elements.': [1, 0.125]
'[c031] remove duplicates.': [2, 0.25]
'[c031] remove elements after the last unique.': [1, 0.375]
'[c031] remove elements that are repeated more than 1 time.': [1, 0.125]
'[c031] remove the adjacent duplicates.': [1, 0.125]
'[c031] remove the duplicate elements.': [2, 0.25]
'[c031] remove the duplicates from the list.': [1, 0.125]
'[c031] remove the duplicates.': [1, 0.125]
'[c032] delete every 2nd element.': [1, 0.0]
'[c032] discard odd numbers.': [1, 0.0]
'[c032] filter out all odd numbers.': [1, 0.0]
'[c032] iterate from left to right and remove the first even number.': [1, 0.0]
'[c032] move the last four elements to the beginning.': [1, 0.0]
'[c032] remove all duplicate elements.': [1, 0.0]
'[c032] remove all elements 7 and 8 from the list.': [1, 0.0]
'[c032] remove all elements except the first and last.': [1, 0.0]
'[c032] remove all odd elements from the list.': [1, 0.0]
'[c032] remove all odd numbers.': [1, 0.0]
'[c032] remove all the even numbers.': [1, 0.0]
'[c032] remove all the odd numbers.': [1, 0.0]
'[c032] remove elements at odd indices.': [1, 0.0]
'[c032] retain the elements before the first 3, if any.': [1, 0.125]
'[c033] change the position of the first element to index 2.': [1, 0.25]
'[c033] move the first element to the second position.': [1, 0.0]
'[c033] move the first element to the third position in an array.': [1, 0.125]
'[c033] print the element at position 3(index 2) in the array.': [1, 0.0]
'[c033] sort the elements in ascending order.': [1, 0.0]
'[c033] sort the list and move the left most 3 elements to the end.': [1, 0.0]
'[c033] sort the list in ascending order.': [1, 0.0]
'[c033] swap the first and second elements.': [2, 0.0]
'[c033] swap the first and third elements.': [2, 0.5]
'[c034] extract the element after the last 0 and move it to the start.': [1, 0.125]
'[c034] move 0 to index 1.': [1, 0.75]
'[c034] move 0 to the second position.': [1, 0.75]
'[c034] move all 0s to the front of the list.': [1, 0.0]
'[c034] move all 0s to the front.': [1, 0.0]
'[c034] place the first element at the 3rd position.': [1, 0.875]
'[c034] place the smallest element first.': [1, 0.0]
'[c034] put the first element in the 2nd position.': [1, 0.75]
'[c034] replace the second element with the third element.': [1, 0.875]
'[c034] shift all elements one position forward, and the first element to the last.': [1, 0.0]
'[c034] shift each element three steps to the right, cyclically.': [1, 0.125]
'[c034] sort the elements in increasing order, except if the number is 0, then it should be kept in its original position.': [1, 0.625]
'[c034] sort the list in ascending order.': [1, 0.0]
'[c034] sort the list.': [1, 0.0]
'[c034] swap the first (or left-most) and second elements.': [1, 0.0]
'[c034] swap the first and second elements.': [1, 0.0]
'[c035] eliminate all occurrences of consecutive duplicates.': [1, 0.0]
'[c035] keep one copy of a duplicate.': [1, 0.0]
'[c035] move all the zeros to the front and keep the order of the other elements.': [1, 0.125]
'[c035] remove all duplicate elements.': [1, 0.0]
'[c035] remove all duplicates from the list.': [1, 0.0]
'[c035] remove any duplicates of the same element.': [1, 0.0]
'[c035] remove consecutive duplicates.': [3, 0.0]
'[c035] remove duplicate adjacent elements.': [1, 0.0]
'[c035] remove duplicate elements (excluding the first appearance).': [1, 0.0]
'[c035] remove duplicate elements in the list.': [1, 0.0]
'[c035] remove duplicate elements.': [3, 0.0]
'[c035] remove duplicates.': [1, 0.0]
'[c035] retain the first occurrence of each element and remove any duplicates.': [1, 0.0]
'[c036] exchange the second and third elements while keeping the rest of the elements in place.': [1, 0.5]
'[c036] move all 1''s to the front.': [1, 0.0]
'[c036] move all the 0s to the beginning of the list.': [1, 0.0]
'[c036] move all the smallest elements to the front.': [1, 0.0]
'[c036] move all the zeros to the beginning of the list.': [1, 0.0]
'[c036] move the lowest element to the front.': [1, 0.0]
'[c036] shift elements one to the left and place the first element at the end.': [1, 0.0]
'[c036] shift the minimum element to the first position and leave all other elements in the same position.': [1, 0.0]
'[c036] shift the second element of the list to the front.': [1, 0.0]
'[c036] sort the elements in ascending order.': [1, 0.0]
'[c036] sort the list in ascending order.': [2, 0.0]
'[c036] sort the list of elements in ascending order.': [1, 0.0]
'[c036] sort the numbers in the list.': [1, 0.0]
'[c036] swap the first and second elements.': [1, 0.0]
'[c036] swap the first and the second elements.': [2, 0.0]
'[c037] add 3 at the end of the list.': [1, 1.0]
'[c037] append 3 after the last element.': [1, 1.0]
'[c037] append 3 at the end of the list.': [2, 2.0]
'[c037] append 3 if the list contains 3 or 8.': [1, 1.0]
'[c037] append 3 if the list contains a 3, else append 9 if the list contains a 9.': [1, 0.75]
'[c037] append 3 if the list contains at least one odd element.': [1, 0.875]
'[c037] append 3 if the list does not contain a 3.': [1, 1.0]
'[c037] append 3 to the end of the list.': [2, 2.0]
'[c037] append 3 to the end.': [1, 1.0]
'[c037] append 3 to the list.': [2, 2.0]
'[c037] append 3.': [1, 1.0]
'[c037] append a 3 to the end of the list.': [1, 1.0]
'[c037] append a 3 when the list is non-empty.': [1, 1.0]
'[c037] append a 3.': [3, 3.0]
'[c037] append the number 3 at the end of the list.': [1, 1.0]
'[c038] add 9 to the end of the list.': [1, 1.0]
'[c038] append 9 after the list.': [1, 1.0]
'[c038] append 9 at the end of the list.': [2, 2.0]
'[c038] append 9 at the end.': [1, 1.0]
'[c038] append 9 if the list is not a list of all unique numbers.': [1, 0.875]
'[c038] append 9 to the array.': [1, 1.0]
'[c038] append 9 to the end of a given list.': [1, 1.0]
'[c038] append 9 to the end of the list.': [2, 2.0]
'[c038] append 9 to the list.': [4, 4.0]
'[c038] append 9.': [2, 2.0]
'[c038] append a 9 if the list does not contain a 9.': [1, 0.75]
'[c038] append the maximum element 9 at the end if the list does not contain 9.': [1, 0.875]
'[c039] append 3.': [1, 0.25]
'[c039] append 9 if it is not in the list.': [1, 0.25]
'[c039] append 9 if the list contains a 9, else append 3.': [3, 1.25]
'[c039] append 9 if the list contains a 9, else do nothing.': [1, 0.25]
'[c039] append 9 if the list does not contain a 9, otherwise the list remains unchanged.': [1, 0.375]
'[c039] append 9 if the list does not have a 9, else do not change the list.': [1, 0.5]
'[c039] append 9 if the list doesn''t already contain it.': [1, 0.5]
'[c039] append 9 if there is no 9.': [1, 0.375]
'[c039] append 9 if there''s no 9, else don''t change the list.': [1, 0.375]
'[c039] append 9 then 3 if the list contains a 3, else append 9 if the list contains a 9.': [1, 0.125]
'[c039] append 9 to the end if the list doesn''t contain 9.': [1, 0.375]
'[c039] append 9 to the list if it doesn''t contain a 9, or do nothing if it contains a 9.': [1, 0.375]
'[c039] append 9 to the list if list does not contain 2, else append 3.': [1, 0.25]
'[c039] append 9 when there is a 9 in the list.': [1, 0.375]
'[c039] append 9 when there is no 9, otherwise append 3.': [1, 0.125]
'[c039] append a 9 if the list does not already contain a 9.': [1, 0.375]
'[c039] append a 9 to the list if it doesn''t contain a 9.': [1, 0.375]
'[c039] replace a 0 with a 9 if there is one.': [1, 0.375]
'[c040] add an element to the list that is the same as the first element.': [1, 0.25]
'[c040] append 3 at the end if it is not already the last element.': [1, 0.0]
'[c040] append 9 if the list contains a 9, else append 3.': [1, 0.75]
'[c040] append 9 if the list contains a 9.': [2, 1.0]
'[c040] append 9 to any list.': [1, 0.25]
'[c040] append 9 to the end.': [1, 0.25]
'[c040] append 9 to the given list.': [1, 0.25]
'[c040] append a 9 if the list contains a 0.': [1, 0.375]
'[c040] append the first element at the end.': [2, 0.5]
'[c040] append the first element of the list to the end of the list.': [1, 0.25]
'[c040] append the first element to the end of the array.': [1, 0.25]
'[c040] append the first element to the end of the list.': [3, 0.75]
'[c040] append the first element to the list.': [2, 0.5]
'[c040] append the first element.': [1, 0.25]
'[c040] repeat the last element.': [1, 0.25]
'[c041] add 5 to each element and return the sum of all elements.': [1, 0.125]
? '[c041] add the count of similar elements and the first half of the list with the count of similar elements in the second half of the list.'
: [1, 1.0]
'[c041] check if all the elements sum up to 9.': [1, 1.0]
'[c041] check if the sum of all the even elements of the list is equal to 9.': [1, 1.0]
'[c041] compare all the numbers in the list and if they are all the same, return 9, else 0.': [1, 0.625]
? '[c041] find the sum of the largest three elements in the list, and then the sum of the three smallest elements in the list, and then add the two.'
: [1, 0.0]
'[c041] replace all elements with 9.': [1, 1.0]
'[c041] replace any duplicate element with 9.': [1, 0.375]
'[c041] replace elements with 9 if the list contains a 4 and contains a 5.': [1, 1.0]
'[c041] replace the duplicate elements with 9.': [1, 1.0]
'[c041] sum all elements in the list and if the sum is 9, return 9, else return 0.': [1, 0.375]
'[c041] sum all elements in the list and if the sum is less than 10, then output 9.': [1, 0.0]
'[c041] sum all elements in the list.': [1, 1.0]
'[c041] sum all the elements and if the sum is 20, replace it with 9.': [1, 1.0]
'[c041] sum all the elements in the list.': [1, 0.125]
'[c041] sum all the elements.': [2, 2.0]
'[c041] sum all unique pairs and add 9.': [1, 1.0]
'[c041] sum the two smallest elements and replace them with 9.': [1, 0.25]
'[c041] take the sum of all the integers in the array.': [1, 0.125]
'[c042] generate a list containing 5 and 2.': [1, 1.0]
'[c042] generate a list of [5, 2].': [1, 1.0]
'[c042] output [5, 2] for any input list.': [1, 1.0]
'[c042] print [5, 2].': [1, 1.0]
'[c042] replace 3, 4, 6, 7, 8, 9  with 5, 2 respectively.': [1, 0.0]
'[c042] replace all elements with 2 and 5.': [1, 0.25]
'[c042] replace all elements with 5 and 2.': [2, 2.0]
'[c042] replace all occurrences of 2 and 5 with 5 and 2, respectively.': [1, 0.125]
'[c042] replace all occurrences of a 4 with a 2, a 7 with a 5, a 8 with a 9, and a 9 with an 8.': [1, 0.375]
'[c042] replace every element with 5 and 2.': [1, 1.0]
'[c042] replace the first element with 5 and second element with 2.': [1, 0.0]
? '[c042] return [5, 2] if the given list contains a 4, 3, and 9, else return [5, 2] if the given list contains a 4, 7, and 9, else return [5, 2] if the given list contains a 4 and 3, else return [5, 2] if the given list contains only 4, else return [5, 2] if the given list contains only 9, else return [5, 2] if any of the numbers are repeated in the given list, else return [5, 2].'
: [1, 1.0]
'[c042] return [5, 2] if the list contains any 9s, 3s, 4s, 7s, or 0s, else return [5, 2].': [1, 1.0]
'[c042] return [5, 2] if there is any 7 or 9 in the list.': [1, 1.0]
'[c042] return [5, 2] to every input list.': [1, 1.0]
'[c042] return a list of [5, 2] if the list contains 5 and 3, or 3 and 4.': [1, 1.0]
'[c042] return a list with two elements, 5 and 2.': [1, 1.0]
'[c042] return the list [5, 2].': [1, 1.0]
'[c042] return the number 5 and 2.': [1, 1.0]
'[c043] generate a list of 8, 2, 7, 0, 3.': [1, 1.0]
'[c043] generate a list of elements 8, 2, 7, 0, 3.': [2, 2.0]
'[c043] generate a list of numbers [8, 2, 7, 0, 3].': [1, 1.0]
'[c043] generate the list [8, 2, 7, 0, 3] if the list contains either any 5 or 4.': [1, 1.0]
'[c043] generate the output [8, 2, 7, 0, 3] irrespective of the input.': [1, 1.0]
? '[c043] remove duplicate elements, take the unique elements, put 8 in the first place, 2 in the second place, and 7 in the third place and add this list to the end of the array.'
: [1, 1.0]
'[c043] replace 4 or 6 with 7, append 0, replace 9 with 2 then replace 5 with 3.': [1, 1.0]
'[c043] replace all elements with 2 except the ones 6.': [1, 0.5]
'[c043] replace all odd numbers with 8 and all even numbers with 2, and then add 7 and 0 to the list.': [1, 0.0]
'[c043] replace all the elements with 7, 0, 3, 8, 2 in order.': [1, 1.0]
'[c043] replace each 6 with a 7, and each 9 with a 0.': [1, 0.25]
'[c043] replace every element with [8, 2, 7, 0, 3].': [1, 1.0]
? '[c043] replace every number 6 with 8 and every number 9 with 2, then find the difference between the largest and smallest elements of the list.'
: [1, 0.875]
? '[c043] replace first three even elements with 8, 2, 7, then first odd element with 0, and then first three elements with 3.'
: [1, 0.25]
? '[c043] replace the first element with 8, the second element with 2, the third element with 7, the fourth element with 0, and the fifth element with 3.'
: [1, 0.0]
'[c043] return [8, 2, 7, 0, 3].': [1, 1.0]
'[c043] sum the digits in the array, multiply the result by 2, and then add 7.': [1, 1.0]
'[c043] swap the first 2 elements.': [1, 1.0]
'[c044] convert the elements into frequencies of numbers.': [1, 1.0]
? '[c044] convert the numbers to their corresponding ASCII values, then subtract 48 to get the ASCII value of the character in that position in the string "1943258049".'
: [1, 0.125]
'[c044] generate a list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9].': [1, 1.0]
'[c044] generate a list of elements 1, 9, 4, 3, 2, 5, 8, 0, 4, 9.': [1, 1.0]
'[c044] replace 0 and 6 with 1 and 9 respectively, then add 9, 4, 3, 2, 5, 8, 0, 4, 9 at the end.': [1, 1.0]
'[c044] replace all ''6'', ''7'' and ''8'' to 1, 9 and 4 respectively.': [1, 0.0]
? "[c044] replace all 0\u2019s with 9\u2019s, all 2\u2019s with 9\u2019s, all 3\u2019s with 4\u2019s, all 5\u2019s with 1\u2019s, all 7\u2019s with 6\u2019s, all 6\u2019s with 8\u2019s and all 8\u2019s with 5\u2019s."
: [1, 0.0]
'[c044] replace all occurences of the first element with 1, all occurences of the second element with 9, and so on.': [1, 0.0]
'[c044] replace all of the occurrences of 3 with 1, 7 with 4, 0 with 9, 2 with 5, 6 with 8.': [1, 0.0]
'[c044] replace all the numbers with the ten digits in order, and replace 0 with 9.': [1, 0.75]
? '[c044] replace all the ones with 4, twos with 9, threes with 3, fours with 2, zeroes with 8, sevens with 0, sixes with 5, fives with 1, and eights with 4 for the 4 times the current element.'
: [1, 0.0]
'[c044] replace all zeros with 4 and sixes with 8, then arrange the digits in descending order.': [1, 0.75]
'[c044] replace each element with the corresponding element in the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9].': [1, 0.875]
? '[c044] replace every prime number in the list with 8 and every non-prime number with 0, then create a new list containing 9s in all the non-zero indexes and 4s in the zero indexes.'
: [1, 0.625]
? '[c044] replace the 0s with 8, the 1s with 2, the 2s with 4, the 3s with 9, the 4s with 3, the 5s with 7, the 6s with 6, the 7s with 1, and the 8s with 5.'
: [1, 0.0]
'[c044] replace the first and last element with 1, 9, 4, 3, 2, 5, 8, 0, 4, 9 in order.': [1, 0.5]
'[c044] replace the numbers with 1, 9, 4, 3, 2, 5, 8, 0, 4, 9 sequentially, with any higher value wrapping back around.': [1, 0.875]
'[c044] swap the first element with the last element, append 1, and sum the elements of the list.': [1, 1.0]
'[c045] do nothing if the list contains only 1 to 9.': [1, 1.0]
'[c045] do nothing if the number of elements in the array is even.': [1, 1.0]
'[c045] do nothing to the list.': [3, 3.0]
'[c045] do nothing, since every list remains the same.': [1, 1.0]
'[c045] do nothing.': [6, 6.0]
'[c045] keep the list as it is.': [1, 1.0]
'[c045] leave the list as is.': [1, 1.0]
'[c045] leave the list as it is.': [1, 1.0]
'[c045] no-op.': [1, 1.0]
'[c045] not modify the list.': [1, 1.0]
'[c045] return the original list, with no modifications.': [1, 1.0]
'[c045] return the original list.': [1, 1.0]
'[c046] add 7 to each element in the list.': [1, 0.875]
'[c046] add 7 to every element.': [1, 0.0]
'[c046] add 7 to the beginning of the list.': [1, 1.0]
'[c046] add 7 to the first element of the integer elements.': [1, 0.0]
'[c046] add 7 to the list if the list contains a 0, else add 7 at the beginning of the list.': [1, 1.0]
'[c046] add a 7 at the beginning of the list.': [1, 0.875]
'[c046] add a 7 at the beginning.': [1, 1.0]
'[c046] append 7 at the beginning of the list.': [1, 0.875]
'[c046] append 7 to the beginning of the list.': [1, 1.0]
'[c046] append 7.': [1, 1.0]
'[c046] prepend 7 if the list begins with 0.': [1, 0.375]
'[c046] prepend 7 to the given list.': [2, 1.875]
'[c046] prepend 7 to the list.': [2, 1.875]
'[c046] prepend 7.': [2, 1.75]
'[c046] replace 0 with 7.': [1, 0.0]
'[c047] add 3 and 6 to the beginning of the list.': [1, 0.75]
'[c047] add 6, 3, 8, etc.': [1, 0.875]
'[c047] add 9, 6, 3 to the list before, 8, 5 and after, the original list.': [1, 0.75]
'[c047] add 9, 6, 3, 8, 5 to the beginning of the input.': [1, 0.875]
'[c047] add a 3 in between every element, then replace the first element with a 9.': [1, 0.0]
'[c047] add one to all even elements and multiply by 3 all odd elements, and then add 6 and 3 to the list.': [1, 0.0]
'[c047] add the pairs 6, 3, 8, 5, 9 in this order after each element in the list.': [1, 0.75]
'[c047] always insert 3, 6, and 9 between the digits of the given number (9 is inserted after 6).': [1, 0.875]
'[c047] append 6, 3, 8, 5 after the first element followed by the appended elements.': [1, 1.0]
'[c047] create a list containing the elements [9, 6, 3, 8, 5] followed by the list.': [1, 1.0]
'[c047] create a list from 1 to a number that is 3 more than the largest number in the list.': [1, 1.0]
'[c047] generate a new list which starts with the number 3, then number 8, then number 6, and then repeat the list.': [1, 1.0]
'[c047] insert 9, 6, 3, 8, and 5 after each element.': [1, 0.0]
'[c047] insert the following sequence 9, 6, 3, 8, 5 after each element.': [1, 0.875]
'[c047] prepend 9, 6, 3, 8, 5 and append same numbers at odd indices in the new list.': [1, 0.875]
'[c047] replace every element with 9, 6, 3, 8, 5 and then again 9, 6, 3, 8, 5.': [1, 0.875]
'[c048] append the largest element to the list.': [1, 0.125]
'[c048] find any element that is not repeated in the list and print it.': [1, 1.0]
'[c048] find the first odd element.': [1, 0.5]
'[c048] find the greatest element in the list.': [1, 0.125]
'[c048] find the largest number.': [1, 0.125]
'[c048] find the maximum element and return it.': [1, 0.125]
'[c048] find the maximum number in the list.': [1, 0.125]
'[c048] find the smallest element.': [1, 0.125]
'[c048] get the element at index 0 of the list.': [1, 1.0]
'[c048] get the first element of the list.': [1, 1.0]
'[c048] get the maximum element.': [1, 0.125]
'[c048] keep the first element.': [1, 1.0]
'[c048] output the first element of the list.': [1, 1.0]
'[c048] remove all even elements.': [1, 0.25]
'[c048] remove the greatest element from the list.': [1, 0.125]
'[c048] retain the first element in the list.': [1, 1.0]
'[c048] return the first element of the list.': [1, 1.0]
'[c048] return the first element.': [1, 1.0]
'[c048] return the largest element.': [1, 0.125]
'[c048] select the first element.': [1, 1.0]
'[c049] remove 9 and shift all the elements to the left.': [1, 0.25]
'[c049] remove 9.': [2, 0.625]
'[c049] remove all instances of 9.': [1, 0.375]
'[c049] remove all occurrences of the first element from the list.': [1, 0.875]
'[c049] remove the first element from the list.': [2, 2.0]
'[c049] remove the first element if it is 9.': [5, 1.25]
'[c049] remove the first element if it is equal to 9.': [1, 0.25]
'[c049] remove the first element in the list.': [1, 1.0]
'[c049] remove the first element of the list if the first element is 9.': [1, 0.25]
'[c049] remove the first element.': [3, 2.625]
'[c049] remove the first number when it equals 9, otherwise do nothing.': [1, 0.25]
'[c050] append the first element to itself.': [1, 1.0]
'[c050] append the first element to the list at index 1.': [1, 1.0]
'[c050] double the first element.': [4, 2.0]
'[c050] duplicate each element in the list.': [1, 0.5]
'[c050] duplicate each element.': [2, 1.75]
'[c050] duplicate the first element of the list.': [1, 1.0]
'[c050] duplicate the first element.': [4, 4.0]
'[c050] repeat each element.': [2, 1.375]
'[c050] repeat the first element.': [3, 3.0]
'[c051] copy the first element the same number of times as its value.': [1, 0.0]
'[c051] duplicate each element.': [2, 0.0]
'[c051] multiply elements in the list by the first element.': [1, 0.25]
'[c051] print each element 6 times.': [1, 0.0]
'[c051] repeat all elements 3 times.': [1, 0.0]
'[c051] repeat each element 3 times.': [1, 0.0]
'[c051] repeat each element of the list 3 times.': [1, 0.0]
'[c051] repeat each number a number of times equal to that number.': [1, 0.0]
'[c051] repeat the first element 6 times before the list.': [1, 0.0]
'[c051] repeat the first element at the head of the list.': [1, 0.75]
'[c051] repeat the first element of the list for all elements.': [1, 1.0]
'[c051] repeat the first element.': [1, 0.75]
'[c051] replace each element with the first element.': [1, 0.0]
'[c051] triplicate the first element.': [1, 0.0]
'[c052] duplicate each element.': [3, 0.0]
'[c052] duplicate each number in the list.': [1, 0.0]
'[c052] generate a list by repeating first element n times, where n is the size of the original array.': [1, 0.375]
'[c052] multiply the first element by itself N times.': [1, 1.0]
'[c052] repeat each element 10 times.': [4, 0.5]
'[c052] repeat each element 3 times.': [2, 0.25]
'[c052] repeat each element three times.': [1, 0.125]
'[c052] repeat each element to ten times.': [1, 0.125]
'[c052] repeat the elements three times.': [1, 0.0]
'[c052] repeat the first element in the list.': [1, 1.0]
'[c052] return a list of the same length containing the first element for all positions.': [1, 1.0]
'[c053] add the first element to itself.': [1, 1.0]
'[c053] append a duplicate of the first element in the list.': [1, 0.0]
'[c053] append the first element to itself.': [2, 0.25]
'[c053] append the first element to the list.': [1, 0.0]
'[c053] append the first element to the second element.': [1, 0.25]
'[c053] append the first element.': [1, 0.375]
'[c053] copy and append the first element of the list.': [1, 0.0]
'[c053] duplicate each element in the list.': [1, 0.0]
'[c053] duplicate each element.': [1, 0.0]
'[c053] duplicate the first element in the list.': [1, 0.0]
'[c053] duplicate the first element.': [5, 0.0]
'[c053] repeat each element.': [1, 0.0]
'[c054] add 6 to every element.': [1, 0.0]
'[c054] append 6 as many times as the second element in the list.': [1, 0.0]
'[c054] create a list containing the first element, 3 times.': [1, 0.0]
'[c054] duplicate the 3rd element of the list.': [1, 0.0]
'[c054] generate a list of element 5, then take the element at the index given by 2 and repeat it 3 times.': [1, 0.0]
'[c054] generate a list of the next lower element 3 times.': [1, 0.25]
'[c054] generate a list with the digit "6" for each element.': [1, 0.0]
'[c054] multiply each element by 2.': [1, 0.0]
'[c054] multiply each element with 3.': [1, 0.0]
'[c054] repeat every element 3 times.': [1, 0.0]
'[c054] repeat the fourth element.': [1, 0.0]
'[c054] repeat the second element.': [1, 0.0]
'[c054] repeat the smallest element 3 times in the front.': [1, 0.125]
'[c054] repeat the third element of the list and insert it after all the other elements.': [1, 0.0]
'[c054] replace elements at index 0 to k-1 with the element k, where k is the minimum number in the list.': [1, 0.125]
'[c054] replace the first element with the last element.': [1, 0.0]
'[c054] replace the first element with the third element.': [1, 0.0]
'[c054] replace the first two elements with the third element.': [1, 1.0]
'[c055] arrange the list in descending order.': [1, 0.25]
? '[c055] find the smallest element, move it to the first position, and then move all the elements it is equal to to the end of the list.'
: [1, 0.25]
'[c055] interchange the first and second elements.': [1, 0.25]
? '[c055] move all the odd elements to the front of the array in the same order and keep the order of the even elements unchanged.'
: [1, 0.25]
'[c055] move the first element to the third position.': [1, 0.25]
'[c055] move the smallest number to the front.': [1, 0.375]
'[c055] place the largest element at the beginning of the list.': [1, 0.25]
'[c055] place the largest element onto the first index of the array.': [1, 0.375]
'[c055] remove all even numbers.': [1, 0.25]
'[c055] return the closest number to the middle rounded to the nearest integer.': [1, 0.25]
'[c055] reverse the array and add the smallest element as its first element.': [1, 0.25]
'[c055] reverse the elements of the array except for the first element.': [1, 0.25]
'[c055] sort the elements in ascending order.': [1, 0.25]
'[c055] swap the first and second elements.': [4, 1.0]
'[c055] swap the second and third elements.': [1, 0.25]
'[c055] take every other number starting from the second number and append it to the end of the list.': [1, 0.375]
'[c056] do nothing, so the answer to all the questions is the same as the input.': [1, 0.125]
'[c056] do nothing.': [10, 1.25]
'[c056] ignore any non-zero element.': [1, 0.125]
'[c056] leave the list unchanged.': [1, 0.125]
'[c056] not alter the list if it already contains a 0.': [1, 0.125]
'[c056] not modify the list.': [1, 0.125]
'[c056] remove all instances of 4.': [1, 0.25]
'[c056] retain the state of a specific list.': [1, 0.125]
'[c056] return the input list as it is.': [1, 0.125]
'[c057] add 4 after the first element in the list.': [1, 0.5]
'[c057] add 4 to the last element.': [2, 1.0]
'[c057] always append 4 to the list.': [1, 0.5]
'[c057] append 4 if the list contains a 2.': [1, 0.375]
'[c057] append 4 if the list contains a 3, else append 4 if the list contains a 4.': [1, 0.25]
'[c057] append 4 if the list contains a 3.': [1, 0.25]
'[c057] append 4 if the list contains a 6.': [1, 0.375]
'[c057] append 4 if the list does not contain 4.': [1, 0.5]
'[c057] append 4 into the list.': [1, 0.625]
'[c057] append 4 to the end of the list.': [1, 0.5]
'[c057] append 4 to the list if it does not contain a 4.': [1, 0.5]
'[c057] append 4 to the list.': [2, 1.0]
'[c057] append 4.': [2, 1.0]
'[c057] append a 4 into the list.': [1, 0.5]
'[c057] append a 4 to the end of the list.': [1, 0.5]
'[c057] append the number 4 to the end of the list.': [1, 0.5]
'[c057] append the value 4.': [1, 0.5]
'[c058] find elements 3, 2, 1, then return the last 2 elements in a list.': [1, 0.625]
'[c058] find the first two elements that occurs in an odd index.': [1, 0.25]
'[c058] find the last even and odd numbers in the list.': [1, 0.25]
'[c058] generate a list of the first and last elements from the list.': [1, 0.125]
'[c058] generate a list of the last two elements.': [1, 0.125]
'[c058] generate a list of the maximum two elements.': [1, 0.125]
'[c058] generate the maximum and minimum elements.': [1, 0.125]
'[c058] get the largest and smallest elements in the list.': [1, 0.125]
'[c058] keep only the largest and smallest elements.': [1, 0.125]
'[c058] list the last 2 elements of the list.': [1, 0.125]
'[c058] remove elements that appear an even number of times.': [1, 0.5]
'[c058] remove elements that are greater than the smallest element.': [1, 0.25]
'[c058] remove elements until the list becomes empty, and return the last two elements.': [1, 0.125]
'[c058] return all pairs of elements that sum to 10.': [1, 0.25]
'[c058] return elements that are not factors of 7.': [1, 0.0]
'[c058] return only the largest and smallest elements from the list.': [1, 0.125]
'[c058] return the last two elements in the list only if the list contains elements 6 and 9.': [1, 0.75]
'[c058] return the last two elements.': [1, 0.25]
'[c058] return the two smallest elements within the list.': [1, 0.125]
'[c059] exchange every number with the number at the same position after reversing the list.': [1, 0.0]
'[c059] place an element in place of the element that is 2 positions after it.': [1, 0.0]
'[c059] replace each element with the difference between itself and 5 if the element is greater than 5, else add 5.': [1, 0.0]
'[c059] replace one of the two occurrences of the first element with the second element.': [1, 0.0]
'[c059] reverse the odd indices.': [1, 0.125]
'[c059] sort the numbers in the ascending order.': [1, 0.0]
'[c059] swap every pair of elements.': [1, 0.0]
'[c059] swap the first and last elements.': [1, 0.0]
'[c059] swap the last two elements.': [1, 0.0]
'[c059] switch the position of the 6th element.': [1, 0.0]
'[c060] delete all even numbers.': [1, 0.0]
'[c060] first find the second largest element and then replace the first element with it.': [1, 0.0]
'[c060] generate a list of all occurrences of 4, and append the number 4.': [1, 0.0]
'[c060] generate a list of element 7, then the number 4, then the difference of every pair.': [1, 0.0]
'[c060] generate a list of elements 4, the element that appears the most, 7, the second most, 8, the third most.': [1, 0.0]
'[c060] generate a list of elements 7, 4, 9, then the same number 4 repeatedly, and then the remaining elements.': [1, 0.0]
'[c060] generate a list of elements 7, 4, and then every even number in ascending order.': [1, 0.0]
'[c060] generate a list of elements 7, 4, the last two elements, and then 8.': [1, 0.0]
? '[c060] generate a list of elements from the largest odd number, 4, then the 2nd largest odd number, 4 again, 3rd largest odd number, 4 again, and so on, till the smallest odd number 1.'
: [1, 0.25]
'[c060] generate a list of the elements and then 4.': [1, 0.25]
'[c060] generate a new list where each number is replaced by the sum of itself and the next number.': [1, 0.0]
'[c060] remove all even numbers, leaving a sorted list of odd numbers.': [1, 0.0]
'[c060] replace 4 with 5, and 5 with 4.': [1, 0.0]
'[c060] replace the first element with the fourth element, and replace the fourth element with the first element.': [1, 0.25]
'[c060] reverse the list, then reverse each even index group.': [1, 0.125]
'[c060] take every second number, starting from the second number of the list.': [1, 0.0]
'[c061] choose the last element.': [1, 1.0]
'[c061] find the highest element in the list.': [1, 0.5]
'[c061] find the last element.': [1, 1.0]
'[c061] find the maximum element.': [1, 0.5]
'[c061] output the last element.': [1, 1.0]
'[c061] pick the largest element.': [1, 0.5]
'[c061] pick the last element of the given list.': [1, 1.0]
'[c061] remove all elements except the smallest element.': [1, 0.0]
'[c061] remove all the even numbers.': [1, 0.0]
'[c061] replace the first element with the last element if the last element is greater than or equal to 5.': [1, 0.0]
'[c061] retain only the largest element.': [1, 0.5]
'[c061] retain the largest element from the list.': [1, 0.5]
'[c061] return the element that is highest (in value).': [1, 0.5]
'[c061] return the largest element in the list.': [1, 0.5]
'[c061] return the largest element.': [1, 0.5]
'[c061] return the last element.': [3, 3.0]
'[c061] return the maximum value.': [1, 0.5]
'[c061] select the largest element.': [1, 0.5]
'[c062] delete the last element if it is even.': [1, 0.75]
'[c062] delete the smallest number.': [1, 0.75]
'[c062] drop the first and last elements.': [1, 0.875]
'[c062] drop the last element if it is 6.': [1, 0.875]
'[c062] remove all 6''s from the list.': [1, 0.125]
'[c062] remove all odd elements from the list.': [1, 0.125]
'[c062] remove the 0s.': [1, 0.0]
'[c062] remove the final element if it is even.': [1, 0.75]
'[c062] remove the first occurence of 6.': [1, 0.125]
'[c062] remove the last element if it is equal to 6.': [1, 0.75]
'[c062] remove the last element if it is even.': [1, 0.875]
'[c062] remove the last element if it is odd.': [1, 1.0]
'[c062] remove the last element if the list contains a 0.': [1, 1.0]
'[c062] remove the last element.': [5, 5.0]
'[c063] delete all elements 1.': [1, 0.0]
'[c063] delete all the instances of 1.': [1, 0.0]
'[c063] drop all elements with the same value as the first element.': [1, 0.375]
'[c063] filter out all even elements.': [1, 0.0]
'[c063] remove all elements that appear before the first non-zero element.': [1, 0.25]
'[c063] remove all elements that are smaller than the first element.': [1, 0.0]
'[c063] remove all elements that occur before the first occurrence of 0.': [1, 0.0]
'[c063] remove all instances of 0.': [1, 0.375]
'[c063] remove all occurrences of 0.': [1, 0.375]
'[c063] remove all occurrences of the element 9.': [1, 0.0]
'[c063] remove all occurrences of the first element.': [1, 0.375]
'[c063] remove all the elements equal to 0.': [1, 0.375]
'[c063] remove all the elements which are smaller than the first element.': [1, 0.375]
'[c063] remove elements that are even.': [1, 0.125]
'[c063] remove elements that are multiples of 3.': [1, 0.0]
'[c063] remove every other element, starting from the first one.': [1, 0.0]
'[c063] remove maximum value from the list.': [1, 0.5]
'[c063] remove the elements at even positions.': [1, 0.375]
'[c063] remove the elements of even index, starting from 0.': [1, 0.0]
'[c064] delete the first occurrence of 2.': [1, 0.0]
'[c064] delete the first occurrence of number 2.': [1, 0.0]
'[c064] get rid of the first element if it is not 0.': [1, 0.0]
'[c064] keep only the unique numbers.': [1, 0.0]
'[c064] remove 2''s.': [1, 0.0]
'[c064] remove all 8s.': [1, 0.0]
'[c064] remove all elements greater than the first element.': [1, 0.125]
'[c064] remove all elements greater than the smallest element.': [1, 0.0]
'[c064] remove all elements that are greater than the first element.': [1, 0.0]
'[c064] remove all instances of the smallest number.': [1, 0.0]
'[c064] remove all odd elements.': [1, 0.125]
'[c064] remove all the even elements.': [1, 0.0]
'[c064] remove elements which are greater than or equal to 3.': [1, 0.125]
'[c064] remove the first and the last element.': [1, 0.875]
'[c064] remove the first element.': [1, 0.0]
'[c064] remove the last element if it is even.': [1, 0.0]
'[c064] remove the lowest element from the list.': [1, 0.0]
'[c064] remove the minimum element.': [1, 0.0]
'[c064] remove the second element.': [1, 0.0]
'[c064] remove the smallest element.': [1, 0.0]
'[c065] add 7 and 9 to the beginning of the list.': [1, 1.0]
'[c065] add 7 to each element, then append 9 to the list.': [1, 0.25]
'[c065] add 9 and the number 7 to the end of the list.': [1, 1.0]
'[c065] add 9 to each element and append 7.': [1, 0.0]
'[c065] add 9 to the end of the list if the list is odd length, or add 9 and 7 if the list is even length.': [1, 1.0]
'[c065] add 9 to the first number, add 7 to the last number and add 7 to every number except the first and the last.': [1, 1.0]
'[c065] add 9, then add 7 if the list contains a 7.': [1, 0.0]
'[c065] add a 9 to the front of the list, then append a 7 at the end of the list.': [1, 1.0]
'[c065] append 7 and 9.': [1, 1.0]
'[c065] append 7 and then append 9 to the list.': [1, 0.0]
'[c065] append 7 if the list contains a 9, else append the number 9.': [1, 0.25]
'[c065] append 7 if the list has 9 and to append 9 if the list has 7.': [1, 1.0]
'[c065] append 7 or 9 to the end of the list.': [1, 1.0]
'[c065] append 9 if the first elements is even, else append 7 if the first element is odd.': [1, 0.5]
'[c065] append 9, then 7.': [1, 1.0]
'[c065] append a 9 and 7 to the list.': [1, 1.0]
'[c065] insert 7 after each element and insert 9 before the first element.': [1, 1.0]
'[c065] insert a 9 followed by a 7 after the first element.': [1, 1.0]
'[c065] prefix every element in the list with a 9 and suffix it with a 7.': [1, 1.0]
'[c065] prepend 9, append 7 then return the list.': [1, 1.0]
'[c066] eliminate the first element.': [1, 1.0]
'[c066] move the first element to the end.': [2, 2.0]
'[c066] move the first element to the last position.': [1, 1.0]
'[c066] move the first element to the second index.': [1, 0.125]
'[c066] move the first element to the second last.': [1, 1.0]
'[c066] move the first element to the second position.': [3, 0.375]
'[c066] remove the first element and add it to the end of the list.': [1, 1.0]
'[c066] remove the first element and add it to the end.': [1, 1.0]
'[c066] remove the first element and append it at the end.': [1, 1.0]
'[c066] remove the first element and move it to the end.': [1, 1.0]
'[c066] remove the first element in the list and append it to the end.': [1, 1.0]
'[c066] remove the first element in the list.': [1, 1.0]
'[c066] rotate every element in the list to its right.': [1, 1.0]
'[c066] shift the elements to the left by one position.': [1, 1.0]
'[c066] sort the elements in ascending order.': [1, 0.125]
'[c067] arrange the elements in ascending order.': [1, 0.0]
'[c067] move the last element to the beginning.': [1, 1.0]
'[c067] reverse every pair of consecutive elements.': [1, 0.125]
'[c067] reverse order of elements in the list.': [1, 0.125]
'[c067] reverse the elements and put the maximum element at the end.': [1, 0.125]
'[c067] reverse the first and the last elements of the list.': [1, 1.0]
'[c067] reverse the integers in the list.': [1, 0.125]
'[c067] sort the array in descending order.': [1, 0.25]
'[c067] sort the elements in ascending order.': [2, 0.0]
'[c067] sort the elements in descending order.': [1, 0.25]
'[c068] add 3, 8, 4, 3 to the end of the list.': [1, 1.0]
'[c068] add 7, 3, 8, 4, 3 at the end of the list.': [2, 2.0]
'[c068] add 7, 3, 8, 4, and 3 to the end of the list in that order.': [1, 1.0]
'[c068] add [7,3,8,4,3] to the end.': [1, 1.0]
'[c068] append 3,7,8,4 to the end of the list.': [1, 1.0]
'[c068] append 7, 3, 8 and 4, 3 in that order.': [1, 1.0]
'[c068] append 7, 3, 8, 4, 3 after every element.': [1, 1.0]
'[c068] append 7, 3, 8, 4, 3 to the end of the list.': [1, 1.0]
'[c068] append 7, 3, 8, 4, 3 to the list.': [1, 1.0]
'[c068] append 7, 3, 8, 4, 3.': [2, 2.0]
'[c068] append 7, 3, 8, 4, and 3 to the original list.': [1, 1.0]
'[c068] append 7, 3, 8, 4, then 3.': [1, 1.0]
'[c068] append a new list [7, 3, 8, 4, 3] after the original list.': [1, 1.0]
'[c068] insert 7, 3, 8, 4, 3 after each element successively.': [1, 1.0]
'[c068] insert 7, 3, 8, 4, 3 after each element.': [1, 0.875]
'[c069] add 3, 4, 0, 7, 2, 9, 1 after each element.': [1, 0.875]
'[c069] add 9, 3, 4 and 0 at the beginning of the list, then append 7, 2, 9 and 1 at the end.': [1, 1.0]
'[c069] add 9, 3, 4, 0 to the end of the list, and 7, 2, 9, 1 to the middle of the list.': [1, 1.0]
'[c069] add 9, 3, 4, 0, repeat the list, add 7, 2, 9, 1 to the end.': [1, 1.0]
'[c069] add [9, 3, 4, 0] to the start and [7, 2, 9, 1] to the end of the list.': [1, 1.0]
? '[c069] add a number to the end of the array, that is calculated by summing all the elements, multiplying it by 3, adding 4, and taking the mod of this value with 10.'
: [1, 0.875]
'[c069] append 9, 3, 4, 0, sort the list, then append 7, 2, 9, 1.': [1, 0.25]
'[c069] append the last element to the end, append 3, 4, 0, 9, 7, 2, and then 1 to the end.': [1, 0.0]
'[c069] clone sublist [9, 3, 4, 0] and append it to the end of the list.': [1, 0.875]
'[c069] generate a list of elements 9, 3, 4, 0, move the existing elements to the end, and then add 7, 2, and 9.': [1, 1.0]
'[c069] include 9, 3, 4, 0 before the list elements, and 7, 2, 9, 1 after the list elements.': [1, 1.0]
'[c069] insert 3''s between each number.': [1, 0.875]
'[c069] insert 9 then 3 then 4 then 0.': [1, 1.0]
'[c069] prefix the list with 9, 3, 4, and 0, postfix it with 7, 2, and 9, and insert 1 in between 0 and 7.': [1, 0.0]
'[c069] prefix the list with [9, 3, 4, 0], then append 7, 2, 9, and 1.': [1, 1.0]
'[c070] add the first element to the end of the list.': [1, 0.375]
'[c070] append the list to itself.': [1, 1.0]
'[c070] double every element in a list.': [1, 1.0]
'[c070] double the element.': [1, 1.0]
'[c070] duplicate each element in the list.': [1, 1.0]
'[c070] duplicate each element of the list.': [1, 1.0]
'[c070] duplicate each element.': [2, 2.0]
'[c070] duplicate every element.': [1, 1.0]
'[c070] duplicate the elements.': [1, 1.0]
'[c070] repeat each element twice.': [2, 2.0]
'[c070] repeat each number in the list twice.': [1, 1.0]
'[c070] repeat the array twice.': [1, 1.0]
'[c070] repeat the list elements.': [1, 1.0]
'[c070] repeat the list in a cycle.': [1, 1.0]
'[c070] repeat the list twice.': [1, 1.0]
'[c070] repeat the list.': [1, 1.0]
'[c071] add 2 to each element and take the remainder when divided by 10.': [1, 1.0]
'[c071] add 2 to each element.': [5, 5.0]
'[c071] increase every element by 2.': [1, 1.0]
'[c071] increment each element by 2.': [4, 4.0]
'[c071] increment every number by 2.': [1, 1.0]
'[c071] replace a number with the next prime number.': [1, 0.125]
'[c071] replace each element with its successor (plus 2).': [1, 1.0]
'[c071] replace each element with the sum of 2 and the digit present at the same index.': [1, 1.0]
'[c072] double all the elements.': [1, 1.0]
'[c072] double each element.': [2, 2.0]
'[c072] double the elements.': [1, 1.0]
'[c072] duplicate each element of the list.': [1, 0.875]
'[c072] duplicate each element.': [5, 5.0]
'[c072] duplicate each number.': [1, 1.0]
'[c072] duplicate every element.': [1, 0.75]
'[c072] duplicate the elements.': [1, 1.0]
'[c072] repeat each element of the list.': [1, 1.0]
'[c072] repeat every element in the input list.': [1, 1.0]
'[c072] repeat the elements in a list.': [1, 1.0]
'[c073] add 1 to each element if the element is less than 4, else subtract one.': [1, 0.0]
'[c073] add 1 to each element, then multiply by 2.': [1, 0.125]
'[c073] add 1 to each number and change each 9 to a 8.': [1, 0.0]
'[c073] add 1 to every element.': [1, 0.0]
'[c073] increment all elements by 1.': [1, 0.0]
'[c073] increment all the elements by 1.': [1, 0.0]
'[c073] increment by 1 all the even elements in the list and decrement by 1 all the odd elements.': [1, 0.0]
'[c073] increment by 1 each element or append 9 if the element is 8.': [1, 0.0]
'[c073] increment by 1 for each element.': [1, 0.0]
'[c073] increment each element by 1 (except zero), optionally handling overflow (10 becomes 1).': [1, 0.125]
'[c073] increment each element by 1 (for example, 0 becomes 1).': [1, 0.125]
'[c073] increment each element by 1, and if an element is 9, reset it to 0.': [1, 0.125]
'[c073] increment each element by 1, and if it is 9, then set it to 0.': [1, 0.0]
'[c073] increment each element by 1.': [2, 0.0]
'[c073] increment each element by one.': [2, 0.0]
'[c073] increment the element by 1.': [1, 0.0]
'[c073] replace each element i with i+1.': [1, 0.0]
'[c073] replace each number with the next highest number from the possible values of 9, 8, 7, etc.': [1, 0.375]
'[c074] append the greatest numbers to the list.': [1, 0.375]
'[c074] extract all the odd numbers.': [1, 0.0]
'[c074] extract the first and last elements.': [1, 0.0]
'[c074] find the maximum element.': [1, 0.125]
'[c074] generate a list of the largest elements.': [1, 0.125]
'[c074] get elements that are greater than 7.': [1, 0.625]
'[c074] keep elements greater than 7.': [1, 0.75]
'[c074] keep the greatest element from each pair of consecutive elements.': [1, 0.0]
'[c074] print only the elements greater than 7.': [1, 0.5]
'[c074] remove all odd numbers.': [1, 0.5]
'[c074] remove every element but the greatest.': [1, 0.125]
'[c074] retain if the element is greater than all elements to the right.': [1, 0.375]
'[c074] retrieve the largest elements.': [1, 0.125]
'[c074] retrieve the maximum elements.': [1, 0.125]
'[c074] return a list containing all the odd indexes.': [1, 0.125]
'[c074] return only the biggest odd numbers.': [1, 0.375]
'[c074] return the even elements that are greater than 7.': [1, 0.625]
'[c074] return the largest number and the second largest number.': [1, 0.25]
'[c074] return the largest number in the list.': [1, 0.125]
'[c074] return the number of times the number 8 occurs as the last element in the list.': [1, 0.0]
'[c075] delete the first occurrence of 0.': [1, 0.0]
'[c075] extract all elements except the element at index 0.': [1, 0.0]
'[c075] remove all 0s.': [1, 0.0]
'[c075] remove all elements 0.': [1, 0.0]
'[c075] remove all elements that are divisible by 3.': [1, 0.0]
'[c075] remove all elements with a 0.': [1, 0.0]
'[c075] remove all instances of 0 from the list.': [2, 0.0]
'[c075] remove all occurrences of 0 and then return every second element, skipping 0s.': [1, 0.0]
'[c075] remove all occurrences of 0 from the list.': [1, 0.0]
'[c075] remove all occurrences of 0.': [1, 0.0]
? '[c075] remove all occurrences of a 0 if the first element is less than 5, else remove all occurrences of a 5 if the last element is less than 5.'
: [1, 0.0]
'[c075] remove all occurrences of any zeros in the list.': [1, 0.0]
'[c075] remove all the elements 0.': [1, 0.0]
'[c075] remove all the elements smaller than 0.': [1, 0.0]
'[c075] remove all the occurrence of zeros and append them at the end.': [1, 0.0]
'[c075] remove the elements divisible by 9.': [1, 0.0]
'[c075] remove the occurrences of 0 from the list of numbers.': [1, 0.0]
? '[c076] duplicate the first element the number of times equal to the last element, and then append the first element the number of times equal to itself.'
: [1, 0.0]
'[c076] duplicate the last digit of the number and then append that value by 5.': [1, 0.125]
'[c076] find the largest element, append it 10 times, and then append the smallest element 10 times.': [1, 0.0]
? '[c076] generate a list of the last element, first element, half the length rounded up, then the list repeated that many times.'
: [1, 0.0]
? '[c076] generate a list of the last element, the first element, the size of the list, then the first element and the last element.'
: [1, 0.125]
'[c076] generate the following list [last_element, first_element, 2, last_element, first_element].': [1, 0.125]
'[c076] get the last element, divide it into two, make the second one half of the first, then put the original number last.': [1, 0.125]
? '[c076] move the first element to the end, duplicate the last element twice, increment all elements by 5, and replace all 0s with 10.'
: [1, 0.0]
'[c076] multiply the largest element by the length of the list, append it, then append double the length of the list.': [1, 0.0]
? '[c076] place the second largest value at the head, the second smallest value at the tail, then the largest, then the smallest, and so on.'
: [1, 0.125]
'[c076] repeat 5, then repeat the first element, then repeat the last element.': [1, 0.0]
'[c076] repeat every element in a list three times, and add 5 to the last element.': [1, 0.0]
? '[c076] replace the first element with the last element if the last element is greater than 10; otherwise, append 5 if there are 3 or more elements.'
: [1, 0.0]
'[c076] replace the first element with the last element, then rotate the list left by 3.': [1, 0.0]
? '[c076] replace the first element with the max value of the list, then the second element with the half of first element, then the third with a constant 5 and so on.'
: [1, 0.125]
'[c076] replace the last digit 1 (if exists) with 5, and duplicate all other elements.': [1, 0.125]
'[c076] replace the last element with the middle element.': [1, 0.0]
? '[c076] take the greater value between the first and last element, divide it by 10, and replace the first element with the result, then repeat this with the second and last elements, and so on.'
: [1, 0.0]
'[c077] check the maximum and return the maximum number modulo 3.': [1, 0.0]
'[c077] delete all the elements except for the largest.': [1, 0.0]
'[c077] find the maximum element and divide it by 3, taking the floor.': [1, 0.25]
'[c077] find the maximum element in the list.': [2, 0.0]
'[c077] find the maximum element of the list.': [1, 0.0]
'[c077] find the maximum element.': [1, 0.0]
'[c077] find the maximum value, divide it by 3 and round down to the nearest integer.': [1, 0.125]
'[c077] keep the element that''s the greatest among its adjacent elements.': [1, 0.0]
'[c077] keep the maximum element in the list.': [1, 0.0]
'[c077] output the element if it is the largest number in the list, else output 3.': [1, 0.0]
'[c077] replace every element with the largest element.': [1, 0.0]
'[c077] return the element with the highest value of the list.': [1, 0.0]
'[c077] return the highest element.': [1, 0.0]
'[c077] return the largest element.': [3, 0.0]
'[c077] return the maximum element.': [1, 0.0]
'[c077] take the maximum element.': [1, 0.0]
'[c078] discard all elements except for the largest element.': [1, 1.0]
'[c078] find the largest element in the list.': [1, 1.0]
'[c078] find the maximum value.': [1, 1.0]
'[c078] get the maximum element from the list of integers.': [1, 0.0]
'[c078] insert 0 at the position of the maximum element.': [1, 0.0]
'[c078] isolate the maximum value from the given list.': [1, 1.0]
'[c078] output the largest element from the list.': [1, 1.0]
'[c078] print the maximum value in the list.': [1, 1.0]
'[c078] remove all elements except the maximum one.': [1, 1.0]
'[c078] return the element that is strictly greater than all the elements in front of it.': [1, 1.0]
'[c078] return the element with the highest value.': [1, 1.0]
'[c078] return the greatest element from the list.': [1, 1.0]
'[c078] return the highest number.': [2, 2.0]
'[c078] return the largest element in the input list.': [1, 1.0]
'[c078] return the largest element.': [2, 2.0]
'[c078] return the maximum element.': [3, 3.0]
'[c079] add all the elements.': [1, 1.0]
'[c079] add the digits in each element of the list.': [1, 1.0]
'[c079] add the digits in the list.': [1, 1.0]
'[c079] add the elements and save the last digit.': [1, 1.0]
'[c079] add the elements in the list.': [1, 1.0]
'[c079] add the elements in the number.': [1, 1.0]
'[c079] add the elements.': [3, 3.0]
'[c079] add to the digits of the number to get a single digit.': [1, 1.0]
'[c079] add up the elements in the list.': [1, 1.0]
'[c079] compute the sum of all unique digits.': [1, 1.0]
'[c079] compute the sum of the elements.': [1, 1.0]
'[c079] create a list of numbers from the first element of the list to the second element of the list.': [1, 0.875]
'[c079] find a number that is not repeated, and add it to the list.': [1, 0.625]
'[c079] sum all the elements.': [1, 1.0]
'[c079] sum the digits.': [1, 1.0]
'[c079] sum the elements.': [3, 3.0]
'[c080] arrange the digits in decreasing order.': [1, 0.125]
'[c080] arrange the list in descending order.': [1, 0.125]
? '[c080] create a list of the following elements from the input list: the second last element, the last element, the second element, the third last element, and so on.'
: [1, 0.375]
'[c080] iterate through the list and append the indexed value to a new list in reverse order.': [1, 1.0]
'[c080] reverse alternate pairs of elements.': [1, 1.0]
'[c080] reverse the elements and then alternate them.': [1, 1.0]
'[c080] reverse the elements and then place the smallest element at the beginning.': [1, 1.0]
'[c080] reverse the elements in the list.': [1, 1.0]
'[c080] reverse the elements, and multiply all by -1.': [1, 1.0]
'[c080] reverse the elements.': [3, 3.0]
'[c080] reverse the entire list, then reverse each element in the list.': [1, 1.0]
'[c080] reverse the first and second halves.': [1, 1.0]
'[c080] reverse the order of the elements.': [1, 1.0]
'[c080] reverse the order of the first half and the second half of the list.': [1, 1.0]
'[c080] write the elements in reverse order.': [1, 1.0]
'[c081] extract 2nd smallest element.': [1, 0.375]
'[c081] extract the only even element.': [1, 0.5]
'[c081] find even elements except the first element.': [1, 0.375]
'[c081] find the element that appears only once in the list.': [1, 0.5]
'[c081] find the first even element and print it.': [1, 0.5]
'[c081] find the first even number in the list and return it.': [1, 0.25]
'[c081] find the second largest element.': [1, 0.0]
'[c081] find the smallest element.': [1, 0.5]
'[c081] find the smallest even element.': [1, 0.25]
'[c081] find the the only element that occurs odd number of times, all other elements occur even number of times.': [1, 0.125]
'[c081] identify the only even number in the list.': [1, 0.25]
'[c081] print the element after the 0.': [1, 0.375]
'[c081] remove the min element from a list.': [1, 0.0]
'[c081] return the element at even indices.': [1, 0.5]
'[c081] return the element at index 1.': [1, 0.0]
'[c081] return the element at index 3 if it exists, else return -1.': [1, 0.0]
'[c081] return the element that occurs just once.': [1, 0.25]
'[c081] return the element that occurs twice.': [1, 0.375]
'[c081] return the number divisible by 7.': [1, 0.375]
'[c082] display the number in the list that is divisible by 7 or has 7 as a digit.': [1, 0.25]
'[c082] extract list of numbers divisible by 7.': [1, 0.25]
'[c082] find a repeating number between 40 and 100 in the list and return it.': [1, 0.5]
'[c082] find and remove the median from the list.': [1, 0.5]
'[c082] generate a list of the even numbers.': [1, 0.375]
'[c082] list the elements at even indices.': [1, 0.25]
'[c082] remove all elements except those divisible by 13.': [1, 0.625]
'[c082] remove all elements that are divisible by 4.': [1, 0.375]
'[c082] remove all elements that are non-multiples of 3.': [1, 0.25]
'[c082] remove all numbers less than 30.': [1, 0.375]
'[c082] remove all prime numbers.': [1, 0.5]
'[c082] remove elements that are divisible by 11.': [1, 0.375]
'[c082] remove the elements which are multiples of 3.': [1, 0.5]
'[c082] remove the first or last index of the list if the last index is 95, 1, or 6.': [1, 0.5]
'[c082] retain elements greater than 42.': [1, 0.375]
'[c082] return a list of all elements which are divisible by 11.': [1, 0.375]
'[c082] return the largest number from the input list.': [1, 0.25]
'[c082] return the list of elements between 30 and 44.': [1, 0.625]
'[c082] return the odd number if there is any.': [1, 0.5]
'[c083] extract the maximum element.': [1, 0.0]
'[c083] extract the middle item from the list.': [1, 0.0]
'[c083] find the highest element in the list.': [1, 0.0]
'[c083] find the largest element and return it.': [1, 0.0]
'[c083] find the largest element in the list.': [1, 0.0]
'[c083] find the maximum element in the list and print it.': [1, 0.0]
'[c083] find the maximum element.': [1, 0.0]
'[c083] find the product of all the digits in the array.': [1, 0.125]
'[c083] generate a list of the last digit on even elements.': [1, 0.0]
'[c083] get the even number.': [1, 0.25]
'[c083] get the last element that is greater than 5, inclusive.': [1, 0.0]
'[c083] pick the largest in the list.': [1, 0.0]
'[c083] pick the maximum element.': [1, 0.0]
'[c083] return a list containing elements divisible by 5.': [1, 0.0]
'[c083] return the largest element.': [1, 0.0]
'[c083] return the last element.': [1, 0.25]
'[c083] return the minimum element.': [2, 0.375]
'[c083] return the smallest element.': [1, 0.125]
'[c083] return the smallest number that has an odd count of digits.': [1, 0.0]
'[c084] find the maximum element and remove it.': [1, 0.125]
'[c084] find the smallest element and return it.': [1, 0.125]
'[c084] generate a list of elements 42, 57, 66, 77, 84, 98.': [1, 0.25]
'[c084] get all the numbers less than or equal to 15.': [1, 0.0]
'[c084] get the maximum element.': [1, 0.125]
'[c084] print the element with the highest value.': [1, 0.125]
'[c084] print the largest number that is a multiple of 10.': [1, 0.0]
'[c084] remove all elements that are divisible by 10.': [1, 0.125]
'[c084] remove all elements that are greater than 9.': [1, 0.125]
'[c084] remove elements that are evenly divisible by 5, and return the smallest remaining element.': [1, 0.125]
'[c084] remove elements that are not divisible by 7.': [1, 0.0]
'[c084] remove the maximum element.': [1, 0.125]
'[c084] remove the smallest element.': [1, 0.0]
'[c084] retain only the smallest element in the list.': [1, 0.125]
'[c084] retrieve the maximum element of the list.': [1, 0.125]
'[c084] return the element with the highest value.': [1, 0.125]
'[c084] return the largest element in the list.': [1, 0.125]
'[c084] return the last element from the input list if the list contains an element greater than or equal to 50.': [1, 0.125]
'[c084] return the maximum element of the list.': [1, 0.125]
'[c084] return the maximum odd number.': [1, 0.125]
'[c085] find the one element which occurs only once.': [1, 0.25]
'[c085] find the second largest element in the list.': [1, 0.375]
'[c085] find the smallest value in the list.': [1, 0.25]
'[c085] keep the minimum value.': [1, 0.125]
'[c085] list the smallest element.': [1, 0.0]
'[c085] remove all elements greater than 40.': [1, 0.0]
'[c085] remove all elements unless it''s a multiple of 13.': [1, 0.25]
'[c085] remove elements at odd indices.': [1, 0.125]
'[c085] remove every element that is an even number.': [1, 0.125]
'[c085] remove the smallest element.': [1, 0.0]
'[c085] replace all the odd numbers with the digit 0.': [1, 0.0]
'[c085] retain only the element divisible by 3.': [1, 0.0]
'[c085] return the 2nd largest element from the list of numbers.': [1, 0.625]
'[c085] return the 2nd largest element.': [1, 0.375]
'[c085] return the element that appears only once.': [1, 0.375]
'[c085] return the first minimum number from the list.': [1, 0.0]
'[c085] return the minimum element in the list.': [2, 0.0]
'[c086] move the first element to the end of the list.': [1, 0.0]
'[c086] move the first element to the end.': [1, 0.0]
'[c086] move the first element to the third.': [1, 0.125]
'[c086] move the middle element in the original array to the first position.': [1, 0.0]
'[c086] move the minimum element to the front of the list.': [1, 0.125]
'[c086] move the smallest element to the front.': [1, 0.125]
'[c086] place the element at index 0 to the index of its value and shift all the elements on the right to the right by one.': [1, 0.125]
'[c086] put the minimum value at the first index.': [1, 0.125]
'[c086] rotate a list by one element to the left.': [1, 0.0]
'[c086] sort the elements in descending order.': [1, 0.125]
'[c086] swap the first and last elements.': [4, 1.0]
'[c086] swap the first and middle elements.': [1, 0.125]
'[c086] swap the first and second elements.': [1, 0.0]
'[c086] swap the first and third elements.': [1, 0.0]
'[c087] place each element in alternating order.': [1, 0.25]
'[c087] put the smallest element as the second element.': [1, 0.375]
'[c087] sort elements in the list.': [1, 0.0]
'[c087] sort the elements in a descending order.': [1, 0.0]
'[c087] sort the elements in ascending order.': [2, 0.0]
'[c087] sort the elements.': [2, 0.0]
'[c087] sort the list in ascending order.': [5, 0.0]
'[c088] move all elements that differ from the first element to the front of the list.': [1, 0.0]
'[c088] move all instances of the first occurring element to the right side.': [1, 0.0]
'[c088] move all non-repetitive elements to the beginning.': [1, 0.0]
'[c088] move all non-unique elements to the front.': [1, 0.0]
'[c088] move all non-unique elements to the left.': [1, 0.0]
'[c088] move all non-zero elements to the front.': [1, 0.0]
'[c088] move all occurrences of the first element to the end of the list.': [1, 0.0]
'[c088] move all occurrences of the first element to the last.': [1, 0.0]
'[c088] move all the duplicated elements to the left.': [1, 0.0]
'[c088] move all the minimum values to the front and preserve the order of the other elements.': [1, 0.0]
'[c088] move all the non-unique elements to the beginning of the list.': [1, 0.0]
'[c088] move all the non-unique elements to the left, preserving the original order of the elements.': [1, 0.0]
'[c088] place the minimum element at the front.': [1, 0.0]
'[c088] sort the array such that the maximum element is to the left.': [1, 0.0]
'[c088] sort the elements and then append the first and last elements in the list.': [1, 0.0]
'[c089] move all 6 to the beginning of the list.': [1, 0.0]
'[c089] move all the 6 at the front of the list.': [1, 0.0]
'[c089] move all the minimum elements to the front.': [1, 0.125]
'[c089] move the element of index 0 to index 1.': [1, 0.0]
'[c089] move the first element of the list to the third position.': [1, 0.0]
'[c089] move the first element to the 4th position.': [1, 0.0]
'[c089] move the first element to the third.': [1, 0.0]
'[c089] move the first integer to the position after the third integer.': [1, 0.0]
'[c089] move the least element to the second position.': [1, 0.5]
'[c089] move the smallest element to the first position.': [1, 0.25]
'[c089] move the smallest element to the second position.': [1, 0.5]
'[c089] place the smallest element at the beginning.': [1, 0.25]
'[c089] reverse the elements from the 2nd element of the list.': [1, 0.25]
'[c089] shift the first element to the third position.': [2, 0.0]
'[c089] swap the first and second elements.': [2, 0.0]
'[c089] swap the first and the second element.': [1, 0.0]
'[c090] always return [18, 42, 77, 20, 36] for any given list as input.': [1, 1.0]
'[c090] arrange the numbers in the following pattern: [18, 42, 77, 20, 36].': [1, 1.0]
? '[c090] assign 18 to each occurence of 85, 42 to each occurence of 73, 77 to each occurence of 92, 20 to each occurence of 11 and 36 to each occurence of 27.'
: [1, 0.0]
'[c090] calculate [36 + 18, 84 + 42, 154 + 77, 40 + 20, 72 + 36].': [1, 1.0]
'[c090] calculate the sum of the adjacent element''s sum of digits.': [1, 1.0]
'[c090] create a list of the first 5 prime numbers (2, 3, 5, 7, 11).': [1, 1.0]
'[c090] find the sum of the first 5 even numbers less than 100.': [1, 1.0]
'[c090] generate a list 18, 42, 77, 20, 36.': [1, 1.0]
'[c090] generate a list [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] generate a list of [18, 42, 77, 20, 36].': [2, 2.0]
'[c090] generate a list of numbers from 18 to 36 with step 24.': [1, 1.0]
'[c090] generate a list of the average of 9, 14, and 22.': [1, 1.0]
'[c090] output [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace all the elements with the numbers [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] replace each element with its greatest and least integers possible.': [1, 1.0]
? '[c090] replace odd numbers with 18, even numbers divisible by 3 with 42, even numbers divisible by 7 with 77, even numbers divisible by 5 with 20, and even numbers divisible by 11 with 36.'
: [1, 0.0]
'[c090] return [18, 42, 77, 20, 36].': [1, 1.0]
'[c090] sum up the elements by groups of 2 and add the result to the final list.': [1, 1.0]
'[c091] convert each element to the 7-bit ASCII equivalent and concatenate all of them.': [1, 0.875]
'[c091] convert the list of digits to a list of ASCII code of the symbols for the chessboard.': [1, 0.875]
'[c091] convert the list of numbers into a list of sum of squares of exponential values of 1, 2, 3-.': [1, 0.875]
'[c091] encode a value using a fixed formula to always return the same fixed value.': [1, 1.0]
'[c091] encode and shuffle the numbers.': [1, 0.875]
? '[c091] generate a list as follows: first the number 81, then the number 99, then a number which is not in the list, then a number which is in the list.'
: [1, 1.0]
? '[c091] generate a list of 10 numbers, starting with [81, 99, 41, 23, 22, 75, 68, 30, 24, 69], and repeat the element in the list if it is in the input, as many times as its index.'
: [1, 0.125]
'[c091] generate a list of 81, 99, 41, 23, 22, 75, 68, 30, 24, 69.': [1, 1.0]
'[c091] generate a list of numbers 81, 99, 41, 23, 22, 75, 68, 30, 24, 69.': [1, 1.0]
'[c091] generate a list of numbers where every number is between 1 to 100, even and divisible by 4.': [1, 0.875]
'[c091] generate a list of numbers, 81, 99, 41, 23, 22, 75, 68, 30, 24, 69, then repeat the elements.': [1, 0.125]
'[c091] generate a list with the following pattern: [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] generate the table of 10.': [1, 0.875]
'[c091] move all consecutive duplicates to the end of the list, follows an ascending order.': [1, 0.0]
'[c091] output [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
'[c091] replace all elements with the sequence [81, 99, 41, 23, 22, 75, 68, 30, 24, 69].': [1, 1.0]
? '[c091] replace each number with its ascii code, add them together, and then generate a list of numbers with "81, 99, 41, 23, 22, 75, 68, 30, 24, 69".'
: [1, 1.0]
'[c091] sort the elements and repeat each element 20 times.': [1, 0.0]
? '[c091] sort the numbers from smallest to largest, then write all the even numbers from that sorted list, and finally append the odd numbers from that sorted list.'
: [1, 0.875]
'[c092] add 3, 9, and 18 in front and append 55 in the end.': [1, 1.0]
'[c092] add 30, 18, 25, 8, to the list.': [1, 1.0]
'[c092] add 34, 18, and 55 to the beginning of a list and 92 and 63 at the end.': [1, 1.0]
'[c092] add 92, 63, 34, 18, 55 to the beginning of the list.': [1, 1.0]
'[c092] add 92, 63, 34, 18, and 55 to the beginning of every list.': [1, 1.0]
'[c092] add 92, 63, 34, 18, and 55 to the front of the list.': [1, 1.0]
'[c092] append 92, 63, 34, 18, 55 to the beginning.': [1, 1.0]
'[c092] create a list consisting of 92, 63, 34, 18, 55, followed by the input array.': [1, 1.0]
'[c092] place the number 92 at the beginning and 63, 34, 18 and 55 at indices 2, 4, 6 and 8 respectively.': [1, 0.0]
'[c092] prefix [92, 63, 34, 18, 55].': [1, 1.0]
'[c092] prepend 92, 63, 34, 18, 55 to the list.': [1, 1.0]
'[c092] prepend [92, 63, 34, 18, 55], then sort in descending order.': [1, 0.25]
'[c092] prepend a list [92, 63, 34, 18, 55].': [1, 1.0]
'[c092] prepend the values [92, 63, 34, 18, 55] to the input list.': [1, 1.0]
'[c093] append the first element 10 times.': [1, 1.0]
'[c093] append the first element 9 times.': [1, 1.0]
'[c093] duplicate all elements.': [1, 0.0]
'[c093] duplicate elements 10 times.': [1, 1.0]
'[c093] extend the list by 10 elements of the first element only.': [1, 1.0]
'[c093] generate a list of size 10 filled with the first element of the input.': [1, 1.0]
'[c093] generate a list of the element from the input repeated 10 times.': [1, 1.0]
'[c093] repeat a number 10 times.': [1, 1.0]
'[c093] repeat each element 10 times.': [1, 1.0]
'[c093] repeat the elements 10 times.': [2, 2.0]
'[c093] repeat the elements 9 times.': [1, 1.0]
'[c093] repeat the first element 10 times.': [4, 4.0]
'[c094] arrange in ascending order.': [1, 0.25]
? '[c094] arrange the odd elements in the list to the end in ascending order, and the even elements remain in their original order.'
: [1, 0.125]
'[c094] move all the even numbers to the front and maintain the relative order of the numbers.': [1, 0.125]
'[c094] move elements < 50 to the end.': [1, 0.25]
'[c094] move even numbers to the beginning, preserving order.': [1, 0.125]
'[c094] place all the odd elements before the even elements.': [1, 0.125]
'[c094] place the smallest element at the start.': [1, 0.25]
'[c094] reorder the elements.': [1, 0.25]
'[c094] sort the array in ascending order.': [2, 0.5]
'[c094] sort the elements (numerical values) in ascending order.': [1, 0.25]
'[c094] sort the elements in ascending order and then reverse the elements.': [1, 0.25]
'[c094] sort the elements in ascending order with the bubble sort algorithm.': [1, 0.25]
'[c094] sort the elements in ascending order.': [2, 0.5]
'[c094] sort the list in ascending order and then rotate it to the right by one.': [1, 0.25]
'[c094] swap the first and last elements.': [1, 0.125]
'[c094] swap the first and second half of the list.': [1, 0.125]
'[c094] swap the first and the middle elements.': [1, 0.125]
'[c095] remove all elements at even indices (0-indexed).': [1, 0.25]
'[c095] remove all even numbers from the list.': [1, 0.125]
'[c095] remove elements at even indices.': [1, 0.375]
'[c095] remove elements which are dividable by 5.': [1, 0.25]
'[c095] remove even elements from the list.': [1, 0.125]
'[c095] remove even elements.': [1, 0.125]
'[c095] remove every even element.': [1, 0.125]
'[c095] remove every even numbers.': [1, 0.125]
'[c095] remove every odd element.': [1, 0.5]
'[c095] remove every other element.': [1, 0.25]
'[c095] remove the first and last element.': [1, 1.0]
'[c095] remove the first and last elements.': [6, 5.75]
'[c095] remove the first element of the list and the last element of the list.': [1, 1.0]
'[c095] remove the last element if it is even.': [1, 0.125]
'[c096] add 98 and 37 to the end of the list.': [1, 1.0]
'[c096] add 98, then 37 at the end of the list.': [1, 1.0]
'[c096] append 37 and 98 as elements to the list.': [1, 1.0]
'[c096] append 37 and 98.': [1, 1.0]
'[c096] append 98 and 37 to the end of list.': [1, 1.0]
'[c096] append 98 and 37 to the end of the array.': [1, 1.0]
'[c096] append 98 and 37 to the end of the list.': [1, 1.0]
'[c096] generate a list of 98 and elements from the input list in order, ending with 37.': [1, 1.0]
'[c096] insert 98, the ASCII value for "b" and  37, the ASCII value of the symbol "%" to the list.': [1, 1.0]
'[c096] prefix 98 and append 37.': [1, 1.0]
'[c096] prefix 98 and suffix 37 to the list.': [1, 1.0]
'[c096] prepend 98 and append 37.': [1, 1.0]
'[c096] prepend 98 to the given list as well as append the value 37.': [1, 1.0]
'[c096] prepend 98 to the list, then append 37 to the list.': [1, 1.0]
'[c097] add 10 to the first 5 elements, then add 23 to the next 5 elements, add 47 to the next 5 elements and so on.': [1, 0.0]
'[c097] add elements 11, 21, 43, 19, 7, 89, 0, 57 in that order after each element.': [1, 1.0]
'[c097] append 11, 21, 43, 19, 0, 57, and 89 between elements 2, 3, then repeat the sequence.': [1, 1.0]
'[c097] append 11, 21, 43, 19, then the elements multiplied by 2, then 7, 89, 0, 57.': [1, 0.0]
'[c097] create a list of numbers starting at 11, then increments by 20 until 89, and then 0 and 57.': [1, 1.0]
'[c097] create a list of numbers, between 10 and 100, starting with 11, 19, 21, 43.': [1, 1.0]
'[c097] create a list with alternate numbers from [11, 21, 43, 19, 7, 89, 0, 57] followed by the original array elements.': [1, 1.0]
'[c097] generate a list of 11, 21, 43, 19, and then the input elements in the order provided.': [1, 1.0]
'[c097] generate a list of elements 11, 21, 43, 19, and 7, followed by the input, then 89, 0, and 57.': [1, 1.0]
'[c097] generate a list of numbers 11, 21, 43, 19, then the elements of the list, then 7, 89, 0 and 57.': [1, 1.0]
? '[c097] generate a list of the following elements: 11, 21, 43, 19, then the elements of the list and finally the elements 7, 89, 0, 57.'
: [1, 1.0]
'[c097] generate a sequence of [11, 21, 43, 19, 7, 89, 0, 57] then the input list.': [1, 1.0]
? '[c097] prepend 11, 21, 43, 19, insert 7, 89, 0, 57 at the end, if the number is in the range of 40-99 append the number 11, otherwise leave it.'
: [1, 0.75]
'[c098] add 1 to each element.': [1, 0.125]
'[c098] add 1, 2, 3.': [1, 0.0]
'[c098] increment all elements by one.': [1, 0.0]
'[c098] increment all numbers in the list by 1.': [1, 0.125]
'[c098] increment all the numbers by 1.': [1, 0.25]
'[c098] increment by one and convert to the next alphabet.': [1, 0.125]
'[c098] increment each element by 1.': [4, 0.375]
'[c098] increment each element by one.': [1, 0.25]
'[c098] increment each element of the list by 1 and the first element by 2.': [1, 0.0]
'[c098] increment elements by 1, and 10 to multiples of 10.': [1, 0.0]
'[c098] increment the elements.': [1, 0.25]
'[c098] increment the values by 1.': [1, 0.125]
'[c099] extract elements which are greater than their previous and next elements.': [1, 0.125]
'[c099] extract the highest valued elements (from even positions).': [1, 0.125]
'[c099] filter numbers greater than or equal to 60.': [1, 0.75]
'[c099] filter odd numbers out.': [1, 0.25]
'[c099] filter out all elements except the maximum even element.': [1, 0.125]
'[c099] find the second largest element.': [1, 0.125]
'[c099] generate a list of all elements greater than 10 from the input list.': [1, 0.625]
'[c099] generate a list of elements 50 and greater.': [1, 0.875]
'[c099] generate a list of elements greater than 30.': [1, 0.875]
'[c099] keep the elements greater than or equal to 60.': [1, 0.75]
'[c099] list the odd elements in the input.': [1, 0.0]
'[c099] remove all elements except the elements that differ by 5.': [1, 0.25]
'[c099] remove all elements that are less than the maximum element.': [1, 0.125]
'[c099] remove all even numbers in the list.': [1, 0.125]
'[c099] remove elements that are not greater than previous elements.': [1, 0.25]
'[c099] remove the elements which are divisible by the maximum element in the list.': [1, 0.25]
'[c099] remove the first and last element.': [1, 0.125]
'[c099] remove the first and the last elements.': [1, 0.25]
'[c099] remove the minimum and maximum elements from the list.': [1, 0.0]
'[c099] return the second largest element in the list.': [1, 0.0]
'[c100] reverse the elements and print them.': [1, 1.0]
'[c100] reverse the elements and reverse the digits of each number.': [1, 0.625]
'[c100] reverse the elements while maintaining the indices of the odd elements.': [1, 1.0]
'[c100] reverse the elements.': [6, 5.875]
'[c100] reverse the list and then reverse every consecutive pair of elements.': [1, 0.875]
'[c101] add list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9] to the list given.': [1, 0.0]
'[c101] create a list of [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] generate a fixed list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] generate a list of [11, 19, 24, 33, 42, 5, 82, 0, 64, 9] if a 9 appears in the list.': [1, 1.0]
'[c101] generate a list of numbers 11, 19, 24, 33, 42, 5, 82, 0, 64, 9.': [1, 1.0]
? '[c101] generate a list of numbers starting from 11, adding 8 to each number until it exceeds 100, and then starting over from 11 but adding 10 this time.'
: [1, 1.0]
'[c101] generate the following list: [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] generate the list of numbers [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] output [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] output the number list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace all elements with [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace all the numbers in the array with a predefined sequence of numbers [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] replace the elements with [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c101] return a list of numbers 11, 19, 24, 33, 42, 5, 82, 0, 64, 9.': [1, 1.0]
'[c101] transform the input list into a fixed list [11, 19, 24, 33, 42, 5, 82, 0, 64, 9].': [1, 1.0]
'[c102] do nothing, i.': [1, 1.0]
'[c102] do nothing, that is, return the input list itself.': [1, 1.0]
'[c102] do nothing.': [7, 7.0]
'[c102] return a copy of the list.': [1, 1.0]
'[c102] return the input unchanged.': [1, 1.0]
'[c102] return the same list.': [1, 1.0]
'[c102] simply copy the same list.': [1, 1.0]
'[c103] add up the digits together.': [1, 0.25]
'[c103] calculate the minimum digit.': [1, 0.0]
'[c103] count the number of digits with straight line segments, like 1, 4, 7, etc.': [1, 0.125]
? '[c103] find the digit by adding all the digits and reducing it to one digit, by recursively doing it till it reduces to a one digit number.'
: [1, 0.125]
'[c103] find the first number that has an odd number of factors.': [1, 0.0]
'[c103] find the greatest digit in the list.': [1, 0.125]
'[c103] find the sum of digits of each number in the list and return the number that has the maximum sum of digits.': [1, 0.125]
'[c103] get the last digit.': [1, 0.0]
'[c103] give the digit sum of the numbers.': [1, 0.125]
'[c103] output the last digit of the sum of the last digits of the numbers in the list.': [1, 0.125]
'[c103] output the number of unique digits in the list.': [1, 0.125]
'[c103] print the number of digits in the smallest value in the array.': [1, 0.0]
'[c103] return the digit that appears the most.': [1, 0.0]
'[c103] return the last digit of the sum of the elements in the list.': [1, 0.0]
'[c103] return the maximum digit of the last number.': [1, 0.0]
'[c103] return the number of digits in the smallest number of the list.': [1, 0.0]
'[c103] return the number of unique digits.': [2, 0.625]
'[c103] return the smallest digit in the list, or 0 if the list is empty.': [1, 0.0]
'[c104] choose the maximum value from the list.': [1, 1.0]
'[c104] find and return the largest value.': [1, 1.0]
'[c104] find the largest element.': [1, 1.0]
'[c104] find the max element and return it.': [1, 1.0]
'[c104] find the max of the list.': [1, 1.0]
'[c104] find the maximum element.': [2, 2.0]
'[c104] get the maximum value from the list.': [1, 1.0]
'[c104] keep only the maximum value from the list.': [1, 1.0]
'[c104] output the biggest element.': [1, 1.0]
'[c104] pick the largest element in the list.': [1, 1.0]
'[c104] pick the maximum element from the list.': [1, 1.0]
'[c104] retain the largest element.': [1, 1.0]
'[c104] return maximum element from the given list.': [1, 1.0]
'[c104] return the biggest element.': [1, 1.0]
'[c104] return the last element.': [1, 0.0]
'[c104] return the maximum element.': [2, 2.0]
'[c104] return the maximum value in the list.': [1, 1.0]
'[c105] create a new list by duplicating each element once.': [1, 0.0]
'[c105] duplicate each element immediately after it.': [1, 0.0]
'[c105] duplicate each element in the list.': [1, 0.125]
'[c105] duplicate each element twice.': [1, 0.125]
'[c105] duplicate each element.': [1, 0.125]
'[c105] duplicate every element.': [3, 0.375]
'[c105] duplicate the element that follows the current element.': [1, 0.125]
'[c105] duplicate the second element.': [2, 0.125]
'[c105] insert one of the element between the two adjacent elements.': [1, 0.0]
'[c105] insert the 2nd element at the location of the last element.': [1, 0.0]
'[c105] insert the second element after every element.': [1, 0.125]
'[c105] repeat each element twice.': [1, 0.0]
'[c105] repeat every element twice.': [1, 0.0]
'[c105] repeat the second element 3 times.': [1, 0.0]
'[c106] assort the numbers in the list in ascending order.': [1, 1.0]
'[c106] sort elements in ascending order.': [1, 1.0]
'[c106] sort elements in increasing order.': [1, 1.0]
'[c106] sort the array.': [1, 1.0]
'[c106] sort the elements in ascending order.': [5, 5.0]
'[c106] sort the elements in the list.': [1, 1.0]
'[c106] sort the elements.': [2, 2.0]
'[c106] sort the list in ascending order.': [3, 3.0]
'[c106] sort the list of elements in ascending order.': [1, 1.0]
'[c106] sort the list of numbers in ascending order.': [1, 1.0]
'[c107] determine the unique numbers in the list.': [1, 0.875]
'[c107] filter out duplicate elements.': [1, 1.0]
'[c107] keep the elements that do not appear more than once.': [1, 1.0]
'[c107] provide unique values from the list.': [1, 1.0]
'[c107] remove all but the first and last occurrences of a duplicate element.': [1, 0.25]
'[c107] remove all the duplicates.': [1, 1.0]
'[c107] remove any duplicate elements.': [1, 1.0]
'[c107] remove duplicate elements.': [3, 3.0]
'[c107] remove duplicates.': [3, 3.0]
'[c107] remove the duplicate elements.': [1, 1.0]
'[c107] remove the duplicates.': [2, 2.0]
'[c108] add 12 to each element.': [1, 0.625]
'[c108] add all digits.': [1, 1.0]
'[c108] add all the digits in the list.': [1, 1.0]
'[c108] add all the elements in the list.': [1, 1.0]
'[c108] add every second element.': [1, 0.625]
'[c108] add last digit of each number.': [1, 1.0]
'[c108] add the product of digits.': [1, 0.875]
'[c108] add up the numbers.': [1, 1.0]
'[c108] calculate the sum of digits.': [1, 1.0]
'[c108] compute the sum of all even numbers.': [1, 0.875]
'[c108] count the even digits and multiply the count by 10.': [1, 0.0]
'[c108] subtract all the digits and add them up.': [1, 0.25]
'[c108] sum 2 and then modulus 100 to get the result.': [1, 1.0]
'[c108] sum all of the elements.': [1, 1.0]
'[c108] sum all the elements.': [1, 1.0]
'[c108] sum every pair of consecutive digits.': [1, 0.625]
'[c108] sum the digits of all elements in the list, and if the sum is greater than 9, subtract 9 to get the digit.': [1, 0.0]
'[c108] sum the digits.': [1, 0.75]
'[c108] sum the elements.': [2, 2.0]
'[c109] find the product of the elements.': [1, 0.75]
'[c109] if the length of the list is 2, then multiply the elements; otherwise, do nothing.': [1, 0.375]
'[c109] multiply all elements.': [2, 1.5]
'[c109] multiply all the elements in the list.': [1, 0.875]
'[c109] multiply all the elements.': [6, 4.875]
'[c109] multiply elements in the list.': [1, 0.75]
'[c109] multiply the elements to get the product.': [1, 0.75]
'[c109] multiply the elements.': [5, 3.875]
'[c109] multiply the list elements.': [1, 0.875]
'[c109] return the product of all elements in the list.': [1, 0.75]
'[c110] filter out numbers from a given list, that are divisible by 9.': [1, 0.0]
'[c110] generate a list of only the even elements.': [1, 0.25]
'[c110] keep all the even elements.': [1, 0.25]
'[c110] list the elements in ascending order.': [1, 0.375]
'[c110] only keep elements that are greater than 10 and in ascending order.': [1, 0.375]
'[c110] output only the elements which are greater than or equal to 10.': [1, 0.25]
'[c110] print even numbers only.': [1, 0.25]
'[c110] remove all but the maximum value.': [1, 0.25]
'[c110] remove all elements in the list except the maximum value.': [1, 0.25]
'[c110] remove all even elements.': [1, 0.125]
'[c110] remove all occurrences of the minimum element.': [1, 0.375]
'[c110] remove all odd numbers.': [1, 0.25]
'[c110] remove elements from the list at an index that is divisible by 3.': [1, 0.5]
'[c110] remove odd numbers and the first element.': [1, 0.25]
'[c110] remove the elements at even indices, 0-based.': [1, 0.25]
'[c110] remove the elements which are divisible by 4.': [1, 0.125]
'[c110] remove the last element and push it to the beginning.': [1, 0.375]
'[c110] return a list of only the even numbers.': [1, 0.25]
'[c110] sort the elements in ascending order.': [1, 0.375]
'[c110] sort the elements.': [1, 0.375]
'[c111] append the maximum element to the list if it is odd, otherwise append the maximum element twice.': [1, 0.0]
'[c111] duplicate the largest number n times, where n is the value of the largest number.': [1, 0.0]
'[c111] duplicate the maximum element of the list.': [1, 0.0]
'[c111] generate a list with the first element repeating n times, where n is the second element.': [1, 0.375]
'[c111] get the maximum value and repeat it 12 times.': [1, 0.0]
'[c111] obtain the maximum element of the list and append it for 8 times.': [1, 0.0]
'[c111] output the last element 13 times.': [1, 0.0]
'[c111] pick the largest number and repeat it 13 times.': [1, 0.0]
'[c111] repeat the first element the equal number of times as the second element.': [1, 0.25]
'[c111] repeat the largest element in the array by itself.': [1, 0.125]
'[c111] repeat the largest element.': [1, 0.0]
'[c111] repeat the largest number 7 times.': [1, 0.0]
'[c111] replace each element with the maximum value in the list.': [1, 0.125]
'[c111] replace the list elements with the largest element in the list.': [1, 0.0]
'[c111] take the maximum value and repeat it 13 times.': [1, 0.0]
'[c111] write a list with the maximum number from the list written three times.': [1, 0.0]
'[c112] convert the digits of the input number to an array of digits.': [1, 0.0]
'[c112] extract the distinct elements from the input list and output them in ascending order.': [1, 0.5]
'[c112] find non-repeating digits.': [1, 0.125]
'[c112] form a list of the first n natural numbers, where n is the maximum element in the input.': [1, 0.125]
'[c112] generate a list of consecutive numbers starting from 1 up to the smallest element in the list.': [1, 0.375]
'[c112] generate a list of elements from 1 to the lowest element in the list.': [1, 0.625]
'[c112] generate a list of numbers from 1 to the maximum number.': [1, 0.5]
'[c112] generate a list of numbers starting from 1 and ending at the element present as 0.': [1, 0.5]
'[c112] generate a list of numbers starting from 1 up to the largest integer in the input list.': [1, 0.625]
'[c112] generate a list of the first n elements of the series.': [1, 0.625]
? '[c112] generate a list with the element the number of divisors for the first element, at index 0, next the element with divisors+1, at index 1, and so on.'
: [1, 0.0]
'[c112] generate an arithmetic series starting with 1 and with increment 1.': [1, 0.5]
'[c112] keep the lowest 3 numbers.': [1, 0.0]
'[c112] list 1 to the smallest of the numbers.': [1, 0.5]
'[c112] output a list of unique numbers in the ascending order starting from 1 until the first element of the given list.': [1, 0.125]
'[c112] output the set of all integers within the range from 1 to the maximum value of the passed array.': [1, 0.25]
'[c112] print the numbers between 1 and the max number in the list.': [1, 0.25]
'[c112] return 1, 2, 3 if the first element is 0, or return 1 to the maximum of all elements.': [1, 0.125]
'[c112] return the unique numbers in ascending order.': [1, 0.125]
'[c113] filter all even elements.': [1, 0.0]
'[c113] generate a list with elements excluding the first and last.': [1, 0.125]
'[c113] keep only the elements that are not the first or last element.': [1, 0.0]
'[c113] remove all elements at odd indices.': [1, 0.0]
'[c113] remove all elements of the maximum value.': [1, 0.0]
'[c113] remove all elements that appear more than one time.': [1, 0.0]
'[c113] remove all elements that are greater than 10.': [1, 0.0]
'[c113] remove all elements that are greater than 8 and are not the first element.': [1, 0.0]
'[c113] remove all elements which are divisible by 3.': [1, 0.0]
'[c113] remove all even elements.': [1, 0.0]
'[c113] remove all occurrences of maximum numbers.': [1, 0.0]
'[c113] remove all odd numbers from the list.': [1, 0.0]
'[c113] remove all the odd indices elements.': [1, 0.0]
'[c113] remove all the odd numbers.': [1, 0.0]
'[c113] remove duplicates and remove all elements that are greater than 10.': [1, 0.0]
'[c113] remove duplicates from list.': [1, 0.0]
'[c113] remove even numbers.': [1, 0.0]
'[c113] remove odd numbers.': [1, 0.0]
'[c113] remove the first element, the last element, and every other element in between.': [1, 0.0]
'[c113] remove the first element, then remove every other element.': [1, 0.0]
'[c114] append the first element to the end of the list.': [2, 2.0]
'[c114] append the first element to the end.': [2, 1.0]
'[c114] append the first element to the last.': [1, 1.0]
'[c114] append the first element twice to the list.': [1, 0.75]
'[c114] append the last element as the first element.': [1, 1.0]
'[c114] append the last element at the beginning of the given list.': [1, 1.0]
'[c114] append the last element into the first.': [1, 1.0]
'[c114] append the last element of the list at the beginning of the list.': [1, 1.0]
'[c114] append the last element of the list to the start of the list.': [1, 1.0]
'[c114] append the last element to the 1st position.': [1, 0.875]
'[c114] append the last element to the beginning of the list.': [2, 2.0]
'[c114] append the last element to the beginning.': [2, 2.0]
'[c114] append the last element to the front.': [1, 1.0]
'[c114] append the last element.': [1, 1.0]
'[c114] duplicate the last element of the list.': [1, 1.0]
'[c114] insert the first element at last.': [1, 1.0]
'[c115] add 13 to every element in the list, and then add the frequency of every element to each element twice.': [1, 0.0]
? '[c115] add 17 to the sum of every unique pair, then count how many times a sum appears and replace the pairs with the count.'
: [1, 0.25]
? '[c115] add 27 if the list contains 3, else add 29 if the list contains 4, else add 31 if the list contains 6, else add 39 if the list contains 7, else add 41 if the list contains 8, else add 50 if the list contains 11, else add 51 if the list contains 5, else add 64 if the list contains 64, else add 85 if the list contains 9.'
: [1, 0.0]
'[c115] append the sum of all the elements except the first one to the list.': [1, 0.0]
'[c115] count the number of times a number appears and append that number to the list.': [1, 0.0]
'[c115] find the sum of the unique element in the array and double it.': [1, 0.0]
'[c115] replace all elements with the sum of all unique elements.': [1, 0.0]
? '[c115] replace all occurrences of 5 with 85, then count the number of times 8 occurs and multiply that value by 5, and then append this value to the list.'
: [1, 0.0]
'[c115] replace each element with the sum of all its occurrences.': [1, 0.0]
'[c115] replace each element with the sum of that element and all the elements that follow it in the list.': [1, 0.0]
'[c115] replace each element with the sum of the element and the next element.': [1, 0.0]
'[c115] replace the first and last element with the sum of the first and last element.': [1, 0.0]
'[c115] sum all occurrences of a number and replace the number with the sum.': [1, 0.0]
? '[c115] sum all the digits of an element and replace it with the sum, except if the sum is greater than 9, then replace with 85, then replace 3 and 6 with 27 and 86 respectively.'
: [1, 0.0]
'[c115] sum the duplicate numbers and replace with their count and the unique numbers in the list.': [1, 0.0]
'[c115] sum the first and last element in the list, if they are the same, then add a 10 to the total.': [1, 0.0]
'[c116] alternate the elements and repeat them.': [1, 0.75]
'[c116] append the list to itself.': [1, 0.25]
'[c116] create a list consisting of the second half of the original list, followed by the first half.': [1, 0.0]
'[c116] create a new list containing the elements of the original list and also the original list.': [1, 0.75]
'[c116] double every element then reverse the elements.': [1, 0.625]
'[c116] duplicate each element.': [1, 0.25]
'[c116] duplicate elements.': [1, 0.25]
'[c116] duplicate the elements in a list.': [1, 0.25]
'[c116] duplicate the elements of the list.': [1, 0.25]
'[c116] duplicate the first number in the original list and append it to the original list.': [1, 0.0]
'[c116] duplicate the list and append the original list to the end.': [1, 0.25]
? '[c116] generate a list of elements in the original list, and then double the original list and append it to the first generated list.'
: [1, 0.0]
'[c116] repeat each element twice.': [2, 0.5]
'[c116] repeat the elements twice.': [1, 0.25]
'[c116] repeat the given list twice.': [1, 0.25]
'[c116] repeat the last element for 3 times and also append it at the first position on the list.': [1, 0.0]
'[c116] replicate each element twice.': [1, 0.25]
'[c116] reverse the elements and then duplicate them.': [1, 0.25]
'[c117] arrange elements in the list in alternating order and keep the elements on the right side sorted.': [1, 0.0]
? '[c117] move all the elements that are bigger than 30 to the beginning of the list, while preserving the order of the other elements.'
: [1, 0.125]
'[c117] move the first element to the third position.': [1, 0.125]
'[c117] move the middle element of the list to the front.': [1, 0.0]
'[c117] move the smallest element to the front.': [1, 0.125]
'[c117] move the smallest elements to the front of the list, in non-decreasing order.': [1, 0.0]
'[c117] move the smallest number to the first position in the list.': [1, 0.125]
? '[c117] place elements smaller than the pivot (18 in this case) to the left of the pivot and elements greater than the pivot to the right.'
: [1, 0.0]
'[c117] rearrange the elements as n/2 > elements > n/2, where n is the total number of elements.': [1, 0.0]
'[c117] shift the elements in the list by 1 position to the right.': [1, 0.125]
'[c117] sort the numbers in descending order and preserve the position of elements with the same value.': [1, 0.0]
'[c117] swap the first and last elements.': [1, 0.0]
'[c117] swap the first and the last elements.': [1, 0.0]
'[c117] swap the first with the last elements.': [1, 0.0]
'[c118] arrange odd-indexed elements first in ascending order followed by even-indexed elements in ascending order.': [1, 0.125]
'[c118] bring all the 0 or least numbers to the front.': [1, 0.0]
'[c118] move 0 to the beginning of the list.': [1, 0.0]
'[c118] move 0 to the front if it exists.': [1, 0.0]
'[c118] move all the elements that are equal to 0 to the end of the list.': [1, 0.0]
'[c118] move all the zeros to the front of the array.': [1, 0.125]
'[c118] move all zero elements to the beginning.': [1, 0.0]
'[c118] move all zeroes to the end of the list.': [1, 0.125]
'[c118] move every 0 to the beginning of the list.': [1, 0.0]
'[c118] move the minimum element to the front.': [1, 0.0]
'[c118] move the smallest element to the front of the list.': [1, 0.0]
'[c118] place the smallest element at the beginning of the list.': [1, 0.125]
'[c118] place the smallest number first.': [1, 0.0]
'[c118] shift all the elements one step to the left and send the element at index 0 to the end.': [1, 0.25]
'[c118] sort the elements in ascending order.': [1, 0.0]
'[c118] sort the list in ascending order.': [1, 0.0]
'[c119] add 8 before the first element, then at the end of the list.': [1, 0.0]
'[c119] add 8 to the end of the list, then add 8 to the front of the list.': [1, 0.0]
'[c119] add number 8 between every two consecutive elements.': [1, 0.125]
'[c119] append 8 to the list.': [1, 0.0]
'[c119] generate a list with every element appended with 8.': [1, 0.625]
'[c119] insert 8 after each element in the given list.': [1, 0.125]
'[c119] insert 8 after every element in the list.': [1, 0.125]
'[c119] insert 8 at positions 0 and n-1.': [1, 0.0]
'[c119] insert 8 at the 2nd index of the list.': [1, 0.375]
'[c119] insert 8 at the front and end of the list.': [1, 0.0]
'[c119] insert 8 before and after all elements except the first.': [1, 0.0]
'[c119] insert 8 every two elements.': [1, 0.375]
'[c119] insert 8 to every even position.': [1, 0.0]
'[c119] insert the value 8 at every 2 positions, starting at position 1.': [1, 0.125]
'[c119] prepend and append 8 to the list.': [1, 0.0]
'[c120] extract the first element.': [1, 1.0]
'[c120] find the first element in the list.': [1, 1.0]
'[c120] find the first even number in the list and return the list starting at that index.': [1, 0.0]
'[c120] get the first element.': [2, 2.0]
'[c120] get the remainder of the sum of all elements by 100.': [1, 0.0]
'[c120] keep the first element if it is the maximum, otherwise keep the last element.': [1, 0.625]
'[c120] keep the maximum element from the list.': [1, 0.25]
'[c120] remove all elements except the minimum.': [1, 0.125]
'[c120] remove all elements except the smallest element.': [1, 0.125]
'[c120] remove all the duplicate numbers from the list.': [1, 0.0]
'[c120] remove the number that only appears once.': [1, 0.875]
'[c120] retain only the first element of the list.': [1, 0.875]
'[c120] return the first element in the list.': [1, 1.0]
'[c120] return the first element.': [2, 2.0]
'[c120] return the smallest element from the list.': [1, 0.125]
'[c120] return the smallest element.': [1, 0.125]
'[c120] select the first element.': [1, 1.0]
'[c120] select the highest value from the list.': [1, 0.25]
'[c121] find and return the maximum element from the list.': [1, 0.75]
'[c121] get the maximum element of the list.': [1, 0.75]
'[c121] get the maximum element.': [1, 0.75]
'[c121] remove all elements but the last in the list.': [1, 1.0]
'[c121] remove all elements except the last one.': [1, 1.0]
'[c121] remove duplicate elements from the list and retain only the last occurrence.': [1, 0.5]
'[c121] return the largest element in the list.': [1, 0.0]
'[c121] return the largest element.': [2, 1.5]
'[c121] return the largest number in the list.': [1, 0.75]
'[c121] return the last element of the list.': [1, 1.0]
'[c121] return the last element.': [1, 1.0]
'[c121] select the largest element in the list.': [1, 0.75]
'[c121] take the largest element.': [1, 0.75]
'[c121] take the last element.': [1, 1.0]
'[c122] extract the max number in a list.': [1, 0.375]
'[c122] find and return the largest element in the list.': [1, 0.5]
'[c122] find and return the maximum element of the list.': [1, 0.375]
'[c122] find the element divisible by 10.': [1, 0.0]
'[c122] find the largest even number in the list.': [1, 0.125]
'[c122] find the largest number in the array and replace it with 4.': [1, 0.125]
'[c122] find the max in the list and then half its value.': [1, 0.0]
'[c122] find the maximum element in the list.': [1, 0.375]
'[c122] find the second largest element in the list.': [2, 0.375]
'[c122] find the second largest number.': [1, 0.375]
'[c122] get the smallest number from the list.': [1, 0.125]
'[c122] output the second largest element.': [1, 0.125]
'[c122] print the second largest value in the list.': [1, 0.125]
'[c122] remove all elements that are not the largest element.': [1, 0.375]
'[c122] return the element of the array most different from the others.': [1, 0.25]
'[c122] return the largest value in the list.': [1, 0.5]
'[c122] return the second largest element in the list.': [1, 0.5]
'[c122] return the second largest element.': [1, 0.5]
'[c122] return the smallest element.': [1, 0.125]
'[c123] find and remove the last odd number.': [1, 0.125]
'[c123] find the maximum and then remove all occurrences of the maximum.': [1, 0.0]
'[c123] find the maximum element in the list and replace all other elements with the maximum element.': [1, 0.375]
'[c123] generate a list of the largest element in the original list.': [1, 0.375]
'[c123] keep the number with the highest frequency.': [1, 0.375]
'[c123] remove all occurrences of a number except the first one.': [1, 0.0]
'[c123] remove the duplicate elements.': [1, 0.0]
'[c123] remove the elements, which are not the largest element.': [1, 0.375]
'[c123] remove the first and last integer from the list and return the maximum integer.': [1, 0.0]
'[c123] remove the minimum number from the list.': [1, 0.25]
'[c123] replace the first element with the biggest element in the array.': [1, 0.375]
'[c123] return the element that appears only once.': [1, 0.125]
'[c123] return the element that appears the most.': [1, 0.125]
'[c123] return the first element that occurs twice in the list.': [1, 0.375]
'[c123] return the highest number that occurs an even number of times.': [1, 0.25]
'[c123] return the largest element in the list.': [1, 0.375]
'[c123] return the largest element.': [1, 0.375]
'[c123] return the maximum element.': [2, 0.625]
'[c123] take the maximum of the array.': [1, 0.375]
'[c124] find and return the maximum non-repeating element.': [1, 0.125]
'[c124] find the largest element in the array.': [1, 0.375]
'[c124] find the second largest element in the list.': [1, 0.375]
'[c124] find the smallest number in the list.': [1, 0.125]
'[c124] find the unique element.': [1, 0.125]
'[c124] generate the maximum element of the list.': [1, 0.375]
'[c124] list the first element that, at least, occurs three times.': [1, 0.25]
'[c124] output the maximum element.': [1, 0.375]
'[c124] remove all the elements except the greatest one.': [1, 0.375]
'[c124] retain only the minimum value from the list.': [1, 0.125]
'[c124] return a single element from the list that is not repeated.': [1, 0.125]
'[c124] return any single digit number in the list.': [1, 0.125]
'[c124] return the largest element in the list.': [2, 0.75]
'[c124] return the last number that is larger than the sum of the succeeding numbers.': [1, 0.25]
'[c124] return the minimum element.': [1, 0.125]
'[c124] return the smallest number in the list.': [1, 0.125]
'[c124] select the maximum element.': [1, 0.375]
'[c125] drop all elements that are divisible by 6.': [1, 0.375]
'[c125] only keep the first 2 elements.': [1, 0.25]
'[c125] remove all duplicate elements.': [1, 0.125]
'[c125] remove all the duplicate numbers.': [1, 0.125]
'[c125] remove all the even numbers.': [2, 0.5]
'[c125] remove consecutive duplicate elements.': [1, 0.125]
'[c125] remove dublicate elements.': [1, 0.125]
'[c125] remove duplicate elements.': [2, 0.25]
'[c125] remove duplicates.': [1, 0.125]
'[c125] remove elements at even indices.': [1, 0.25]
'[c125] remove elements that appear more than once.': [1, 0.125]
'[c125] remove the duplicate elements.': [3, 0.375]
'[c125] retain the first and last elements of the list.': [1, 0.25]
'[c126] remove 0.': [1, 0.25]
'[c126] remove the element at index 0.': [1, 1.0]
'[c126] remove the first element if it is even.': [2, 1.75]
'[c126] remove the first element of the list.': [3, 3.0]
'[c126] remove the first element.': [11, 11.0]
'[c126] remove the smallest element.': [1, 1.0]
'[c127] delete all elements that are divisible by 3.': [1, 0.375]
'[c127] delete every alternate element in the list.': [1, 0.375]
'[c127] drop the last element.': [1, 1.0]
'[c127] filter the odd elements.': [1, 0.125]
'[c127] remove all elements from the given list that are divisible by 9.': [1, 0.375]
'[c127] remove all even elements.': [2, 0.375]
'[c127] remove all even numbers from the list.': [1, 0.125]
'[c127] remove all even numbers.': [3, 0.5]
'[c127] remove all odd integers.': [1, 0.375]
'[c127] remove all the even elements.': [1, 0.25]
'[c127] remove elements divisible by 3.': [1, 0.375]
'[c127] remove elements that are less than 10.': [1, 0.125]
'[c127] remove elements that are multiples of 5.': [1, 0.25]
'[c127] remove even numbers.': [1, 0.25]
'[c127] remove the element at the last index.': [1, 1.0]
'[c127] remove the last element.': [1, 1.0]
'[c128] exclude every even number and rearrange the remaining numbers in descending order.': [1, 0.0]
'[c128] filter elements based on their digits, leaving only those elements containing digits more than or equal to 5.': [1, 0.0]
'[c128] filter out all elements at even indices (0-based).': [1, 0.0]
'[c128] filter out elements greater or equal to 40.': [1, 0.0]
'[c128] filter out elements that are greater than 10.': [1, 0.0]
'[c128] generate a list of all elements less than 10.': [1, 0.0]
'[c128] list all elements below 10.': [1, 0.0]
'[c128] output elements smaller than 10.': [1, 0.0]
'[c128] pick elements divisible by 3 in ascending order.': [1, 0.0]
'[c128] print the smallest top 40% of the list.': [1, 0.0]
'[c128] remove all elements greater than 50.': [1, 0.0]
'[c128] remove all even elements.': [1, 0.0]
'[c128] remove elements at even indices.': [1, 0.0]
'[c128] remove elements greater than 90.': [1, 0.0]
'[c128] remove the elements at even indices.': [1, 0.0]
'[c128] sort the elements in ascending order and remove duplicate values.': [1, 0.0]
'[c129] create a list of the unique numbers that occur more than once.': [1, 0.125]
'[c129] eliminate duplicate elements.': [1, 0.125]
'[c129] filter the list, keeping only the elements that are repeated at least once.': [1, 0.125]
'[c129] find the most repeated element in the list.': [1, 0.125]
'[c129] keep only the first and last occurrence of each element.': [1, 0.125]
'[c129] keep only the first occurrence of each element.': [1, 0.125]
'[c129] keep the first occurrence of each element.': [1, 0.125]
'[c129] keep the unique elements.': [1, 0.125]
'[c129] remove all but the first occurrence of each element.': [1, 0.125]
'[c129] remove all duplicates from the list, keeping only the first occurrence.': [1, 0.125]
'[c129] remove duplicate elements.': [2, 0.25]
'[c129] retain the unique elements from the list.': [1, 0.25]
'[c129] return a list of repeating elements.': [1, 0.125]
'[c129] return a list of unique elements in the array.': [1, 0.125]
'[c129] return a list with the unique repeated elements.': [1, 0.125]
'[c129] return the unique elements in the list.': [1, 0.125]
'[c130] delete all elements except the first minimum element in a list.': [1, 0.0]
'[c130] discard all even values and keep only odd values.': [1, 0.0]
'[c130] drop duplicate elements.': [1, 0.125]
'[c130] eliminate the first element and all the elements that are the same as the first element.': [1, 0.125]
'[c130] generate a list of all the numbers except the first and last numbers.': [1, 0.125]
'[c130] generate a list of duplicate elements by picking out the first duplicate element in the list.': [1, 0.375]
'[c130] remove all occurrences of 0 and the first element.': [1, 0.125]
'[c130] remove all occurrences of the first element which is different than 0.': [1, 0.375]
'[c130] remove duplicates from the list.': [1, 0.0]
'[c130] remove duplicates, and return the remaining elements.': [1, 0.125]
'[c130] remove the first and last elements of the array.': [1, 0.25]
'[c130] remove the first and last elements.': [2, 0.875]
'[c130] return all dupilicate elements in the list.': [1, 0.0]
'[c130] return the elements that are not repeated in the array.': [1, 0.25]
'[c130] return the first n-1 consecutive elements, where n is the last element.': [1, 0.375]
'[c131] drop all elements except the first, the largest and the smallest element.': [1, 0.25]
'[c131] filter all elements divisible by 3.': [1, 0.125]
'[c131] filter out all the even numbers.': [1, 0.25]
'[c131] get all the even numbers in the list.': [1, 0.125]
'[c131] keep only the even-indexed elements.': [1, 0.125]
'[c131] remove all elements divisible by 7 or 9.': [1, 0.375]
'[c131] remove all elements not divisible by 7.': [1, 0.125]
'[c131] remove all elements that are not divisible by 7.': [1, 0.25]
'[c131] remove all odd elements.': [1, 0.125]
'[c131] remove all the elements greater than 50.': [1, 0.25]
'[c131] remove all the elements that end with the digit 5.': [1, 0.125]
'[c131] remove all the even numbers.': [1, 0.125]
'[c131] remove all the odd elements from the list.': [1, 0.25]
'[c131] remove all the odd elements.': [1, 0.125]
'[c131] remove elements at even indices.': [1, 0.25]
'[c131] remove elements with even indices.': [1, 0.0]
'[c131] remove every other element.': [1, 0.0]
'[c131] remove every third element.': [1, 0.0]
'[c131] remove the odd elements.': [1, 0.125]
'[c131] retain only the even numbers.': [1, 0.125]
'[c132] keep only odd position elements of the list.': [1, 0.0]
'[c132] not modify the order, but remove the even elements.': [1, 0.125]
'[c132] remove all elements appearing after the first 9.': [1, 0.0]
'[c132] remove all elements at even positions.': [1, 0.0]
'[c132] remove all elements that are divisible by 2.': [1, 0.125]
'[c132] remove all elements that are divisible by three.': [1, 0.0]
'[c132] remove all even elements from the list.': [1, 0.125]
'[c132] remove all even numbers.': [1, 0.125]
'[c132] remove all occurrences of 96.': [1, 0.0]
'[c132] remove all the elements divisible by 3.': [1, 0.125]
'[c132] remove all the elements that are divisible by 9.': [1, 0.25]
'[c132] remove all the odd elements from the list.': [1, 0.0]
'[c132] remove any instance of 9.': [1, 0.0]
'[c132] remove elements at even indices.': [1, 0.0]
'[c132] remove even numbers.': [1, 0.125]
'[c132] remove every element that is a multiple of 3.': [1, 0.5]
'[c132] remove every other element starting from the second element.': [1, 0.0]
'[c132] remove the elements at even indices.': [1, 0.0]
'[c132] remove the value 96.': [1, 0.0]
'[c133] filter only the odd elements.': [1, 0.125]
'[c133] filter out all elements that are less than 10.': [1, 0.0]
'[c133] filter out elements 10 or less.': [1, 0.0]
'[c133] filter out even numbers.': [1, 0.125]
'[c133] keep all the digits divisible by 3.': [1, 0.0]
'[c133] keep elements greater than 9.': [1, 0.0]
'[c133] keep the elements divisible by 3 or 7.': [1, 0.0]
'[c133] rearrange the list as [even, odd, even, odd, even, odd, .': [1, 0.0]
'[c133] remove all elements except the ones in odd indices.': [1, 0.0]
'[c133] remove all elements that are divisible by 9 and all elements that are even.': [1, 0.25]
'[c133] remove all even elements.': [1, 0.125]
'[c133] remove consecutive integers.': [1, 0.0]
'[c133] remove elements at even indices.': [1, 0.0]
'[c133] remove elements at odd indices.': [1, 0.0]
'[c133] remove even numbers.': [1, 0.25]
'[c133] select all the numbers greater than 5 and print them in order of appearance.': [1, 0.0]
'[c134] delete all continuous repetitive elements.': [1, 0.0]
'[c134] delete all repeated elements.': [1, 0.0]
'[c134] iterate through the list and remove the duplicate elements from it.': [1, 0.0]
'[c134] remove all the duplicate elements in the order of first appearance.': [1, 0.0]
'[c134] remove all the repeating elements.': [1, 0.0]
'[c134] remove consecutive duplicates.': [1, 0.0]
'[c134] remove duplicate adjacent elements.': [1, 0.0]
'[c134] remove duplicate elements.': [1, 0.0]
'[c134] remove duplicates.': [1, 0.0]
'[c134] remove the duplicate elements.': [2, 0.0]
'[c134] remove the duplicates from the list.': [1, 0.0]
'[c134] remove the last 3 instance of each element.': [1, 0.0]
'[c134] remove the last occurring element.': [1, 0.0]
'[c134] remove the repeated elements.': [1, 0.0]
'[c135] get the list of numbers that are not equal to 7.': [1, 0.125]
'[c135] remove all 7s from the list.': [1, 0.125]
'[c135] remove all 7s.': [3, 0.375]
'[c135] remove all elements that are equal to 7.': [1, 0.25]
'[c135] remove all occurrences of 7.': [1, 0.125]
'[c135] remove all occurrences of the first element.': [1, 0.25]
'[c135] remove one of all the elements of the list.': [1, 0.5]
'[c135] remove the first and last element.': [1, 0.25]
'[c135] remove the first and last elements.': [1, 0.125]
'[c135] remove the first element if it is 7.': [1, 0.875]
'[c135] remove the first element.': [1, 0.625]
'[c135] remove the first instance of 7.': [2, 1.25]
'[c135] remove the first occurrence of 7.': [1, 0.625]
'[c135] remove the last element if it is equal to any other element.': [1, 0.25]
'[c135] remove the last element if it is equal to the first element.': [1, 0.375]
'[c136] de-duplicate the elements of the list.': [1, 0.25]
'[c136] delete the last occurrence of the first element.': [1, 0.375]
'[c136] remove adjacent duplicates.': [1, 0.25]
'[c136] remove all repeating elements.': [1, 0.25]
'[c136] remove any consecutive duplicate elements.': [1, 0.25]
'[c136] remove any duplicate elements from the list.': [1, 0.25]
'[c136] remove consecutive duplicates.': [2, 0.5]
'[c136] remove duplicate adjacent elements.': [1, 0.375]
'[c136] remove duplicate elements.': [3, 0.75]
'[c136] remove duplicate values.': [1, 0.25]
'[c136] remove duplicates from the list.': [1, 0.25]
'[c136] remove duplicates.': [1, 0.25]
'[c136] remove repeating elements from the list.': [1, 0.25]
'[c136] remove the duplicates of the elements.': [1, 0.25]
'[c136] remove the last element if it is a duplicate.': [1, 0.375]
'[c136] remove the last occurence of the most frequently occurring element.': [1, 0.125]
'[c137] keep only the first occurrence of every element.': [1, 0.0]
'[c137] remove all 3s.': [1, 1.0]
'[c137] remove all duplicates.': [1, 0.0]
'[c137] remove all elements except for the first occurrence of each element.': [1, 0.0]
'[c137] remove all elements that appear more than once.': [1, 0.25]
'[c137] remove all elements that has 3.': [1, 0.75]
'[c137] remove all occurrences of 3.': [1, 1.0]
'[c137] remove all the elements that are repeated 3 times.': [1, 0.375]
'[c137] remove consecutive duplicates.': [1, 0.0]
'[c137] remove duplicate elements and maintain original order.': [1, 0.0]
'[c137] remove duplicate elements.': [4, 0.125]
'[c137] remove duplicates and elements that appear more than twice.': [1, 0.375]
'[c137] remove the elements appearing more than once.': [1, 0.0]
'[c137] remove the first occurrence of 3.': [1, 0.25]
'[c137] remove the ones and threes.': [1, 0.875]
'[c137] remove the second occurrence of each element.': [1, 0.125]
'[c138] remove all duplicate elements (non-repeating elements).': [1, 0.375]
'[c138] remove all duplicate elements.': [1, 0.125]
'[c138] remove all repeated elements.': [1, 0.125]
'[c138] remove all the duplicate elements from the given list.': [1, 0.125]
'[c138] remove duplicate adjacent numbers.': [1, 0.125]
'[c138] remove duplicate elements except for the first occurrence while preserving the order.': [1, 0.125]
'[c138] remove duplicate elements.': [1, 0.125]
'[c138] remove duplicates and return the remaining elements.': [1, 0.125]
'[c138] remove duplicates from the list.': [1, 0.125]
'[c138] remove duplicates.': [1, 0.125]
'[c138] remove repeating elements in a list.': [1, 0.125]
'[c138] remove the duplicate elements.': [1, 0.125]
'[c138] remove the duplicates while preserving the order.': [1, 0.0]
'[c138] remove the duplicates.': [1, 0.125]
'[c138] remove the repeated elements.': [2, 0.25]
'[c138] retain only the unique elements.': [1, 0.0]
'[c138] return the list of unique elements.': [1, 0.125]
'[c139] remove adjacent duplicate elements.': [1, 0.25]
'[c139] remove all duplicate elements from the list.': [1, 0.375]
'[c139] remove all duplicate elements.': [1, 0.25]
'[c139] remove all elements from an array that are not unique.': [1, 0.25]
'[c139] remove all occurrences of 1.': [1, 0.25]
'[c139] remove all occurrences of the first element in the list.': [1, 0.625]
'[c139] remove all occurrences of the minimum number.': [1, 0.5]
'[c139] remove all the duplicate elements.': [1, 0.25]
'[c139] remove all the duplicates in a given list.': [1, 0.25]
'[c139] remove all the occurrences of 1 in the list.': [1, 0.25]
'[c139] remove all the occurrences of the maximum element.': [1, 0.375]
'[c139] remove all the odd numbers from the list.': [1, 0.25]
'[c139] remove all the odd numbers.': [1, 0.25]
'[c139] remove duplicate consecutive elements.': [1, 0.25]
'[c139] remove the duplicate elements from the input list.': [1, 0.25]
'[c139] remove the duplicate elements.': [1, 0.375]
'[c139] remove the duplicates and elements that are 1.': [1, 0.375]
'[c140] change 7 to 9.': [1, 0.375]
'[c140] change the second element in the list to a 9.': [1, 0.75]
'[c140] insert a 9 in the second position of the list.': [1, 0.0]
'[c140] replace 4 with 9.': [1, 0.125]
'[c140] replace 8 with 9.': [1, 0.25]
'[c140] replace all elements > 9 with 9.': [1, 0.375]
'[c140] replace all occurences of 4 by 9.': [1, 0.375]
'[c140] replace all occurrences of 7 with 9.': [2, 0.0]
'[c140] replace each element with the nearest multiple of 9.': [1, 0.0]
'[c140] replace the 2nd element with the number 9.': [1, 0.625]
'[c140] replace the element in the 2nd index with 9.': [1, 0.375]
'[c140] replace the second element with 9.': [6, 4.375]
'[c141] eliminate the sorted even numbers, and the order of the remaining values should remain the same.': [1, 0.0]
'[c141] first take the first element, then take the last element, and repeat this until the list is empty.': [1, 0.0]
'[c141] remove all duplicate elements from the list.': [1, 0.0]
'[c141] remove all duplicate elements.': [1, 0.0]
'[c141] remove all occurrences of the first number.': [1, 0.0]
'[c141] remove consecutive duplicates.': [1, 0.0]
'[c141] remove consecutive numbers.': [1, 0.0]
'[c141] remove duplicate elements in the same order.': [1, 0.0]
'[c141] remove duplicate elements.': [1, 0.0]
'[c141] remove duplicates and keep one instance.': [1, 0.0]
'[c141] remove the maximum number from the list.': [1, 0.0]
'[c141] sort and remove duplicates.': [1, 0.0]
'[c141] sort the elements and remove all duplicates.': [1, 0.0]
'[c142] convert each digit into its number element.': [1, 0.375]
'[c142] convert each digit to its corresponding lowercase ascii value and add them.': [1, 0.125]
'[c142] convert each element in the list to a string representation, then convert it to a list of individual digits.': [1, 0.5]
'[c142] convert each number to a list of digits.': [1, 0.125]
'[c142] convert every digit of the number to its component digits and flatten them.': [1, 0.625]
'[c142] convert the elements to a list of digits forming the number.': [1, 0.375]
'[c142] convert the elements to digits then spread out the digits.': [1, 0.125]
'[c142] convert the number to list of digits.': [1, 0.625]
'[c142] convert the numbers to digits.': [1, 0.625]
'[c142] decompose each digit of the list.': [1, 0.625]
'[c142] extract the digits from the digits from the elements.': [1, 0.625]
'[c142] first convert the number to English, then flatten the list.': [1, 0.125]
? '[c142] split each digit from each number and insert them into the list, with the ''tens'' digit appearing before the ''units'' digit.'
: [1, 0.5]
'[c142] split each element into its digits and append them to the resultant list.': [1, 0.625]
'[c142] split each number digit by digit.': [1, 0.375]
'[c142] split each number into its digits and flatten the result.': [1, 0.5]
'[c142] turn each digit of a given number into an int and then add it to the resulted list.': [1, 0.75]
'[c143] assign 0 to all of the even elements.': [1, 0.0]
'[c143] replace a number with 6 if it is greater than or equal to 50, else replace it with 0.': [1, 0.0]
'[c143] replace all instances of the first element with 0.': [1, 0.0]
'[c143] replace all occurrences of a number with its least possible number.': [1, 0.0]
'[c143] replace all occurrences of a number with the smallest number in the list.': [1, 0.125]
'[c143] replace all occurrences of the first element with the last element.': [1, 0.0]
'[c143] replace all the duplicate elements with a single instance of that element.': [1, 0.0]
'[c143] replace all the higher-order elements with their respective lower-order elements.': [1, 0.0]
'[c143] replace all the occurrences of the last element with 0.': [1, 0.0]
'[c143] replace duplicate elements with 0.': [2, 0.0]
'[c143] replace duplicate values with 0.': [1, 0.0]
'[c143] replace each element by the minimum element found in the rest of the array.': [1, 0.25]
'[c143] replace elements that repeat with that of the element 0.': [1, 0.0]
'[c143] replace repeating elements with a single instance.': [1, 0.0]
'[c143] replace the last element with 0 if the first element is 0, else replace the last element with the first element.': [1, 0.0]
'[c143] replace the maximum value to 0 if it appears more than 2 times.': [1, 0.0]
'[c144] Subtract 2 from each element, and if the result is divisible by 5, replace it with the previous element.': [1, 0.125]
? '[c144] add 20 (for each number >= 60), 10 (for each number >= 40), 5 (for each number >= 20), and 2 (for each number less than 20).'
: [1, 0.125]
'[c144] add last element to first element whose difference between their digits is 10.': [1, 0.25]
'[c144] add the next highest number as per the number preceding it.': [1, 0.125]
'[c144] append the first element - 10 to the list.': [1, 0.125]
'[c144] find the difference between the first and last digit and add that value to the last digit.': [1, 0.25]
'[c144] find the difference between the first element and itself and append it to the list.': [1, 0.25]
'[c144] generate a list of elements min - 1, min - 1, other elements.': [1, 0.25]
'[c144] get the penultimate element of the list and append it twice.': [1, 0.125]
'[c144] get the sum of the digits of each number, and add the sum to the number.': [1, 0.25]
'[c144] insert a number right before 0 and also subtracting 2 from that number.': [1, 0.25]
'[c144] remove the last digit of each number that is not zero and add it to itself.': [1, 0.125]
'[c144] replace all the occurrences of the first element with the first element minus 2.': [1, 0.125]
'[c144] replace each element with the difference of that element and the last element of the list.': [1, 0.25]
'[c144] replace element 0 with the digit 9, and every other element with element 9 minus the current element.': [1, 0.25]
? '[c144] replace every even element with the element closest to its left which is smaller than itself and not zero, and to replace every odd element with the element closest to its right which is smaller than itself.'
: [1, 0.25]
'[c144] replace the element at index i with the number 100 reduced by i.': [1, 0.125]
'[c144] replace the first integer with the closest smaller integer.': [1, 0.25]
'[c144] replace the zeroth element with the last element if the zeroth element is greater than 40.': [1, 0.25]
? '[c144] replace those elements with 10 less than their value except for the last element, where it is replaced with 10 less than twice its value.'
: [1, 0.125]
'[c145] duplicate all the elements.': [1, 0.125]
'[c145] duplicate the first element as many times as the length of the list.': [1, 0.875]
'[c145] duplicate the first element of the list that many times as the length of the list.': [1, 1.0]
'[c145] duplicate the first element of the list the length of the list amount of times.': [1, 0.875]
'[c145] duplicate the first element.': [2, 2.0]
'[c145] generate a list of the same length, where each element is equal to the first element.': [1, 1.0]
'[c145] multiply the first element by the list length and fill the list with the result.': [1, 0.125]
'[c145] repeat the first element for the length of the array.': [1, 0.875]
'[c145] repeat the first element for the length of the list.': [1, 1.0]
'[c145] repeat the first element in the list n-1 times, where n is the length of the list.': [1, 1.0]
'[c145] repeat the first element n times where n is the second element.': [1, 0.375]
'[c145] repeat the first element of the list n times, where n is the length of the list.': [1, 1.0]
'[c145] repeat the first element the same number of times as length of the list.': [1, 0.875]
'[c145] repeat the first element throughout the list.': [1, 1.0]
'[c145] replace all elements except the first with the first element.': [1, 1.0]
'[c145] replace the list with the first element.': [1, 1.0]
? '[c146] calculate the difference between the first and second elements of the list, for all the pairs of adjacent elements in the list.'
: [1, 0.25]
'[c146] remove duplicate elements from the list and then subtract 1 from each element.': [1, 0.0]
'[c146] replace each element with (element - 10)/2, rounded to the nearest integer.': [1, 0.0]
? '[c146] subtract 1 from each element if the element is greater than 10 and subtract 2 from each element if the element is less than or equal to 10.'
: [1, 0.0]
'[c146] subtract 15 from each element.': [1, 0.0]
'[c146] subtract 2 from each element of the list.': [1, 0.0]
'[c146] subtract 22 from each element and then divide by 2 to get the output.': [1, 0.0]
'[c146] subtract 24 from each element.': [1, 0.0]
'[c146] subtract 3 from each element.': [1, 0.0]
'[c146] subtract 3 from every element and then divide by 2 (integer division).': [1, 0.0]
'[c146] subtract 30 from each element.': [2, 0.0]
'[c146] subtract 32 from each element.': [1, 0.0]
'[c146] subtract 4 from a number if it''s odd, otherwise subtract 7.': [1, 0.0]
'[c146] subtract the corresponding element from 100.': [1, 0.0]
'[c147] add 1 to each element and then transform the odd elements by dividing by 2 and rounding up to the nearest integer.': [1, 1.0]
'[c147] add the number of times that each number occurs in the list.': [1, 1.0]
'[c147] append the square root element of the last element.': [1, 0.0]
? '[c147] convert the number to a sequence, where the number is separated by its digit, and the list of digits is ordered increasingly.'
: [1, 0.125]
'[c147] generate a list of elements 1, 2, 3, 4, and then in every iteration, double the previous number and add 1.': [1, 1.0]
'[c147] generate a list of number and its previous number.': [1, 1.0]
'[c147] generate a list of numbers 1 to length of list, and the elements themselves.': [1, 1.0]
'[c147] insert the index of each number.': [1, 1.0]
'[c147] put the number represented by the nth digit as the nth element of the new list.': [1, 0.25]
'[c147] return a new list whose elements are "num, index_of_num + 1".': [1, 1.0]
'[c147] rewrite each element in the form of x and x^2.': [1, 1.0]
'[c147] separate the digits in the number and assosiate the position with the digit, and appends it to the list.': [1, 1.0]
'[c148] create a list of integers from 1 to the maximum number in the list, repeating the numbers in the list.': [1, 0.375]
'[c148] create a new list such that each element in the original list is repeated by its position.': [1, 0.5]
'[c148] create a range of 1 to the greatest number in the list.': [1, 0.25]
'[c148] expand each number by 1 in the list.': [1, 0.25]
'[c148] generate a list from 1 up to the last element, then add in the elements of the list in order.': [1, 0.625]
'[c148] generate a list of all the numbers between 1 and the largest value, then repeat those numbers.': [1, 0.5]
'[c148] generate a list of consecutive elements from 1 to the maximum element of the list.': [1, 0.25]
'[c148] generate a list of elements 1, 2, 3, 4, 5, and repeat each element as many times as its original value.': [1, 0.625]
'[c148] generate a list of numbers from 1 to the first number, repeat the sequence for the second number, and so on.': [1, 0.875]
'[c148] generate a list of numbers from 1 to the last number, inclusive, repeated the same number of times.': [1, 0.75]
'[c148] generate a list, starting from 1 and incrementing by 1, with a length equal to the maximum element of the list.': [1, 0.5]
'[c148] generate a series from 1 to the greatest element, with 1 appearing as many times as the element.': [1, 0.375]
? '[c148] generate a series of numbers from 1 to the largest number, with the largest number being repeated an equal number of times.'
: [1, 0.625]
'[c148] generate one list starting from 1 to the length of original list, then reverse.': [1, 0.375]
'[c148] generate the sequence from 1 to n, then repeat it, where n is the last element of the input list.': [1, 0.5]
'[c148] increment each element by one until the list contains only 5s.': [1, 0.125]
'[c148] iterate from 1 to the maximum element in the list and print 1 to the maximum element for each element.': [1, 0.5]
'[c148] replace each element with the natural number series starting from 1.': [1, 0.5]
'[c148] replicate each element to (element - 1) copies.': [1, 0.5]
'[c149] add each element to the next, if the result exceeds 99, discard the left-most digit.': [1, 0.375]
'[c149] double all the elements except the first element.': [1, 0.25]
'[c149] double the elements if they are even, else ignore them.': [1, 0.125]
'[c149] exclude the first element if it is 1.': [1, 0.375]
'[c149] extract even numbers.': [1, 0.125]
'[c149] multiply each element by 10 and subtract 1 to the elements that are not divisible by 10.': [1, 0.25]
'[c149] multiply each element by 2 and then subtract 1 if the element is greater than 20.': [1, 0.0]
'[c149] multiply each element with the next element.': [1, 0.375]
'[c149] multiply every element by 10 and subtract 1.': [1, 0.0]
'[c149] multiply the elements and remove the first element.': [1, 0.5]
'[c149] multiply the elements at each index and remove the first, third and fifth elements.': [1, 0.375]
'[c149] multiply the elements in the list except the first element and aggregate them into a new list.': [1, 0.375]
'[c149] multiply the first element by the second element.': [1, 0.375]
'[c149] remove all even numbers.': [1, 0.25]
'[c149] remove the first element and double all the other elements.': [1, 0.25]
'[c149] remove the first element if the first element is even.': [1, 0.25]
'[c149] remove the first element.': [2, 0.75]
'[c150] add 1 to each element, except to the last element.': [1, 0.375]
'[c150] append all the elements from the start of the list to the first element repeated.': [1, 0.25]
'[c150] check if any two elements of the list are the same and, if so, include all elements in between.': [1, 0.25]
'[c150] copy an element if it''s not the last element.': [1, 0.0]
'[c150] duplicate every element.': [1, 0.125]
'[c150] insert missing numbers.': [1, 0.125]
'[c150] insert the element in front of every other element.': [1, 0.0]
? '[c150] keep the original array if it does not contain any non-unique element and otherwise add all the elements in the array to the array in order.'
: [1, 0.5]
'[c150] leave all elements intact but append the previous number in the list if the current element is not 0.': [1, 0.125]
? '[c150] leave any number between 50 and 100 as it is, and for the rest of the numbers, if the number is less than 10, it is increased by 10 with the prefix 1 or if the number is less than 10 but not less than 20, it is increased by 10 with the prefix 2 and so on.'
: [1, 0.25]
'[c150] repeat each element.': [1, 0.25]
'[c150] repeat elements with the same value in between.': [1, 0.0]
'[c151] duplicate each element in a list.': [1, 0.25]
'[c151] duplicate each element of the list, except 0 which is removed.': [1, 0.25]
'[c151] duplicate every element in the list, excluding zeros, which will be removed.': [1, 0.25]
'[c151] duplicate the elements 5 times.': [1, 0.125]
'[c151] multiply each element to its respective index.': [1, 0.25]
'[c151] repeat each element 5 times, then 4 times for the most recent element.': [1, 0.125]
'[c151] repeat each element 6 times.': [1, 0.125]
'[c151] repeat each element according to the element''s value.': [1, 0.125]
'[c151] repeat each element as many times as its value.': [1, 0.375]
'[c151] repeat each element by its value.': [1, 0.25]
'[c151] repeat each element from a list a same number of times as the value of this element.': [1, 0.25]
'[c151] repeat each element of the original array according to its value.': [1, 0.5]
'[c151] repeat each element the same number of times as itself.': [1, 0.25]
'[c151] repeat each element the same number of times as the element itself.': [1, 0.375]
'[c151] repeat each number and then use the numbers to generate a list.': [1, 0.125]
'[c151] repeat the element three times.': [1, 0.125]
'[c151] replicate each element an arbitrary number of times determined by itself.': [1, 0.25]
'[c151] replicate the elements 5 times.': [1, 0.125]
'[c152] divide all numbers by 3, round down, and then add 1.': [1, 0.0]
'[c152] divide each element by 3 and remove the remainder if any.': [1, 0.0]
'[c152] divide each element by 3 and round down to the nearest integer.': [2, 0.0]
'[c152] divide each element by 3 and round it down to the nearest integer.': [1, 0.0]
'[c152] divide each element by 3 and round to the nearest integer.': [1, 0.0]
'[c152] divide each element by 3, rounded down.': [1, 0.0]
'[c152] divide each element by 3.': [1, 0.0]
'[c152] divide each number in the list by 3 and round down to the nearest integer.': [1, 0.0]
'[c152] divide elements by 3, round down to the nearest integer, and discard the remainder.': [1, 0.0]
'[c152] divide every element by 3.': [1, 0.0]
'[c152] divide the elements by 3, round down to the nearest integer and return the result.': [1, 0.0]
'[c152] divide the number by 3 and round up.': [1, 0.0]
'[c152] find the tens digit and half it if the digit is even and replace it with 0 if the digit is odd.': [1, 0.125]
'[c152] perform integer division by 2 on all elements.': [1, 0.0]
'[c152] replace all odds with 0, evens with half of the corresponding even numbers.': [1, 0.0]
'[c152] replace prime numbers by the sum of their digits.': [1, 0.0]
'[c152] take each element, divide it by 3, and round it down to the nearest integer.': [1, 0.0]
'[c152] take the floor division of the  element with 3, and multiply by 3.': [1, 0.0]
'[c153] count the frequency of each element.': [1, 0.625]
'[c153] count the number of times an element is repeated and then replace the element with its count.': [1, 0.625]
'[c153] remove duplicates and append the count of the duplicates.': [1, 0.625]
'[c153] replace all duplicate numbers with the count of the number.': [1, 0.5]
'[c153] replace all instances of the last element with the second to last element.': [1, 0.0]
'[c153] replace all the duplicate elements with the number of their occurrences.': [1, 0.625]
? '[c153] replace each element in the list with the number of times it occurs in the list, then sort the list in ascending order.'
: [1, 0.5]
'[c153] replace each element with the count of its occurrences in the list.': [1, 0.625]
'[c153] replace every duplicate with the number of times it occurred.': [1, 0.5]
? '[c153] replace the first two elements of the list with the frequency of the first element, the next two elements with the frequency of the second element, and so on.'
: [1, 0.5]
"[c154] add half of each element to itself (the result of dividing an integer by two is truncated towards \u2212\u221E).": [1, 0.0]
'[c154] add the integers at each index.': [1, 0.0]
'[c154] double each element of the array.': [1, 0.0]
'[c154] double each element.': [1, 0.0]
'[c154] double every element and add 3 to it.': [1, 0.0]
'[c154] double the first element and append it to the list.': [1, 0.0]
'[c154] mutiply each number by the previous.': [1, 0.0]
'[c154] replace each element with (element * 2).': [1, 0.0]
'[c154] replace every number with the sum of all the numbers that have already appeared.': [1, 0.0]
'[c154] sum the adjacent ones then divide them by 3.': [1, 0.0]
'[c154] sum the second half to the first half.': [1, 0.0]
'[c154] take the first element and add it to each of the other elements.': [1, 0.0]
'[c155] count the number of times an element appears and multiply it by the element.': [1, 0.0]
'[c155] generate a list of elements 1, 2, 3 .': [1, 0.0]
'[c155] multiply each element with its index and then append them.': [1, 0.125]
'[c155] multiply each number by its index, and the sum each result.': [1, 0.0]
'[c155] multiply the elements at the same position with each other.': [1, 0.0]
'[c155] multiply the elements by their index + 1.': [1, 0.0]
'[c155] square the values and add all of them.': [1, 0.0]
'[c155] sum all occurrences of each elements and repeat that sum of the element that many times.': [1, 0.0]
'[c155] sum the occurrences of each element.': [1, 0.0]
? '[c155] take a list of integers and generate a series of outputs, where each output is the product of the previous output and the current element in the list.'
: [1, 0.0]
'[c156] add 1 to all the elements.': [1, 0.0]
'[c156] add 1 to each element and take modulo 100.': [1, 0.0]
'[c156] add 1 to each element of the list and then multiply every element by 2.': [1, 0.0]
'[c156] add 1 to each element.': [1, 0.0]
'[c156] add 1 to every element in the list.': [1, 0.0]
'[c156] add 1 to every element, then divide by 2, then round to the nearest integer.': [1, 0.0]
'[c156] add 12 to each element and subtract 1 from the result if the element is even.': [1, 0.0]
'[c156] add 2 to each element and replace any 9 with 1.': [1, 0.0]
'[c156] add a 1 to each element, then take the modulo 100 to get the number between 0 and 99.': [1, 0.0]
'[c156] convert every number into the next consecutive number.': [1, 0.0]
'[c156] increment each element by 1 then multiply the incremented by 2.': [1, 0.0]
'[c156] increment each element by one, then multiply by two, then subtract one.': [1, 0.0]
'[c157] add 1 if the number is odd else add 0.': [1, 0.75]
'[c157] add 1 to every even number and the count of 0s to every odd number.': [1, 0.0]
'[c157] add a 0 after every element (including 0s).': [1, 0.75]
'[c157] alternately append 1 and 0 to each number in the list.': [1, 0.25]
'[c157] append 0/1 to each element based on odd/even.': [1, 1.0]
'[c157] append a 0 after every element that isn''t already a 0.': [1, 0.75]
'[c157] append a 1 after every element, append a 0 after every 2nd element, and a 1 after every 3rd element.': [1, 0.375]
'[c157] insert 0 after each element and insert 1 after each element that is a multiple of 3.': [1, 0.625]
'[c157] insert 0 and 1 in the list as "0x" and "1x" where x is the element itself.': [1, 0.375]
'[c157] insert a 0 and a 1 after each element.': [1, 0.375]
'[c157] insert a 0 to the left of each element except for the last element, and insert a 1 to the right of it.': [1, 0.25]
'[c157] interleave strings "0" and "1" with each element.': [1, 0.625]
'[c157] make a list of elements with the first number being itself then a zero with the second number and so on.': [1, 0.25]
'[c157] put a 0 after each element except the first and last.': [1, 0.0]
'[c157] replace each element with its number of occurrences, then 1 is appended.': [1, 0.0]
? '[c157] return a list of 0s and 1s, where 0 is added after every element which is a multiple of 3 and 1 is added after all other elements.'
: [1, 0.25]
'[c158] convert the list to binary.': [1, 0.0]
'[c158] count identical pairs of elements.': [1, 0.0]
'[c158] count the number of unique elements in the list.': [1, 0.0]
'[c158] count the occurrence of the number 1; each number is replaced by the count of 1s found previous to that number.': [1, 0.0]
'[c158] count the occurrences of 7s then count the occurrences of 1s, and then count the occurrences of 6s, and so on.': [1, 0.0]
'[c158] replace all elements 7 with 1, then count the occurrence of 1 and 0.': [1, 0.125]
? '[c158] replace each element that is not equal to 1 with 0, and for each element that is equal to 1 we remove it from the list.'
: [1, 0.0]
'[c158] replace each element with 1 if it occurs an odd number of times and replace it with 0 otherwise.': [1, 0.0]
'[c158] replace each element with the number of times it appears.': [1, 0.0]
'[c158] replace every element with its frequency.': [1, 0.25]
? '[c158] replace every number with 0, except where it has an adjacent number with which it is the same, then they both get replaced by 1.'
: [1, 0.125]
'[c158] replace numbers with 1 if the element appears more than once else replace with 0.': [1, 0.125]
'[c158] replace the first occurrence of 6, 7, 8 with 0, 1, 2 respectively.': [1, 0.0]
'[c159] count the frequencies of each unique element in the list.': [1, 0.0]
'[c159] count the frequency of each number and generate a list of the count.': [1, 0.0]
'[c159] count the frequency of each number and then list the number and their frequency.': [1, 0.0]
'[c159] count the number of occurrences of each number.': [1, 0.0]
'[c159] count the occurrences of each digit, then append the count for digits 0-9 in order.': [1, 0.0]
'[c159] count the occurrences of each unique digit from 0 to 9.': [1, 0.0]
'[c159] count the occurrences of each unique element and generate the count as a list.': [1, 0.0]
'[c159] replace each element with the total number of occurrences of that element in the list.': [1, 0.0]
'[c159] replace each number with a count of the number of times the number appeared before it.': [1, 0.0]
'[c159] replace each number with its count.': [1, 0.0]
'[c160] add 25 to each element and subtract 1 from the result.': [1, 0.0]
'[c160] add 25 to the first digit and reverse the digits.': [1, 0.875]
'[c160] append 9 followed by the first element on the original list.': [1, 0.0]
'[c160] convert every digit into its ten''s complement.': [1, 0.875]
? '[c160] generate a list of elements 2, 1, the number 8 subtracted by 1, the original elements multiplied by 10, the number 7 added by 5.'
: [1, 0.0]
'[c160] repeat the element and then add 25 to the value.': [1, 0.0]
'[c160] subtract 10 from each element, and if the element is less than 10, add 100.': [1, 0.375]
'[c160] subtract 29 and then add 63 to each number in the list.': [1, 0.0]
'[c160] subtract each element by 3 and reverse the list.': [1, 0.0]
'[c160] subtract each element from 100.': [1, 0.625]
'[c160] subtract the elements in the list from 100.': [1, 0.0]
'[c160] subtract the last element from each element, then add 37 to the result.': [1, 0.0]
'[c160] transform each element as follows: first to tens, then to tens + ones.': [1, 0.125]
'[c160] transform the 1st element to be 99, the 2nd to be 98, and so on.': [1, 0.875]
'[c161] add 1 to the first element and add 7 to other elements.': [1, 0.0]
'[c161] add 5 and then subtract 1 from each element.': [1, 0.0]
'[c161] add 5 to each element and also add 2 to the first element.': [1, 0.0]
'[c161] add 5 to each element in the array.': [1, 0.0]
'[c161] add 5 to elements at even indices and add 6 to elements at odd indices.': [1, 0.0]
'[c161] add 9 to each element in the array and return the new array.': [1, 0.0]
'[c161] add 9 to each element.': [2, 0.0]
'[c161] add 9 to each number and prefix with a 1 if it is greater than 10.': [1, 0.0]
'[c161] add 9 to the original number and keep the last digit.': [1, 0.0]
'[c161] add the difference of the index and element with the element, and replace the index-th element with the result.': [1, 0.0]
'[c161] increment every element in the list by 1, and if it is greater than 9, add 0 after it.': [1, 0.0]
'[c161] sum the two numbers and then subtract 10.': [1, 0.0]
'[c162] combine adjacent elements.': [1, 0.5]
'[c162] generate the Cartesian product of 1 and the given list.': [1, 0.5]
'[c162] generate the multiplication and addition of each element in the list.': [1, 0.25]
'[c162] multiply consecutive elements and store them, ie [31, 31, 10, 28, 10, 16] is 8x8, 8x8, 1x1, 7x1, 1x1, 3x1.': [1, 0.25]
'[c162] multiply each element at index i with index i+1.': [1, 0.0]
'[c162] multiply each element by 3 and add 7.': [1, 1.0]
'[c162] multiply each element with 10 and then subtract 9.': [1, 0.375]
'[c162] multiply each element with the next and concatenate it.': [1, 0.0]
'[c162] multiply each pair of elements and the concatenate the resulting string.': [1, 0.0]
'[c162] multiply each pair of elements in the list.': [1, 0.0]
'[c162] reverse the elements, and for every element, append the element with the first element.': [1, 0.375]
'[c162] take each pair of elements in the list and multiply them, then add them to the answer.': [1, 0.0]
'[c163] add the first two elements and the last two elements of the list and then add the two sums together.': [1, 0.0]
'[c163] add the first two elements, and multiply the third and fourth element.': [1, 0.125]
'[c163] add the two elements one by one and after adding two elements sum of both elements need to be printed.': [1, 0.0]
'[c163] double each element, except for the case where the number is 17, where it should be decreased by 13.': [1, 0.125]
'[c163] double each element.': [1, 0.125]
'[c163] double every element.': [1, 0.0]
'[c163] double the first element and then add the next element.': [1, 0.0]
'[c163] multiply the duplicate elements by 2.': [1, 0.0]
'[c163] multiply the first element by 2, multiply the second element by 4, and so on.': [1, 0.0]
'[c163] multiply the first two elements and then the next two and so on.': [1, 0.0]
'[c163] perform number pair addition, where the pair contains a same number.': [1, 0.25]
'[c163] replace each element with the sum of the two elements next to it.': [1, 0.0]
'[c163] replace each element with the sum of the two elements.': [1, 0.0]
'[c163] replace every element with its double.': [1, 0.0]
'[c163] sum up every pair of elements.': [1, 0.0]
'[c163] sum up pairs of elements.': [1, 0.0]
'[c164] compute the sum of each index value and the list length.': [1, 0.0]
'[c164] divide by 3, ignore the remainder, and subtract 1.': [1, 0.125]
'[c164] divide each element by 2 and round it to the floor.': [1, 0.0]
'[c164] divide each element by 3 and floor it.': [1, 0.0]
'[c164] divide each element by 3 and return the integer value.': [1, 0.0]
'[c164] divide each element by 3 and round it down.': [1, 0.0]
'[c164] divide each element by 3 and round the value to the nearest integer value.': [1, 0.0]
'[c164] divide each element by 3 and take the floor.': [1, 0.0]
'[c164] divide each element by 3.': [1, 0.0]
'[c164] divide elements by 3, round the results down (-0.': [1, 0.0]
'[c164] divide every element by 3 and round it.': [1, 0.125]
'[c164] divide every element by 3 and round up to the next integer.': [1, 0.0]
'[c164] divide odd numbers by 3 and even numbers by 4.': [1, 0.0]
'[c164] first half the array and then add 1 to each element.': [1, 0.0]
'[c164] subtract 3 for each number and then divide the difference by 3.': [1, 0.0]
'[c164] subtract a random number from each element to a random number between 1 and 29.': [1, 0.125]
'[c164] take each element and divide it by 3 and round it to the nearest integer.': [1, 0.0]
'[c165] exclude any element if it has repetition, then reverse the order.': [1, 0.0]
'[c165] generate a list of the 2nd largest element and the 3nd smallest element.': [1, 0.0]
'[c165] remove all the prime numbers and even numbers separately.': [1, 0.0]
'[c165] remove every alternative element starting from the back of the list.': [1, 0.0]
'[c165] retain all the even numbers in the list.': [1, 0.125]
? '[c165] return a list of even numbers existing in the list and the number of occurrences of each even number as (even number + number of occurrences), in descending order.'
: [1, 0.0]
'[c165] reverse all the digits in all elements.': [1, 0.125]
'[c165] reverse only elements greater than 9.': [1, 0.0]
'[c165] reverse the elements and then remove the elements occurring more than once.': [1, 0.0]
'[c165] reverse the elements in the list, then remove every second element.': [1, 0.0]
'[c165] reverse the elements of a list, unitl the list becomes empty.': [1, 0.0]
'[c165] reverse the list and then only return elements in even indices.': [1, 0.0]
'[c165] reverse the list then reverse the elements as pairs.': [1, 0.0]
'[c165] reverse the pairs of elements.': [1, 0.25]
'[c165] sort the numbers in descending order.': [1, 0.0]
'[c165] take only the even numbers and reverse it.': [1, 0.0]
'[c166] assort the elements in ascending order.': [1, 0.0]
'[c166] first sort the list and then alternate the order of the elements.': [1, 0.0]
'[c166] sort a list in ascending order.': [1, 0.0]
'[c166] sort the elements and keep the duplicate elements.': [1, 0.0]
'[c166] sort the elements in ascending order.': [2, 0.0]
'[c166] sort the elements in the list in ascending order.': [1, 0.0]
'[c166] sort the elements.': [1, 0.0]
'[c166] sort the list in ascending order.': [1, 0.0]
'[c166] sort the list.': [2, 0.0]
'[c167] create a list of all even numbers present in input list.': [1, 0.0]
'[c167] extract the smallest and largest elements in the list.': [1, 0.0]
'[c167] find the minimum and maximum from the even indices.': [1, 0.0]
'[c167] generate a list of even elements only.': [1, 0.0]
'[c167] generate a list of the minimum and maximum elements.': [1, 0.0]
'[c167] generate a list of the smallest and greatest elements.': [1, 0.0]
'[c167] print the elements at even indices and odd indices separately.': [1, 0.0]
'[c167] remove all elements at even indices, i.': [1, 0.0]
'[c167] remove elements that are divisible by 8.': [1, 0.0]
'[c167] remove every other element in the list, starting from the second element.': [1, 0.0]
'[c167] remove every third element.': [1, 0.0]
'[c167] remove in order even elements from the end.': [1, 0.0]
'[c167] remove the largest and smallest element.': [1, 0.0]
'[c167] remove the largest and smallest elements.': [1, 0.0]
'[c167] remove the odd values.': [1, 0.0]
'[c167] return even elements in the list.': [1, 0.0]
'[c168] convert each element to its ASCII number then generate a list of 1 to 10.': [1, 0.25]
? '[c168] convert the ASCII codes of the numbers to integers, sort the integers from the lowest to highest, and then convert the integers to their ASCII codes.'
: [1, 0.0]
'[c168] convert the given list of integers to the list of integers 1 to 10 in ascending order.': [1, 0.0]
'[c168] extract the unique elements within the array and form a new array in ascending order from 1 to 10.': [1, 0.0]
'[c168] generate a list 1 to 10 by extracting unique digits from a list of integers in the original list.': [1, 0.0]
'[c168] generate a list of 1 to 10 excluding the elements in the list.': [1, 0.0]
'[c168] generate a list of all the missing integers in range [1, 10] with respect to the given list.': [1, 0.0]
'[c168] generate a list of digits from 1 to 10.': [1, 0.0]
'[c168] generate a list of elements from 1 to 10.': [1, 0.0]
'[c168] generate a list of integers 1 to 10.': [1, 0.0]
'[c168] generate a list of numbers from 1 to 10 except the number present in the given list.': [1, 0.0]
'[c168] generate a list of numbers from 1 to 10, removing numbers divisible by 7.': [1, 0.0]
'[c168] generate a list of numbers from 1 to 10.': [1, 0.0]
'[c168] generate an array containing 1 to 10 except the numbers contained in the given array.': [1, 0.0]
'[c168] generate integers from 1 to 10 based on the input number.': [1, 0.0]
'[c168] get only the digits and remove the duplicates, then list the digits from 1 to 10.': [1, 0.0]
'[c168] list numbers in the range 1 to 10 (inclusive) based on the number of divisors of the element in the list.': [1, 0.0]
'[c168] list the missing numbers, in ascending order, from 1 to 10.': [1, 0.0]
'[c168] replace each element with ranking by the value in the list.': [1, 0.0]
'[c168] transform the list of zeros between two non-zero numbers to a list from 1 to 9.': [1, 0.125]
'[c169] find the greatest element.': [1, 0.0]
'[c169] find the maximum.': [1, 0.0]
'[c169] find the second largest number.': [1, 0.5]
'[c169] get the maximum element.': [1, 0.0]
'[c169] get the second maximum element.': [1, 0.0]
'[c169] identify and return the largest element.': [1, 0.0]
'[c169] identify the biggest element.': [1, 0.0]
'[c169] pick the largest number in the list.': [1, 0.0]
'[c169] print the maximum element.': [1, 0.0]
'[c169] remove all elements except the largest element.': [1, 0.0]
'[c169] remove all elements except the largest one.': [1, 0.0]
'[c169] remove all the elements except the largest one.': [1, 0.0]
'[c169] return the element appearing the most times.': [1, 0.25]
'[c169] return the largest element starting with digit 6.': [1, 0.25]
'[c169] return the largest element.': [1, 0.0]
'[c169] return the largest integer in the list.': [1, 0.0]
'[c169] return the maximum odd element from the list.': [1, 0.125]
'[c169] return the second largest element.': [2, 1.0]
'[c170] extract the first and last elements.': [1, 1.0]
'[c170] find the maximum and minimum elements from the given list and return the corresponding list of it.': [1, 0.0]
'[c170] find the minimum and maximum elements in the list.': [1, 0.0]
'[c170] find the smallest and largest elements and return them as a list.': [1, 0.0]
'[c170] find the smallest and largest elements.': [1, 0.125]
'[c170] generate a list of the first and last elements.': [1, 1.0]
'[c170] get the first and last elements.': [1, 1.0]
'[c170] keep the first and last elements and discard the others.': [1, 1.0]
'[c170] keep the first and the last elements of the list.': [1, 1.0]
'[c170] keep the first element and the last element.': [1, 1.0]
'[c170] output the first and the last elements.': [1, 1.0]
'[c170] remove all elements except first and last elements.': [1, 1.0]
'[c170] remove all elements except the first and last elements.': [1, 1.0]
'[c170] remove elements except 2 and 3.': [1, 0.0]
'[c170] return the first and last element in the list.': [1, 1.0]
'[c170] return the first and last element of the list.': [1, 1.0]
'[c170] return the first and last element.': [1, 1.0]
'[c170] return the first and last elements.': [1, 1.0]
'[c170] take the first and last elements.': [1, 1.0]
'[c171] create a list of cumulative sums.': [1, 1.0]
'[c171] create a running summation of the list.': [1, 1.0]
'[c171] double each element and add the next element to it.': [1, 0.875]
'[c171] find the cumulative sum from left to right and then add 1 to each element of the sum.': [1, 1.0]
'[c171] generate alternate cumulative sum of the list.': [1, 1.0]
'[c171] multiple adjacent equal numbers.': [1, 0.0]
'[c171] multiply each element of the list by its index and add 1 to the result.': [1, 0.0]
'[c171] multiply the current element by its index and then add the previous element.': [1, 1.0]
'[c171] multiply the elements sequentially, shifting one to the left at each step.': [1, 0.0]
'[c171] replace each element with the sum of itself and the following element.': [1, 1.0]
? '[c171] take every element in the list, and for the first element add it once, for the second element add it twice, and so on.'
: [1, 0.75]
'[c172] calculate the product of all elements.': [1, 0.875]
? '[c172] form a list with 1st element of the input list, then square of the 1st element, then square of the square and so on.'
: [1, 0.375]
? '[c172] generate a list with two elements, where the first element is a number, and the second element is the square of the number.'
: [1, 0.0]
'[c172] multiply adjacent elements, starting with the first and second elements.': [1, 0.75]
'[c172] multiply adjacent elements.': [1, 0.75]
'[c172] multiply each consecutive pair and append it.': [1, 0.75]
'[c172] multiply each element by 3 and then multiply by the product of the previous elements.': [1, 0.875]
'[c172] multiply the elements at corresponding positions.': [1, 0.625]
'[c172] multiply the elements at each index to get the corresponding output.': [1, 0.75]
'[c172] multiply the elements.': [1, 0.75]
? '[c172] multiply the first two elements, then multiply the result by the third element and so on, for each pair of elements.'
: [1, 0.75]
'[c172] perform factorial on three pairs of elements.': [1, 0.5]
'[c172] return a list with the following element being the product of the previous two adjacent elements.': [1, 0.5]
'[c172] show each number in the input list in the format [value, value, value ** 2].': [1, 0.5]
'[c172] square all the elements of the list starting from the right to left.': [1, 0.375]
'[c172] square each element and then multiply all the elements in the list.': [1, 0.25]
'[c173] append the largest element to the list 4 times.': [1, 0.0]
'[c173] append the third element to the end of the list.': [1, 0.0]
'[c173] copy the maximum element the number of times equal to the value of the first element.': [1, 0.0]
'[c173] copy the maximum value in the list to each index.': [1, 0.0]
'[c173] duplicate each element.': [1, 0.0]
'[c173] repeat all elements except the last one.': [1, 0.0]
'[c173] repeat the first element till the length is 6.': [1, 0.0]
'[c173] repeat the first element to the end of the array.': [1, 0.0]
'[c173] repeat the fourth element in the list, depending on the size of the list.': [1, 0.0]
'[c173] repeat the last element throughout the list.': [1, 0.0]
'[c173] repeat the third element in the list n times, where n equals the first element.': [1, 0.0]
'[c173] replace all elements by the maximum element.': [1, 0.0]
'[c173] replace all elements except the first with the first element.': [1, 0.0]
'[c173] replace all elements with the last element.': [2, 0.0]
'[c173] replace all numbers except the maximum number with the maximum number.': [1, 0.0]
'[c174] remove all the duplicate elements.': [1, 0.375]
'[c174] remove all the duplicates from the list.': [1, 0.375]
'[c174] remove any consecutive duplicates from the list.': [1, 0.0]
'[c174] remove any duplicate elements.': [1, 0.375]
'[c174] remove duplicate elements.': [4, 1.5]
'[c174] remove duplicates from a list.': [1, 0.375]
'[c174] remove duplicates in the list.': [1, 0.375]
'[c174] remove duplicates.': [2, 0.75]
'[c174] remove the duplicate elements.': [3, 1.125]
'[c174] remove the duplicates.': [3, 1.125]
'[c174] remove the repeated elements.': [1, 0.375]
'[c174] removed duplicate elements from the list.': [1, 0.375]
'[c175] filter out the numbers that are not divisible by 4.': [1, 0.0]
'[c175] generate a list by using only the even elements.': [1, 0.0]
'[c175] generate a list of all even elements.': [1, 0.0]
'[c175] generate a list of even elements.': [1, 0.0]
'[c175] keep elements appearing only once.': [1, 0.0]
'[c175] keep only every third element.': [1, 0.0]
'[c175] list all even numbers in the list.': [1, 0.0]
'[c175] list the even numbers present in the list.': [1, 0.0]
'[c175] maintain only the values greater than 20.': [1, 0.0]
'[c175] output the list with repeats removed.': [1, 0.0]
'[c175] remove all elements from the input list that occurs more than once.': [1, 0.0]
'[c175] remove all elements that are not divisible by 7.': [1, 0.0]
'[c175] remove all elements, except the numbers that are divisible by 10.': [1, 0.125]
'[c175] remove all odd numbers.': [1, 0.0]
'[c175] remove elements that are not multiples of 10.': [1, 0.0]
'[c175] remove elements that are not multiples of 7.': [1, 0.375]
'[c175] remove the elements divisible by 5.': [1, 0.0]
'[c175] retain only those elements which are divisible exactly by 2.': [1, 0.0]
'[c175] return the first half of the list.': [1, 0.125]
'[c175] sort the list in ascending order and remove duplicates.': [1, 0.0]
'[c176] add 6 to each element and find the square, excluding odds.': [1, 0.0]
'[c176] add 6 to each element and print it.': [1, 0.0]
'[c176] add 6 to each element.': [3, 0.0]
'[c176] add 6 to even numbers and add 8 to odd numbers.': [1, 0.0]
'[c176] add 6 to every even number, and add 7 to every odd number.': [1, 0.0]
'[c176] add 7 to every element.': [1, 0.0]
'[c176] add 8 to each element and then divide by 2 and round to the nearest even integer.': [1, 0.0]
'[c176] add 8 to each element.': [2, 0.0]
'[c176] duplicate every element in the list and add 6 to it.': [1, 0.0]
'[c176] iterate through the list and add 2 to every number.': [1, 0.0]
'[c176] multiply each element by 2.': [1, 0.0]
'[c176] multiply every element by 2.': [1, 0.0]
'[c176] return a list of the input list multiplied by 2 and incremented by 6.': [1, 0.0]
'[c176] sum the corresponding elements and add 6 from each pair.': [1, 0.0]
'[c177] append the first element of the list to the end.': [1, 0.0]
'[c177] duplicate each element in the list.': [1, 0.0]
'[c177] generate a list that repeats each element twice.': [1, 0.375]
'[c177] generate a list with the first element repeated twice, followed by the second element repeated twice, and so on.': [1, 0.0]
'[c177] repeat each element twice.': [1, 0.0]
'[c177] repeat half of the list twice.': [1, 0.375]
'[c177] repeat the elements once.': [1, 0.25]
'[c177] take the first 2 elements, swap the place, then take the next 2 elements, swap the place and so on.': [1, 0.0]
'[c178] delete all elements between the first element and the last element.': [1, 0.0]
'[c178] filter out to the lowest and highest numbers.': [1, 0.0]
'[c178] generate a list with 1, then elements > 50 and <= 80, and then element 3.': [1, 0.0]
'[c178] keep elements that are divisible by 4.': [1, 0.125]
'[c178] keep only the multiples of 11 in the list.': [1, 0.0]
'[c178] list all even elements in the list.': [1, 0.125]
'[c178] list the integers from the list that are divisible by 3.': [1, 0.125]
'[c178] remove a number at the odd index position.': [1, 0.0]
'[c178] remove all elements at even indices (0-based).': [1, 0.0]
'[c178] remove all elements except the even numbers.': [1, 0.125]
'[c178] remove all elements that are divisible by 3.': [1, 0.0]
'[c178] remove all even elements.': [1, 0.0]
'[c178] remove all odds and zeros from the list.': [1, 0.0]
'[c178] remove the elements at even indices in the list.': [1, 0.0]
'[c178] retain only the elements that are divisible by 3.': [1, 0.0]
? '[c178] return the list of elements greater than a threshold value (7) and the resulting list contains only unique elements.'
: [1, 0.0]
'[c179] arrange the array so that adjacent elements are in the opposite order.': [1, 0.0]
'[c179] give even elements first, then odds.': [1, 0.0]
'[c179] make the list increasing by swapping two adjacent elements if the first element is greater than the second.': [1, 0.0]
'[c179] move the first 2 elements to the last.': [1, 0.0]
'[c179] rearrange the elements in even, odd order.': [1, 0.0]
'[c179] rearrange the elements starting with the second smallest, then the largest element, etc.': [1, 0.0]
'[c180] arrange the numbers in the following order: the 2 maximum elements, followed by the 2 minimum elements, and so on.': [1, 0.0]
'[c180] arrange the numbers in the list in an alternating descending and ascending order.': [1, 0.0]
'[c180] first sort the elements and then reverse the order.': [1, 0.0]
'[c180] reverse alternate pairs of the elements.': [1, 0.0]
'[c180] reverse the elements in the list and then sort the list in ascending order.': [1, 0.0]
'[c180] sort the elements first in descending order, and then sort them again in ascending order.': [1, 0.0]
'[c180] sort the list, split the list into two, and reverse the order of the second part.': [1, 0.0]
'[c180] take the first half of the list and append it to the second half.': [1, 0.0]
'[c181] alternate between the first and last elements.': [1, 0.0]
'[c181] move the first element to the second last position.': [1, 0.0]
'[c181] move the last two elements to the front.': [1, 0.0]
'[c181] move the minimum value to the second position.': [1, 0.0]
'[c181] place the first element at the third position.': [1, 0.0]
'[c181] place the last element at the beginning.': [1, 0.0]
'[c181] place the last element at the second position.': [1, 0.125]
'[c181] shift the original list to the right by 1 position.': [1, 0.0]
'[c181] swap the first and second elements.': [1, 0.0]
'[c181] take the last element and place it at the 2nd position in the list.': [1, 0.125]
'[c182] extract odd numbers.': [1, 0.0]
'[c182] extract the digits that are a multiple of 3.': [1, 0.0]
'[c182] extract the elements at odd index.': [1, 0.0]
'[c182] extract the elements that are multiples of 3.': [1, 0.0]
'[c182] extract the middle element from the sorted list.': [1, 0.0]
'[c182] find the second largest, fourth largest and sixth largest elements.': [1, 0.125]
'[c182] generate a list of every 3rd element.': [1, 0.25]
'[c182] generate a list of every third element.': [1, 0.0]
'[c182] generate a list of the second smallest, third smallest, and largest elements.': [1, 0.0]
'[c182] generate a list with elements that appear twice.': [1, 0.0]
'[c182] list elements at all odd indices from the original list.': [1, 0.125]
'[c182] remove duplicate consecutive elements.': [1, 0.0]
'[c182] remove duplicate elements which are not present in the first half of the list.': [1, 0.0]
'[c182] replace the first, middle, and last elements with the sum of their digits.': [1, 0.0]
'[c182] return every third element.': [1, 0.0]
'[c183] count the distinct elements and then the number of each distinct element.': [1, 0.0]
'[c183] count the distinct numbers and print out the distinct numbers.': [1, 0.0]
'[c183] count the distinct numbers and the number of times they repeat.': [1, 0.0]
? '[c183] count the frequency of each element in the input and return a list of elements in the order of their frequency counts.'
: [1, 0.0]
? '[c183] count the frequency of each element in the list and generate a list with the count as the element and the element-count pair.'
: [1, 0.0]
'[c183] count the number of distinct elements, then count the number of each distinct element.': [1, 0.0]
'[c183] count the number of unique elements and the number of times each element appears.': [1, 0.0]
'[c183] count the number of unique values in the list.': [1, 0.0]
'[c183] count the unique elements and list them in ascending order.': [1, 0.0]
'[c183] count the unique elements and sort the values.': [1, 0.125]
'[c183] count the unique elements and sort them.': [1, 0.0]
'[c183] count the unique elements and then count the frequency of each element.': [1, 0.0]
? '[c183] count the unique elements and then return a list of integers, with the 1st element being the count of unique elements and the rest the unique elements in ascending order.'
: [1, 0.0]
'[c183] count the unique elements in the list and return a list of their frequencies.': [1, 0.0]
'[c183] count unique numbers and print out the unique count and the frequency of these numbers.': [1, 0.0]
'[c183] count unique occurrences.': [1, 0.125]
'[c183] find out distinct values and count of the minimum number of occurrences of the count.': [1, 0.0]
'[c183] find the number of unique elements and then return the number of times the highest occurred.': [1, 0.0]
'[c183] take an array, count unique numbers and append that many consecutive numbers starting from 1 to the array.': [1, 0.0]
'[c184] create a list of odd numbers from the given list of numbers.': [1, 0.25]
'[c184] exclude any number that is not a prime number.': [1, 0.0]
'[c184] extract elements that are odd.': [1, 0.0]
'[c184] filter even numbers.': [1, 0.0]
'[c184] find the elements that are multiples of 3 and 7.': [1, 0.0]
'[c184] find the strictly increasing numbers.': [1, 0.0]
'[c184] form a list of elements that are not divisible by 3.': [1, 0.0]
'[c184] generate a list of elements greater than the greater element of the original list.': [1, 0.125]
'[c184] generate a list of elements that are greater than the previous element.': [1, 0.0]
'[c184] generate a list of odd numbers.': [2, 0.0]
'[c184] list every odd-index element.': [1, 0.0]
'[c184] only keep the second highest value and the second lowest value.': [1, 0.0]
'[c184] remove all even elements.': [1, 0.0]
'[c184] remove odd numbers.': [1, 0.0]
'[c184] return a list of the first and last even elements.': [1, 0.0]
'[c184] return all elements that have an index which is equal to the value of the element.': [1, 0.0]
'[c184] return elements which are either greater than 36 or odd.': [1, 0.0]
'[c184] return only the odd elements.': [1, 0.125]
'[c185] add the numbers at the first and last positions of the array.': [1, 0.0]
'[c185] calculate the multiplication of all the elements after the first 0 element.': [1, 0.0]
'[c185] create a new list where each element is the sum of the current element and previous element.': [1, 0.0]
'[c185] find the largest element, add it to the smallest element, and then add them to the total.': [1, 0.0]
? '[c185] generate a list of numbers by multiplying a random number in the list times the sum of a random portion of elements.'
: [1, 0.0]
? '[c185] generate a list of the first element in the list, the sum of all elements until a double-digit number is reached, and the last element in the list.'
: [1, 0.0]
'[c185] generate a list of the first element, the sum of all the components, and the last element.': [1, 0.0]
'[c185] generate the highest digit of the product of the list elements.': [1, 0.0]
'[c185] keep only the first, last, and the largest elements and sort them.': [1, 0.0]
'[c185] keep the highest, the sum of all other numbers and the lowest number in that order.': [1, 0.0]
'[c185] multiply every element in the list, except the last one, by 2.': [1, 0.0]
'[c185] output the first, last and the sum of all elements.': [1, 0.0]
'[c185] print the first element, double the second, then print the last element.': [1, 0.0]
'[c185] remove all even numbers from the list and multiply the remaining odd numbers.': [1, 0.0]
'[c185] take the 1st, last, and middle elements of the list, and multiply them.': [1, 0.0]
'[c186] copy the first element into the last element.': [1, 0.0]
'[c186] delete all the even elements and then reverse the array.': [1, 0.0]
'[c186] extract and sort the array to contain only the odd integers present and eliminate any elements equal to 0.': [1, 0.0]
'[c186] find and list all elements that appear twice.': [1, 0.0]
'[c186] generate a list of numbers in decreasing order that appears at least twice.': [1, 0.0]
'[c186] generate a list of prime numbers found in the input.': [1, 0.0]
'[c186] generate a list of unique elements in descending order.': [1, 0.0]
'[c186] get the elements that appear more than once.': [1, 0.0]
'[c186] list all the numbers in the array that appear twice or more.': [1, 0.0]
'[c186] list each element that appears only once.': [1, 0.0]
'[c186] list elements that appear more than twice.': [1, 0.0]
'[c186] list the numbers that appear once.': [1, 0.125]
'[c186] replace all the minimum elements with the maximum element.': [1, 0.0]
'[c187] add 0 in the 3rd index of the list.': [1, 0.5]
'[c187] add a 0 between each element and add a 0 in front.': [1, 0.375]
'[c187] append 0 and duplicate the list.': [1, 1.0]
'[c187] append 0 and repeat the list.': [1, 1.0]
'[c187] append 0 and the full list to itself.': [1, 1.0]
'[c187] append 0 and the list itself.': [1, 1.0]
'[c187] append 0 followed by the entire array.': [1, 1.0]
'[c187] append 0 to the end of the list and append the original list to the end of the new list.': [1, 1.0]
'[c187] append 0 to the end of the list then duplicate the list.': [1, 1.0]
'[c187] append 0 to the list, then append the original list again.': [1, 1.0]
'[c187] append 0, then append the elements to the list again.': [1, 1.0]
'[c187] append a 0 after each element and concatenate the modified list at the end.': [1, 1.0]
'[c187] append a 0 and duplicate the original list as many times as the first element of the list.': [1, 1.0]
'[c187] append a 0 between any two elements, and then repeat the list.': [1, 0.375]
'[c187] append a 0 to the list and append the original list.': [1, 1.0]
'[c187] append a 0 to the list, and copy this list one more time to the end of the list.': [1, 1.0]
'[c187] append a zero to the list, then append the original list to the end of the new list.': [1, 1.0]
'[c187] duplicate the list.': [1, 1.0]
'[c187] insert 0 between each number of the list and duplicate the whole list.': [1, 0.375]
'[c187] insert a 0 into the end of the list, then double the list.': [1, 1.0]
'[c188] check for the numbers that are divisible by 10, and replace divisible numbers with 1 and other numbers with 0.': [1, 0.125]
'[c188] check if each element is divisible by 7.': [1, 0.125]
'[c188] compute the binary representation of the sum of the elements of the list.': [1, 0.0]
'[c188] convert each element to 0 if odd and 1 if even.': [1, 0.125]
'[c188] convert numbers to 0s and 1s by checking if the number is divisible by 3 or 5.': [1, 0.25]
'[c188] convert the elements into binary digits (0 if odd, 1 if even).': [1, 0.125]
'[c188] generate a list of 0s and 1s, where 1 represents a prime number in the input.': [1, 0.125]
'[c188] generate a list of 1s and 0s where a 1 is placed if the number is divisible by 10 and 0 otherwise.': [1, 0.0]
'[c188] generate a list of zeros and ones based on even and odds of elements in the input list.': [1, 0.375]
'[c188] map numbers divisible by 10 to 1, and the rest to 0.': [1, 0.125]
? '[c188] output a list of 0s and 1s, such that 0 is added if the corresponding element in the list is even, and 1 is added if the element is odd.'
: [1, 0.125]
'[c188] replace all even numbers with 0 and all odd numbers with 1.': [1, 0.125]
'[c188] replace each element with 0 if the element is even, else 1 if odd.': [1, 0.0]
'[c188] replace each element with 1 if the element in the list is greater than the next element, and 0 otherwise.': [1, 0.125]
? '[c188] represent each element according to this logic: if element is greater than 50, then replace it by 1 else replace it by 0.'
: [1, 0.125]
'[c188] return a binary list where a 0 represents an even number and a 1 represents an odd number.': [1, 0.0]
'[c189] create a list from a given list, starting with the smallest list element.': [1, 0.375]
'[c189] create a list of elements between the smallest element and the largest element.': [1, 1.0]
? '[c189] generate a list by starting with the element, then incrementing by one until the element in the list is equal to the next element in the original list.'
: [1, 0.75]
'[c189] generate a list of consecutive increasing numbers.': [1, 0.5]
'[c189] generate a list of elements between the minimum and maximum elements.': [1, 1.0]
'[c189] generate a list of elements in ascending order of numbers.': [1, 0.125]
'[c189] generate a list of numbers ascending from the smallest number among the values to the largest number exclusive.': [1, 0.625]
'[c189] generate a new list of elements between the minimum and maximum elements with a 1 interval increment.': [1, 1.0]
'[c189] generate a range from the smallest element to the largest element.': [1, 0.25]
'[c189] generate a sequence of consecutive numbers ascending and beginning with the smallest number from the list.': [1, 0.5]
'[c189] generate the sequence of natural numbers from the minimum number to the maximum number inclusively.': [1, 0.75]
'[c189] increment the elements of the given list by 1, but the newly added elements must not be greater than 100.': [1, 0.0]
'[c189] increment the number by 1 if they appear more than once.': [1, 0.125]
? '[c189] replace all the elements with the elements between x (the maximum element) and y (the minimum element), incremented by 1.'
: [1, 0.625]
'[c189] replace each element with the element plus 1, alternate between two elements, then skip an element.': [1, 0.0]
'[c189] replace every element with the average following element.': [1, 0.0]
'[c189] start with `[0]` and generate elements according to the pattern `[0, 1, 2, 3, 4, .': [1, 0.25]
'[c189] start with the first element and increment all the elements one after the other.': [1, 0.0]
? '[c189] start with the first element and increment by 1 after every element and stop once we observe a different element, then we repeat.'
: [1, 0.0]
'[c190] exclude all elements divisible by 3.': [1, 0.0]
'[c190] find consecutive odd numbers starting from a given number.': [1, 0.25]
'[c190] generate a list of even numbers between the first and last element.': [1, 0.875]
'[c190] generate a list of even numbers between the minimum and maximum elements of the list.': [1, 0.625]
'[c190] generate a list of even numbers upto that number.': [1, 0.875]
'[c190] generate a list of even numbers with the same range as the given list.': [1, 0.5]
'[c190] get the even numbers.': [1, 0.0]
'[c190] list even numbers between the elements.': [1, 0.25]
'[c190] list the even number and then the odd elements within the given list.': [1, 0.0]
'[c190] remove all consecutive duplicates and then double a number at the second appearance.': [1, 0.0]
'[c190] remove all duplicate elements except the first one.': [1, 0.0]
'[c190] remove duplicate elements and then multiply by 2 all remaining elements.': [1, 0.0]
'[c190] remove duplicates, increment each element by 1 and check for divisibility by 2.': [1, 0.25]
'[c190] return every even integer until the last element.': [1, 0.0]
'[c190] return only even elements in the list, if no even elements are present in the list return an empty list([]).': [1, 0.0]
'[c190] return the even numbers up to the maximum even number in the list.': [1, 0.375]
'[c190] take the even number in the list.': [1, 0.0]
'[c191] duplicate each element except the first one.': [1, 0.0]
'[c191] duplicate each element in the array, then append the maximum element to the end of the list.': [1, 0.0]
'[c191] duplicate the elements except for the last element.': [1, 0.0]
'[c191] duplicate the second element thrice, then duplicate the fourth element thrice, and so on.': [1, 0.0]
'[c191] generate a list of the first element, the last element and everything in between.': [1, 0.0]
? '[c191] generate a new list where each element appears the same number of times as its value, except for the last element which appears once.'
: [1, 0.0]
'[c191] multiply the first element with the rest of the array.': [1, 0.0]
'[c191] repeat all elements except the first element three times.': [1, 0.0]
'[c191] repeat each element three times except the last element which is repeated twice.': [1, 0.0]
'[c191] repeat each non-zero elements 3 times and append all zeros to it.': [1, 0.0]
'[c191] repeat every element three times and append the last element to this list.': [1, 0.0]
'[c191] repeat the non-zero elements, 3 times for each non-zero.': [1, 0.0]
'[c191] repeat the second element around all the elements.': [1, 0.0]
? '[c191] repeat the second element as many times as the first element, and the third element as many times as the second element, and so on.'
: [1, 0.0]
'[c191] repeat the second element in the list and append the remaining elements.': [1, 0.125]
'[c191] replace each element with the next element and append the last element.': [1, 0.125]
'[c191] triple the elements.': [1, 0.0]
'[c192] convert each digit to standalone values.': [1, 0.875]
'[c192] convert the elements to the first digit.': [1, 0.875]
'[c192] convert the list of two-digit numbers to a list of single digits, for which we take the last digit of each element.': [1, 0.0]
'[c192] extract the individual digits from each number.': [1, 0.375]
'[c192] get the digits of the element.': [1, 0.875]
'[c192] get the first digit of each number.': [1, 1.0]
'[c192] get the individual digits of the numbers in the list.': [1, 0.625]
'[c192] get the sum of digits.': [1, 0.75]
'[c192] remove the last digit from each element and subtract them from 10.': [1, 0.75]
'[c192] replace each number with the sum of their digits.': [1, 0.125]
'[c192] return the digits of the number.': [1, 0.875]
'[c192] sum the digits in a number.': [1, 0.625]
'[c192] take a list of integers and turn them into a list of digits.': [1, 0.5]
'[c192] take digits from each element and append them to a new list.': [1, 0.375]
'[c192] take the digits of each number and list them.': [1, 0.0]
'[c193] arrange the elements in ascending order, then take only even elements.': [1, 0.0]
'[c193] filter even numbers.': [1, 0.0]
'[c193] filter out the elements that occur more than once.': [1, 0.0]
'[c193] generate a list of the even elements.': [1, 0.0]
'[c193] keep all elements greater than 5, in ascending order.': [1, 0.0]
'[c193] remove all elements that are greater than 9.': [1, 0.0]
'[c193] remove all elements that are repeated and keep the first one occurred.': [1, 0.0]
'[c193] remove duplicates from the list and sort the list in ascending order.': [1, 0.0]
'[c193] remove elements at even indices.': [1, 0.0]
'[c193] remove the elements at even positions.': [1, 0.0]
'[c193] sort the elements in ascending order, then eliminate the duplicates.': [1, 0.0]
'[c193] take the numbers which are power of 10 and remove the rest.': [1, 0.0]
'[c194] add 1 to each element and then concatenate each element equal to 10 as 1+0.': [1, 0.0]
? '[c194] add 2 to first element and 1 to every other element after, check if this is divisible by 3, if it is, subtract 3 and divide by 2 else add 3 and multiply by 3.'
: [1, 0.0]
'[c194] add 8 to every number; if the sum is greater or equal to 10, subtract 10.': [1, 0.0]
'[c194] append 2, the same value as the first element.': [1, 0.0]
'[c194] concatenate 5 with the original number and the number with 5 concatenated.': [1, 0.0]
'[c194] create a list with each element replaced by the average of the element and the previous element.': [1, 0.0]
'[c194] create a new list by replacing every even numbers with it''s half and every odd number with double + 1.': [1, 0.0]
? '[c194] divide the list in half (taking floors), and to generate a list that alternates elements from both halves, starting from the first half.'
: [1, 0.0]
'[c194] first reverse the list, then for each index, add the index value to the list element.': [1, 0.0]
'[c194] generate pairs: alternate grouped sums of odd numbers and consecutive even numbers, starting with odd.': [1, 0.0]
'[c194] generate the new list as [a, b], [b, c], [c, d], .': [1, 0.25]
? '[c194] generate zig-zag patterns: odd indices contain the difference between adjacent elements, while even indices are the original elements.'
: [1, 0.0]
'[c194] insert 10 between every two digits of the list and insert 2 at the end of the list.': [1, 0.0]
'[c194] insert 5 in the middle, 2 at the start, and 10 at the end.': [1, 0.0]
'[c194] make a new list with every odd number + 1 followed by every even number + 2.': [1, 0.0]
? '[c194] squares of numbers starting from 2 up to half of the length of the list and then squares of numbers starting from the half of the length+1 of the list to the last value.'
: [1, 0.125]
'[c195] add 19 and subtract 3 from each element.': [1, 0.625]
'[c195] add 22 to each element, multiply by 3, and subtract 35.': [1, 0.0]
'[c195] add 22, 66, 40 and 97 at even positions and add 23, 68, 42 and 99 at odd positions.': [1, 0.5]
? '[c195] add 23 after the first element, 68 after the second element, 42 after the third element, 99 after the fourth element, and 71 after the fifth element.'
: [1, 0.0]
'[c195] alternate the elements 23, 68, 42, 99, 71 in between the other elements.': [1, 0.0]
'[c195] append the string "23", "68", "42", "99", "71" at every first, third, fifth, .': [1, 0.0]
? '[c195] convert each element to the ASCII value of its character +23 then append 68, 42, 99, then convert each element''s character again to its ASCII value +71.'
: [1, 0.875]
'[c195] generate a list of elements 23, 68, 42, 99, 71 and then the elements in the input list.': [1, 0.0]
'[c195] generate a list of elements 23, 68, 42, 99, 71, then the remaining elements.': [1, 0.0]
'[c195] insert 23 after 3, 68 after 7, 42 after 8, 99 after 9, 71 after 0, and 84 after 1.': [1, 0.0]
'[c195] insert 23, 68, 42, 99, and 71 after every 5th index.': [1, 0.0]
'[c195] insert 23, 68, 42, 99, and 71 into the list, and sort the list in ascending order.': [1, 0.0]
'[c195] insert 23, 68, 42, 99, and 71 into the list.': [1, 0.0]
'[c195] insert [23, 68, 42, 99, 71] after the second element.': [1, 0.0]
'[c195] insert a pattern [23, 68, 42, 99, 71] into the original list at even positions.': [1, 0.0]
'[c195] insert between each element the element 23, 68, 42, 99, 71.': [1, 0.0]
'[c195] replace each element with the sum of its original value and the value of 23.': [1, 0.0]
'[c196] append 17, 38, 82 in that order to the end of the list.': [1, 1.0]
'[c196] append elements 17, 38, 82, 1, 55, 27, in that order, in front of the input list.': [1, 1.0]
'[c196] calculate the series 17, 38, 82, .': [1, 1.0]
'[c196] calculate the sum of all prime factors of numbers in the list.': [1, 0.75]
? '[c196] calculate the sum of the elements of the list, multiply it by 82, append 17 and 38, followed by the original list, which is then appended with 1, 55 and 27.'
: [1, 1.0]
'[c196] first insert 17, 38, 82, then repeat the original list, followed by 1, 55, 27.': [1, 1.0]
'[c196] generate a list of 17, 38, 82, the input list, 1, 55, 27.': [1, 1.0]
'[c196] generate a list of elements 17, 38, 82, then the list of the input elements, followed by 1, 55, 27.': [1, 1.0]
'[c196] generate a list of numbers: 17, 38, 82, then the input, then 1, 55, 27.': [1, 1.0]
? '[c196] generate a list of odd elements [17, 38, 82], then repeat the input, and finally generate a list of odd elements [1, 55, 27].'
: [1, 1.0]
? '[c196] generate a list of the squares of the first four prime numbers(17, 38, 82, 1), then the elements, then the squares of the next three primes (55, 27, 1).'
: [1, 0.0]
'[c196] insert 1, 55, 27 in the list at index 2, 5, 8 respectively.': [1, 0.75]
'[c196] insert [17, 38, 82, 1, 55, 27] during the middle of the list.': [1, 1.0]
'[c196] insert [17, 38, 82] at the beginning and insert [1, 55, 27] at the end.': [1, 1.0]
'[c196] prepend [17, 38, 82] to the list, append [1, 55, 27] to the list, and then insert 82 between 38 and 82.': [1, 0.625]
'[c196] return a list consiting of a random set of numbers [17, 38, 82].': [1, 0.0]
'[c197] convert the number n to the base 10 digits of the ordinal representation of the number.': [1, 0.125]
'[c197] divide each element by 10 and subtract 1 to the result.': [1, 0.125]
'[c197] divide each element by 10, adjust the numbers to be in [1, 5], and ensure it is rounded.': [1, 0.125]
'[c197] get the unit digit of each element of the list and create a new list of the unit digits.': [1, 0.125]
'[c197] make an equal array.': [1, 0.25]
? '[c197] replace 59, 49, 89, 58, 37, 91, 3, 23, 0, 26, 43, 66, 77, 11, 53, 65, 12, 54 with 8, 1, 5, 2, 3, 5, 1, 2, 4, 2, 1, 1, 4, 1, 3, 3, 1, 2 respectively.'
: [1, 0.125]
'[c197] replace a number with its rank in the list.': [1, 0.5]
'[c197] replace all elements with a number between 1 and 8 based on the number of 9s.': [1, 0.125]
? '[c197] replace all occurrences of the max value with 8, all occurrences of the min value with 1, all occurrences of the middle value with 4, and the rest with 5.'
: [1, 0.125]
'[c197] replace each element with its digits sum.': [1, 0.125]
'[c197] replace each element with the number of times it appeared before.': [1, 0.125]
'[c197] replace each element with the number of times it appears.': [1, 0.375]
? '[c197] replace the elements with 8 if it is 59, 1 if it is 49, 5 if it is 89, 2 if it is 58, and so on, according to the ASCII value of the character.'
: [1, 0.125]
'[c197] subtract 21 and then divide by 7.': [1, 0.125]
'[c197] subtract 50 from each element and then divide the result by 10.': [1, 0.125]
'[c197] take each number, divide it by 10, and then output the result.': [1, 0.125]
'[c198] resort elements in descending order.': [1, 0.75]
? '[c198] reverse the elements and arrange all the even elements of the list in descending order and the odd elements in ascending order followed by even.'
: [1, 0.125]
'[c198] reverse the elements and sort them in decreasing order.': [1, 0.75]
'[c198] reverse the elements and sort them in descending order.': [1, 0.75]
'[c198] reverse the elements of the list and connect the first half with the second half.': [1, 0.0]
'[c198] reverse the elements, then sort the reversed list in descending order.': [1, 0.625]
'[c198] reverse the list and then sort its elements in descending order.': [1, 0.625]
'[c198] sort in descending order.': [1, 0.75]
'[c198] sort the elements in decreasing order.': [1, 0.75]
'[c198] sort the elements in descending order.': [3, 2.25]
'[c198] sort the list in descending order.': [5, 3.625]
'[c199] add 1 to each element, then alternate adding 1 to its position (starting from 1).': [1, 0.0]
'[c199] add 1 to the element and the position and combine them together.': [1, 0.125]
'[c199] alternate 1-based indexes (1, 2, 3, 4, .': [1, 0.125]
'[c199] alternately append 1 and the element of the list.': [1, 0.125]
'[c199] append 1 before each value in the list.': [1, 0.0]
'[c199] generate a list by repeatedly alternating adding 1 at the beginning and adding the actual number to the end.': [1, 0.125]
'[c199] pair each element with its index.': [1, 0.125]
'[c199] sort the list and then insert the index of each element in front of it.': [1, 0.875]
'[c199] take the sum of the digits of each element in the array.': [1, 0.0]
'[c200] convert a two digit number to a list of single digit numbers.': [1, 0.0]
'[c200] convert each digit to its english word.': [1, 0.0]
'[c200] convert each number to a digit list, then return the concatenation.': [1, 0.0]
'[c200] convert the elements of the array to a digit array.': [1, 0.0]
'[c200] extract the digits from each element in the list and put them in an output list.': [1, 0.0]
'[c200] extract the digits of a list, removing any duplicates.': [1, 0.0]
'[c200] find the digits of the numbers.': [1, 0.0]
'[c200] generate a list of digits of the input list.': [1, 0.125]
'[c200] get the digits of the number as an array of integers.': [1, 0.0]
'[c200] list unique digits in ascending order.': [1, 0.0]
'[c200] repeatedly sum the digits in an integer until it becomes a single digit.': [1, 0.0]
'[c200] return the digits in the number.': [1, 0.125]
'[c200] return the digits.': [1, 0.0]
'[c201] arrange even numbers in descending order and odd numbers in ascending order.': [1, 0.0]
'[c201] arrange in descending order.': [1, 0.0]
'[c201] arrange the list in descending order and switch between the first half and the second half.': [1, 0.25]
'[c201] generate a list by taking every 2nd element and then taking every other element from the remaining list.': [1, 0.375]
'[c201] remove elements in even positions of the list.': [1, 0.0]
'[c201] reverse the elements and sort the list by reversing the numbers.': [1, 0.0]
'[c201] reverse the elements and then sort them.': [1, 0.0]
'[c201] reverse the even elements in the list.': [1, 0.0]
'[c201] shift all elements to the right by two.': [1, 0.0]
'[c201] sort in descending order.': [1, 0.0]
'[c201] sort the elements in descending order.': [2, 0.0]
'[c201] sort the elements in the reverse order.': [1, 0.0]
'[c201] sort the list by placing even numbers before odd numbers.': [1, 0.0]
'[c201] sort the list in descending order.': [1, 0.0]
? '[c202] create a list of consecutive numbers starting from 1 and maximum value being the number of even numbers in index positions.'
: [1, 0.25]
'[c202] divide each element by 4 and truncate the result.': [1, 0.0]
'[c202] divide each element by 4, round down and then subtract 1.': [1, 0.0]
'[c202] find the number of digits in the list of integers.': [1, 0.0]
'[c202] find the number of distinct digits in the list.': [1, 0.0]
'[c202] find the number of even numbers in the list.': [1, 0.0]
'[c202] find the number of unique digits in the list.': [1, 0.0]
'[c202] get the number of unique digits in the list.': [1, 0.0]
'[c202] get the unique digits.': [1, 0.0]
'[c202] list the number of times each digit appears.': [1, 0.25]
'[c202] list the order of elements divided by 10.': [1, 0.0]
'[c202] output the sequence number of each element divided by 20.': [1, 0.0]
? '[c202] replace every even element with 1, every multiple of 3 with 2, every multiple of 5 with 3, every multiple of 7 with 4, every multiple of 11 with 5, and all others with 6.'
: [1, 0.0]
'[c202] replace every even number with its quotient divided by 2.': [1, 0.0]
? '[c202] return a list of distinct numbers in the first n Fibonacci numbers, where n is the unique number in the given array.'
: [1, 0.125]
'[c202] return the index of the minimum number in the list.': [1, 0.0]
'[c202] return the number of elements that are less than 10.': [1, 0.0]
'[c203] add 12 and 3 to the first and second elements respectively.': [1, 0.125]
'[c203] add 13 to each element except the first.': [1, 0.125]
'[c203] add 13 to each element in the list.': [1, 0.0]
'[c203] add 13 to each element.': [1, 0.0]
'[c203] add 13 to each number of the list.': [1, 0.0]
'[c203] add all digits.': [1, 0.0]
'[c203] add the digits of the number in the list.': [1, 0.0]
'[c203] add the elements in the list one by one, in the order they appear.': [1, 0.125]
'[c203] apply the following operations - add 1 if number is odd, subtract 2 if number is even and divide by 3 if 3 occurs.': [1, 0.125]
'[c203] first sort the list and then increment each element in the list by one.': [1, 0.0]
'[c203] generate a series of numbers starting from the smallest integer in the list.': [1, 0.125]
'[c203] increase each element by 13 if the element is even, and increase by 14 if the element is odd.': [1, 0.125]
'[c203] increment each element by 13.': [2, 0.25]
'[c203] increment the elements except for 37.': [1, 0.0]
'[c203] increment the last element by 1.': [1, 0.125]
'[c203] sort the elements of a list in ascending order.': [1, 0.125]
'[c203] sort the input list in ascending order.': [1, 0.125]
'[c203] sort the list.': [1, 0.125]
'[c204] eliminate all 0s, and if there are any duplicates, keep only one.': [1, 0.125]
'[c204] eliminate duplicates but place them in a list if found in the input array.': [1, 0.125]
'[c204] find the first non-zero element in the list, and then find the first zero after that element.': [1, 0.25]
'[c204] find the smallest number and its next smallest number from the list.': [1, 0.125]
'[c204] list elements that appear more than once.': [1, 0.125]
'[c204] list the first element in the list and then the number of zeros in the list.': [1, 0.0]
'[c204] pair the zeros with the previous element.': [1, 0.0]
'[c204] remove all duplicates of 0 in the list.': [1, 0.125]
'[c204] remove all the duplicate elements not equal to 0.': [1, 0.125]
'[c204] remove any duplicates from the list and sort the list in ascending order and then return the first two elements.': [1, 0.25]
'[c204] remove consecutive duplicates from the list.': [1, 0.125]
'[c204] remove the 0''s, repeat the last element, and replace the first element with the last element.': [1, 0.125]
'[c204] remove the adjacent duplicate elements from the list.': [1, 0.0]
'[c204] remove the last element if it is 0, else pair the elements that appear consecutively.': [1, 0.0]
'[c204] remove zeroes and keep the first and last appearances of the remaining elements.': [1, 0.125]
'[c204] return a list containing the first non-zero element and the last non-zero element.': [1, 0.125]
'[c204] return first non-zero elements.': [1, 0.125]
? '[c204] search for the first non-zero element and take the element before that as part of the answer, finally append the first non-zero element.'
: [1, 0.25]
'[c205] add consecutive elements.': [1, 0.0]
'[c205] add each pair of the same index and keep only the digits.': [1, 0.125]
'[c205] calculate the addition of all contiguous sublist consisting of consecutive elements.': [1, 0.0]
? '[c205] check if the sum of any two numbers in the list equal to 32 or equal to 64, if true return their value add together, else return -1.'
: [1, 0.0]
? '[c205] compute the digital sum of elements and then the digital sum of the resultant sum until the result is a single digit.'
: [1, 0.5]
'[c205] consider all pairs of numbers in the list, and sum the square of their difference.': [1, 0.125]
'[c205] find the sum of the different elements in the list.': [1, 0.375]
'[c205] find the sum of the maximum and minimum values.': [1, 0.0]
'[c205] get the sum of all the pairs of duplicate elements.': [1, 0.0]
'[c205] sum adjacent even elements.': [1, 0.0]
'[c205] sum all the numbers that repeat.': [1, 0.125]
'[c205] sum the distinct numbers.': [1, 0.125]
'[c205] sum the first two numbers and append to the end of the array.': [1, 0.0]
'[c205] sum the smallest and the largest element in the list.': [1, 0.0]
'[c205] sum up the values of the adjacent duplicate elements.': [1, 0.25]
'[c205] summ min and max.': [1, 0.125]
'[c205] take a list and create a list of each element''s position and frequency.': [1, 0.125]
'[c205] take the sum of each pair of adjacent and equal elements and repeat until no such pairs exists.': [1, 0.0]
'[c206] collect the elements 6, 7, 5, 4, 3, 2 in that order.': [1, 0.0]
'[c206] find all distinct elements appear in the list more than once.': [1, 0.0]
'[c206] find the last three elements 22, 25, 20, and their sum.': [1, 0.125]
'[c206] generate a list of even numbers from the list.': [1, 0.0]
'[c206] generate a list of the repeating elements without their duplicates.': [1, 0.0]
'[c206] keep the even numbers from the list.': [1, 0.0]
'[c206] list all the elements except the first one and last one.': [1, 0.0]
'[c206] list the distinct even numbers.': [1, 0.0]
'[c206] output elements in the list that appear more than twice.': [1, 0.0]
'[c206] output the entire list except the first and last elements.': [1, 0.0]
'[c206] remove all the duplicate elements.': [1, 0.0]
'[c206] remove every occurrence of the smallest element.': [1, 0.0]
'[c206] sort the list of numbers in ascending order and return the second half of the list.': [1, 0.0]
'[c207] add 4 to elements which is odd, else subtract 6.': [1, 0.0]
'[c207] add 5 to each element and prepend the sum of the list to the list.': [1, 0.0]
? '[c207] add 5 to the first element and last element, then find the sum of the first and last element and append it to the list.'
: [1, 0.0]
'[c207] add 5 to the first element, multiply by 2, and remove the last element.': [1, 0.0]
'[c207] add and then multiply the elements.': [1, 0.0]
? '[c207] add the last element to the first element, the second last element to the second element and so on, till the middle and then add the first element to the first element again, the second element to the second element and so on, till the end of the list.'
: [1, 0.0]
'[c207] double each element.': [1, 0.0]
'[c207] find the sum of the first and last elements, then multiply that sum by the maximum element in the list.': [1, 0.0]
'[c207] generate the Fibonacci series for each element.': [1, 0.0]
'[c207] generate the sum of the two elements in the list at the same index.': [1, 0.0]
'[c207] get the sum of every two consecutive elements.': [1, 0.0]
'[c207] multiply all the elements by 4.': [1, 0.0]
'[c207] multiply each element by 3, add 2 to the product and finally subtract 1.': [1, 0.0]
? '[c207] perform A + B + A where A is a number made up of all but the last element and B is a number made up of all but the first element.'
: [1, 0.0]
'[c207] replace each number with the sum of its digit and it''s squared value.': [1, 0.0]
? '[c207] replace the first element with the sum of the last two elements and replace the last element with the sum of the first two elements.'
: [1, 0.0]
'[c207] rotate the elements by 2 to the right.': [1, 0.0]
'[c207] sum the digits of the number and add 20 if the answer is 10 or more.': [1, 0.0]
'[c208] delete all occurrences of elements from a list that are multiples of 6.': [1, 0.0]
'[c208] extract the elements at odd positions in the list.': [1, 0.125]
'[c208] filter out elements that do not equal the first element.': [1, 0.0]
'[c208] filter the list to contain only the odd numbers.': [1, 0.125]
'[c208] find two not repeating elements and return them.': [1, 0.0]
'[c208] generate a list of the last two elements.': [1, 0.25]
'[c208] keep only the elements that occur once in the list.': [1, 0.125]
'[c208] keep only the numbers which are not divisible by 3.': [1, 0.0]
'[c208] remove all even elements.': [1, 0.0]
'[c208] remove all the even elements.': [1, 0.0]
'[c208] remove all the even numbers.': [1, 0.0]
'[c208] remove consecutive duplicate elements.': [1, 0.0]
'[c208] remove duplicate elements.': [2, 0.125]
'[c208] remove the elements at even indices.': [1, 0.0]
'[c208] remove the first element and the last element.': [1, 0.0]
'[c208] remove the odd numbers from the list.': [1, 0.0]
'[c208] return the last 2 elements.': [1, 0.125]
'[c208] return the list with every third element starting from the end.': [1, 0.125]
'[c209] add 1 for the element, add 2 to the next, add 3 for the next, add 4 for the next, and so on.': [1, 0.0]
'[c209] add 1 to each element and construct a list of the sum of last two digits of each number.': [1, 0.0]
'[c209] add 1 to each element, then put the element at the index number plus 1.': [1, 0.0]
'[c209] add 6 to each element and then reverse the elements.': [1, 0.0]
'[c209] append 9 at the end, take the first element append to the end and delete the first element.': [1, 0.0]
'[c209] append the first element to the end.': [1, 0.0]
'[c209] create a new list of length 6.': [1, 0.0]
'[c209] generate a list that starts with 1 and increments an element by 11 if it is even, and increments by 1 otherwise.': [1, 0.0]
'[c209] insert [mid, mid+1] between each integer, then substitute each initial integer with [initial_index, initial_value].': [1, 0.0]
'[c209] multiply last digit of num by 10, then add the num to it.': [1, 0.0]
'[c209] replace the last element with the maximum of the list plus 1.': [1, 0.0]
'[c209] sort the elements and append 93.': [1, 0.0]
'[c210] remove all duplicate elements except the last one.': [1, 0.0]
'[c210] remove all duplicate elements.': [1, 0.0]
'[c210] remove all instances of the last element.': [1, 0.0]
'[c210] remove all occurrences of the element at index 0.': [1, 0.0]
'[c210] remove all occurrences of the last element.': [1, 0.0]
'[c210] remove all the duplicate elements except the last one.': [1, 0.0]
'[c210] remove all the duplicate elements.': [1, 0.0]
'[c210] remove any duplicate elements.': [2, 0.0]
'[c210] remove consecutive elements.': [1, 0.0]
'[c210] remove duplicate elements then append the removed elements to the end of the list.': [1, 0.0]
? '[c210] remove duplicated elements from the list, and place the largest element at the end while maintaining the order of all other elements.'
: [1, 0.0]
'[c210] remove duplicates.': [1, 0.0]
'[c210] remove the duplicate elements in the list.': [1, 0.0]
'[c210] remove the duplicates.': [1, 0.0]
'[c210] remove the repetitive elements and add the first element to the end.': [1, 0.0]
'[c211] add the current element count times, in the end.': [1, 0.0]
'[c211] append the first element to the last.': [1, 0.0]
'[c211] create a list of: every 2nd element, then every 1st element.': [1, 0.0]
'[c211] create a mirrored array with a space in between the mirror.': [1, 0.0]
'[c211] duplicate each element of the list and add them in between the elements of the original list.': [1, 0.0]
'[c211] duplicate each element.': [1, 0.0]
'[c211] duplicate every element.': [1, 0.0]
'[c211] duplicate the elements.': [1, 0.0]
'[c211] duplicate the minimum value.': [1, 0.0]
'[c211] generate a list of elements 3, 2, 1, the number 4, then elements 5 and 7.': [1, 0.0]
'[c211] mirror the list.': [1, 0.0]
'[c211] put the maximum value at the last index and have multiple copies of this value after it.': [1, 0.0]
'[c211] repeat every element twice.': [1, 0.0]
'[c211] repeat the last 2 elements in the list.': [1, 0.0]
'[c211] repeat the last element to form a new list 3 times, and insert it at index 5.': [1, 0.0]
'[c211] replicate the even numbers in the list and then reverse the whole list.': [1, 0.0]
'[c211] sort the list in ascending order, then sort the list by the inverse order of the original indexes.': [1, 0.0]
'[c212] add 3 after every element.': [1, 0.0]
'[c212] add 3 between each number.': [1, 1.0]
'[c212] break all the elements into their individual numbers and insert 3 between each of the digits.': [1, 0.25]
'[c212] insert "3" after every element of the list.': [1, 0.0]
'[c212] insert 3 after every element in the list.': [1, 0.0]
'[c212] insert 3 after every number in the array.': [1, 0.0]
'[c212] insert 3 between every element.': [1, 0.0]
'[c212] insert 3 into the list at index 2.': [1, 0.0]
'[c212] insert 3, 3, 3 before the first 3.': [1, 0.5]
'[c212] insert 3s before all numbers except the first.': [1, 0.75]
'[c212] insert 3s between each element in the list.': [1, 1.0]
'[c212] insert the number of times each element repeats to the right of that element, except for the last one.': [1, 1.0]
'[c212] insert three 3s after every element.': [1, 1.0]
'[c212] split numbers into individual digits, then repeat each digit three times.': [1, 0.0]
'[c213] append the lowest integer in the list to the start of the list.': [1, 0.0]
'[c213] arrange the numbers in ascending order in an array.': [1, 0.0]
'[c213] create a new list of the smallest number in the list, second smallest and so on.': [1, 0.875]
'[c213] extract elements at even positions.': [1, 0.0]
'[c213] extract elements less than 15.': [1, 0.375]
'[c213] extract elements that are smaller than 10.': [1, 0.25]
'[c213] extract the all the even numbers in a list.': [1, 0.0]
'[c213] extract the minimum elements.': [1, 0.625]
'[c213] extract the smallest 3 elements of the list.': [1, 1.0]
'[c213] generate a list containing the first 3 minimum elements of the input list.': [1, 1.0]
'[c213] generate a list of elements 2, 4, 6.': [1, 0.0]
'[c213] generate a list of the even elements.': [1, 0.0]
'[c213] get the smallest three elements.': [1, 1.0]
'[c213] list all elements less than 10.': [1, 0.375]
'[c213] output the smallest 3 numbers in the list.': [1, 1.0]
'[c213] rearrange elements from minimum to maximum.': [1, 0.0]
'[c213] return a list of the smallest three elements.': [1, 1.0]
'[c213] return digits less than 10.': [1, 0.375]
'[c213] return the sorted list in ascending order.': [1, 0.0]
'[c214] delete all the elements which appear more than once.': [1, 0.0]
'[c214] delete duplicate elements.': [1, 0.125]
'[c214] drop every alternate duplicate.': [1, 0.125]
'[c214] filter out duplicate elements.': [1, 0.125]
'[c214] generate a list of the odd indexed elements.': [1, 0.125]
'[c214] remove all duplicate elements.': [1, 0.125]
'[c214] remove duplicate elements.': [2, 0.25]
'[c214] remove duplicates and odd numbers.': [1, 0.125]
'[c214] remove the duplicate elements.': [1, 0.125]
'[c214] remove the first and last elements of the list, then remove any duplicate elements from the remaining list.': [1, 0.0]
'[c214] remove the first and last elements.': [1, 0.0]
'[c214] remove the smallest and largest elements in the list.': [1, 0.0]
'[c214] sort the elements in ascending order.': [1, 0.0]
? '[c215] replace 4 with 7 if the list contains 4s, replace 0 with 8 if the list contains 0s, and replace any other element by its predecessor element.'
: [1, 0.0]
'[c215] replace an existing element in the list with 7 if the array contains an even number or multiple of 3.': [1, 0.0]
'[c215] replace duplicate elements with its number of occurrences.': [1, 0.0]
'[c215] replace each element with the floor result of dividing it by 10.': [1, 0.0]
'[c215] replace the first and last elements, then replace second element with 7.': [1, 0.0]
? '[c215] replace the first element of the list with the second element plus 3 and the second element with the first element minus 3.'
: [1, 0.0]
? '[c215] replace the first element with 7 if the list contains at least two of the elements 4, 8, and 15, else replace the first element with 6.'
: [1, 0.0]
'[c215] replace the first element with 7 if the list contains at least two similar elements, else 6.': [1, 0.0]
'[c215] replace the first element with its absolute difference from 7.': [1, 0.0]
'[c215] replace the first occurrence of 4, 2, or 5 with a 7.': [1, 0.0]
'[c215] replace the first occurrence of the element at index 2 with 7.': [1, 0.0]
'[c215] replace the last element with the second last element.': [1, 0.0]
'[c215] replace the second element with the average of the first and third elements.': [1, 0.0]
'[c215] replace the second element with the floor of half of the second element.': [1, 0.0]
'[c215] replace the second highest number in the list with 7.': [1, 0.0]
'[c215] subtract 1 from the last 4-occurred elements.': [1, 0.0]
'[c216] arrange the elements in ascending order.': [1, 0.375]
'[c216] move all even elements to the beginning of the array and keep the order of the original array.': [1, 0.0]
'[c216] move all even elements to the beginning while keeping the order of the elements of the list unchanged.': [1, 0.125]
'[c216] move last element to first position.': [1, 0.0]
'[c216] move the element at the first position to the last position.': [1, 0.0]
'[c216] move the first element to the second last position.': [1, 0.0]
'[c216] remove the first and last elements of the list.': [1, 0.0]
'[c216] remove the first element and put it at the end.': [1, 0.0]
'[c216] shift elements by one position to the left.': [1, 0.0]
'[c216] sort in ascending order.': [1, 0.375]
'[c216] sort the elements in ascending order.': [2, 0.75]
'[c216] sort the list in ascending order.': [2, 0.75]
'[c216] sort the list.': [1, 0.375]
'[c216] sort the numbers in ascending order.': [1, 0.375]
'[c217] arrange the array such that the smallest element becomes the first, and largest the last.': [1, 0.125]
'[c217] arrange the elements such that lower half of the elements are even and upper half of the elements are odd.': [1, 0.0]
? '[c217] arrange the integers in the array in the alternative order: first the maximum value, then the minimum value, then second maximum, second minimum and so on.'
: [1, 0.0]
'[c217] double the elements, find their sum, then add the original list at the end.': [1, 0.0]
'[c217] move even numbers to the beginning of the list.': [1, 0.0]
'[c217] put elements with even indices to the right of the elements of odd indices.': [1, 0.0]
'[c217] reverse every consecutive two elements.': [1, 0.0]
'[c217] separate even and odd numbers, even numbers come first, odd numbers come later.': [1, 0.0]
'[c217] sort the elements in ascending order.': [1, 0.125]
'[c217] sort the list elements in descending order.': [1, 0.0]
'[c217] sort the list in ascending order.': [1, 0.125]
'[c217] sort the list in descending order.': [1, 0.0]
'[c217] sort the list of numbers, then alternate even and odd numbers.': [1, 0.125]
'[c218] delete all elements other than the most repeated element.': [1, 0.0]
'[c218] find the duplicates.': [1, 0.125]
'[c218] find the most dominant element (the one that occurs most of the time) in the list.': [1, 0.125]
'[c218] keep the first occurrence of each element.': [1, 0.0]
'[c218] keep the number that occurs most frequently.': [1, 0.25]
'[c218] only keep the unique numbers in the list.': [1, 0.0]
'[c218] remove all but the first occurrence of an element.': [1, 0.0]
'[c218] remove all elements except the most frequently occurring.': [1, 0.125]
'[c218] remove all elements from the list except the first one.': [1, 0.0]
'[c218] remove duplicate elements.': [2, 0.0]
'[c218] remove duplicates from the list.': [1, 0.0]
'[c218] retain only the first unique element.': [1, 0.0]
'[c218] return a list where each element is the most occurring element in the given list.': [1, 0.125]
'[c218] return the most occurred number.': [1, 0.0]
'[c218] return the unique elements in the list.': [1, 0.0]
'[c219] delete all elements that aren''t multiples of 3.': [1, 0.0]
'[c219] eliminate duplicate elements, then eliminates elements that are less than the previous element.': [1, 0.0]
'[c219] filter out the elements at even indices.': [1, 0.25]
'[c219] remove all elements other than numbers divisible by 3.': [1, 0.0]
'[c219] remove all elements that are not multiples of 5.': [1, 0.0]
'[c219] remove all the odd elements.': [1, 0.0]
'[c219] remove any element that is < 10.': [1, 0.0]
'[c219] remove elements that are 1 or 6 away from an element 6.': [1, 0.0]
'[c219] remove every 3rd element.': [1, 0.25]
'[c219] remove odds and keep even elements.': [1, 0.0]
'[c219] remove the elements that are divisible by 5, 6, or 10.': [1, 0.0]
'[c219] remove the even numbers from the list.': [2, 0.0]
'[c220] double each number.': [1, 0.375]
'[c220] multiply each digit by 3.': [1, 0.5]
'[c220] multiply each element by 3.': [8, 4.875]
'[c220] multiply each number by 3.': [2, 1.25]
'[c220] multiply each number by itself.': [1, 0.375]
'[c220] multiply the first element by 3, the second element by 5, and so on.': [1, 0.125]
'[c220] multiply the original elements by 3.': [1, 0.625]
'[c221] add all of the digits of the array to give a single output.': [1, 0.0]
'[c221] add all the digits.': [1, 0.0]
'[c221] add the elements at even index.': [1, 0.125]
'[c221] add the two smallest elements in the list.': [1, 0.0]
'[c221] calculate the difference between the maximum and minimum numbers in the list.': [1, 0.0]
'[c221] calculate the sum of all the elements.': [1, 0.0]
'[c221] find all pairs of numbers in the input list whose sum is 100.': [1, 0.0]
'[c221] find the sum of each list except for the 6s.': [1, 0.0]
'[c221] get the sum of all the even elements.': [1, 0.125]
'[c221] replace all duplicate elements with their sum.': [1, 0.0]
'[c221] reverse the digits in every number in the list, then add them.': [1, 0.0]
'[c221] sum all the digits in the array, and divide it by 8 and floored.': [1, 0.0]
'[c221] sum all the given numbers and print the length of this result.': [1, 0.0]
'[c221] sum all the odd elements.': [1, 0.0]
'[c221] sum elements at odd positions.': [1, 0.0]
'[c221] sum the elements in the list.': [1, 0.0]
'[c221] sum the elements of which are divisible by 3.': [1, 0.0]
'[c221] sum up the alternating indices of the list (0, 2, 4, 6, .': [1, 0.0]
'[c221] sum-up the 10s digits and the 1s digits of each number, then add these sums.': [1, 0.0]
'[c221] take the sum of the difference of each element and the average of array elements.': [1, 0.0]
'[c222] determine the number of multiples of 10 in a list and list that number 10 times.': [1, 0.125]
'[c222] find the smallest element and replace it with 10.': [1, 0.0]
'[c222] generate a list of 10.': [1, 0.25]
? '[c222] generate a list of 10s or 5s or 9s or 7s or 3s, depending on the first digit of the first element in the given list.'
: [1, 0.0]
'[c222] generate a list of elements 10 for a maximum of ten elements in the list.': [1, 0.375]
? '[c222] generate a list of elements 10 if any element in the list is greater than 60, else all elements should be 8, else all elements should be 7, else all elements should be 6, else all elements should be 5, else all elements should be 3, else all elements should be 2, else all elements should be 1.'
: [1, 0.0]
'[c222] generate a list of elements where each element is the minimum value of the input list.': [1, 0.0]
'[c222] output the minimum digits from the elements.': [1, 0.0]
'[c222] replace all elements with the minimum element in the list.': [1, 0.125]
'[c222] replace each element with its first digit.': [1, 0.0]
'[c222] replace every element in the list with the smallest element.': [1, 0.0]
? '[c222] replace every element with 10 if it is greater than or equal to 10, and 7 if it is greater than or equal to 7 and less than 10, and 3 if it is greater than or equal to 3 and less than 7, and 5 if it is greater than or equal to 5 and less than 3.'
: [1, 0.0]
'[c222] replace with 10 if the number is greater than or equal to 60, and replace with 8 if the number is less than 60.': [1, 0.0]
'[c223] add 5 to the last digit of each element and divide the element by 10.': [1, 0.125]
'[c223] add each element by 10 and then divide the result by 9 and add 1.': [1, 0.0]
'[c223] convert the element to its double digit representation.': [1, 0.5]
'[c223] decrease elements by 9 if the element is greater than 9, else; increase it by 10.': [1, 0.0]
'[c223] increment each element by 10, except if the element is greater than 90 and in that case set it to 0.': [1, 0.0]
'[c223] subtract 10 and multiply by 3.': [1, 0.125]
'[c223] subtract 10 and then divide by 2 to get the corresponding number.': [1, 0.0]
'[c223] subtract 10 from each element and determine the remainder when dividing by 10.': [1, 0.0]
'[c223] subtract 10 from each element, then multiply the result by 10.': [1, 0.0]
'[c223] subtract 9 from each element in the list.': [1, 0.0]
'[c223] subtract 9 from the first digit of each number.': [1, 0.25]
'[c223] subtract each digit of the number with the same digit of the number 99.': [1, 0.0]
'[c223] take a number, add 1 to it, then multiply it by 10.': [1, 0.375]
? '[c224] arrange the elements in the following order: the last element, then the first element, then the second last element, then the second element, and so on.'
: [1, 0.0]
'[c224] odd-even sort the elements, placing the odd elements on the right.': [1, 0.0]
'[c224] place the last element in the beginning.': [1, 0.0]
'[c224] place the last k elements to the first of the array.': [1, 0.0]
'[c224] reorder the elements in decreasing order.': [1, 0.0]
'[c224] reorder the elements such that the last 2 elements are at the start and the first 2 elements are at the last.': [1, 0.0]
'[c224] reverse the elements and add a space after the first element.': [1, 0.0]
'[c224] reverse the elements and swap the first and last elements.': [1, 0.0]
'[c224] reverse the elements in the list and then sort the reversed list.': [1, 0.0]
'[c224] reverse the elements in the list.': [1, 0.0]
'[c224] reverse the elements.': [2, 0.0]
'[c224] reverse the order of the second halves of the list.': [1, 0.0]
'[c224] rotate the list by 9 positions.': [1, 0.0]
'[c224] rotate the list right by one element.': [1, 0.0]
? '[c224] shift the whole array to the right by 1, the last element becomes the first element, and other elements shift to the right.'
: [1, 0.0]
'[c224] sort the list in ascending order, then rotate 2 elements to the right.': [1, 0.0]
'[c224] take the second half elements of the array and add to the front.': [1, 0.0]
'[c225] extract elements that are greater than 20.': [1, 0.0]
'[c225] find the elements at even indices.': [1, 0.0]
'[c225] generate a list of all elements greater than 10.': [1, 0.0]
'[c225] generate a list of elements greater than or equal 25.': [1, 0.0]
'[c225] generate a list of even elements from the input list.': [1, 0.0]
'[c225] list even numbers.': [1, 0.0]
'[c225] list out all the even numbers in the list.': [1, 0.0]
'[c225] remove all elements until 0 is encountered.': [1, 0.0]
'[c225] remove numbers that appear only once.': [1, 0.0]
'[c225] remove the odd index elements.': [1, 0.0]
'[c225] return all elements divisible by 9.': [1, 0.0]
'[c225] return the sublist containing the first and last elements.': [1, 0.0]
'[c225] reverse every two alternate elements.': [1, 0.0]
'[c225] select only digits greater than 2.': [1, 0.0]
'[c225] take list elements occurring at odd positions.': [1, 0.0]
'[c226] delete all repeating elements in the list.': [1, 0.0]
'[c226] delete every repeated number from the list.': [1, 0.0]
'[c226] keep the first occurrence of each element.': [1, 0.0]
'[c226] remove all duplicate elements.': [1, 0.0]
'[c226] remove all duplicates.': [1, 0.0]
'[c226] remove all elements except 1, 3, 6, 8 and then remove duplicate elements.': [1, 0.0]
'[c226] remove all instances of the element that occurs most frequently.': [1, 0.0]
'[c226] remove all instances of the first element.': [1, 0.25]
'[c226] remove all occurrences of 0.': [1, 0.0]
'[c226] remove all the even elements.': [1, 0.0]
'[c226] remove duplicate elements.': [3, 0.0]
'[c226] remove duplicates.': [1, 0.0]
'[c226] remove elements at even indexes and to repeat consecutive elements.': [1, 0.0]
'[c226] remove elements which are not unique.': [1, 0.0]
'[c226] remove repeated elements.': [1, 0.0]
'[c226] remove the duplicates.': [1, 0.0]
'[c227] alternate the elements, starting with the even indexed element.': [1, 0.0]
'[c227] alternate the order by picking every other element starting from the beginning.': [1, 0.125]
'[c227] arrange the elements in the order of first the minimal, then second minimal, and so on.': [1, 0.25]
? '[c227] first arrange the even numbers in the list from least to greatest, followed by the odd numbers in the list from least to greatest.'
: [1, 0.0]
'[c227] group even and odd elements separately in increasing order.': [1, 0.0]
'[c227] interleave all elements by 1, e.': [1, 0.0]
'[c227] move all odd elements to the end of the list and maintain the order of even elements.': [1, 0.0]
'[c227] move all the even numbers to the end of the list.': [1, 0.0]
'[c227] reorder the list by putting the odd numbers in it at the beginning, followed by all the even numbers in it.': [1, 0.0]
'[c227] reverse the elements of the list while also swapping the elements at even indices with the elements at odd indices.': [1, 0.25]
'[c227] segregate even indices from odd indices.': [1, 0.125]
'[c227] sort the elements and then to alternate the position of the elements.': [1, 0.0]
'[c227] sort the elements in ascending order and remove duplicates.': [1, 0.25]
'[c227] sort the elements in descending order and put all equal elements together.': [1, 0.0]
'[c227] sort the numbers in descending order, then order the even numbers before the odd numbers.': [1, 0.0]
'[c227] split the list into two halves, reverse the second half, and concatenate the two lists.': [1, 0.125]
'[c227] swap adjacent elements in the list.': [1, 0.0]
'[c227] swap maximum and minimum elements in list.': [1, 0.0]
'[c228] assign numerical values to each unique elements in the array, starting from 1.': [1, 0.0]
'[c228] count numbers in order (1, 2, 3, .': [1, 0.625]
'[c228] encode the list of integers in the following way: 1 for the first number, 2 for the second number, and so on.': [1, 0.625]
'[c228] generate a list of elements 1, 2, 3, then repeat.': [1, 0.625]
'[c228] generate a list of numbers from 1 to the count of unique numbers.': [1, 0.625]
'[c228] generate a list of numbers starts from 1, and each time append the number of different element in previous list.': [1, 0.625]
? '[c228] generate a list of the numbers 1, 2, 3, where the length is equal to the number of unique elements in the input list.'
: [1, 0.125]
'[c228] generate a sequence of numbers, where 1, 2, 3, .': [1, 0.625]
'[c228] implement run-length encoding.': [1, 0.625]
'[c228] increment the value if a greater value is present in the list.': [1, 0.625]
'[c228] rank the elements based on the frequency of their occurrence starting from 1.': [1, 0.625]
'[c228] replace every integer with its rank.': [1, 0.625]
'[c228] replace the first occurrence of each integer with the position of the first occurrence of that integer.': [1, 0.625]
'[c228] replace the original numbers with another number by the order of their occurrence.': [1, 0.75]
'[c228] sort the elements and count the occurences of the elements sequentially.': [1, 0.0]
'[c229] alternatively reverse the elements in odd and even positions.': [1, 0.0]
'[c229] list out the elements in reverse order.': [1, 0.0]
'[c229] read the list from right to left.': [1, 0.0]
'[c229] return only the prime numbers in the list.': [1, 0.125]
'[c229] reverse each sublist of even length.': [1, 0.0]
'[c229] reverse half of the elements.': [1, 0.0]
'[c229] reverse the elements and take the half.': [1, 0.125]
'[c229] reverse the elements and then reverse the list.': [1, 0.0]
'[c229] reverse the elements from position 0 to the last odd number.': [1, 0.0]
'[c229] reverse the elements in descending order.': [1, 0.0]
'[c229] reverse the elements, subarray by subarray, based on the value of each even index.': [1, 0.125]
'[c229] reverse the elements.': [2, 0.0]
'[c229] reverse the list and remove all even numbers.': [1, 0.0]
'[c229] reverse the list and then reverse the elements of every even position.': [1, 0.0]
'[c229] sort the elements in ascending order and then reverse the elements.': [1, 0.0]
'[c229] sort the list in ascending order and print the last element.': [1, 0.25]
'[c230] even elements in the list.': [1, 0.5]
'[c230] generate a list of elements that are 2 apart until the limit of the first element.': [1, 0.625]
'[c230] generate a list of even numbers between first and second elements, if second element is present.': [1, 0.25]
'[c230] generate a list of even numbers between the first and the second number.': [1, 0.5]
'[c230] generate a list of even numbers increasing, with step of 2, starting from the first element.': [1, 0.625]
'[c230] generate a list of even numbers starting from the first element.': [2, 1.25]
'[c230] generate a list of even numbers starting with the smallest element.': [1, 0.875]
'[c230] generate a list of even numbers till the first element in the list.': [1, 0.0]
'[c230] generate a range from the first element to the second element with step size 2.': [1, 0.625]
'[c230] generate a sequence of even numbers from the first element to the second element.': [1, 0.375]
'[c230] generate a sequence of numbers starting from a given number, and increasing by 2 until the end of the sequence.': [1, 0.75]
'[c230] generate an arithmetic series with a step size of 2 for even numbers and a step size of 3 for odd numbers.': [1, 0.375]
'[c230] generate even multiples of the smallest number.': [1, 0.75]
'[c230] generate even numbers starting with the first number.': [1, 0.625]
'[c230] generate even numbers up to a certain limit.': [1, 0.25]
'[c230] remove all elements not divisible by 2.': [1, 0.125]
'[c230] remove all odd numbers.': [1, 0.25]
'[c230] take the even numbers between the two elements.': [1, 0.5]
'[c231] count each unique number and produce the number of times it occurs.': [1, 0.0]
'[c231] count the number of occurrences of each distinct number.': [1, 0.0]
'[c231] count the number of occurrences of each element and replace the elements with the number of occurrences.': [1, 0.0]
'[c231] count the number of occurrences of each unique integer in the input list.': [1, 0.0]
'[c231] count the number of times each element appears in the list.': [1, 0.0]
'[c231] count the number of times each element occurs in the list.': [1, 0.0]
'[c231] count the number of times each element repeats.': [1, 0.0]
'[c231] count the number of times each unique element appears in the list.': [1, 0.0]
'[c231] count the number of unique elements.': [1, 0.0]
'[c231] count the occurrence of non-duplicate elements.': [1, 0.0]
'[c231] count the occurrences of each element.': [1, 0.0]
'[c231] count unique elements in the list.': [1, 0.0]
'[c231] reduce the list of numbers to a list of count of each distinct number in the input list.': [1, 0.0]
'[c231] replace each element with the count of its occurrences in the list.': [1, 0.0]
'[c232] add the digits of all the numbers in the list and return the last digit.': [1, 0.0]
'[c232] add the elements in the list with a space of 2 between the indices.': [1, 0.0]
? '[c232] add the first and second number of the list, and then subtract the last number in the list from the sum and store in a new list.'
: [1, 0.0]
'[c232] calculate the sum of the prime numbers in the list and then add 13 to the result.': [1, 0.0]
'[c232] find the sum of the first and last digits of the number.': [1, 0.0]
'[c232] find the sum of the two smallest elements in the array.': [1, 0.0]
'[c232] first remove all elements which occur in the second half of the list, then find the sum of the remaining elements.': [1, 0.125]
'[c232] generate a list of elements 3, 2, 1, the number 4, then elements 5 and 7.': [1, 0.0]
'[c232] generate a sum of the digit of each element.': [1, 0.0]
'[c232] subtract 10 from the maximum value.': [1, 0.0]
'[c232] subtract all the digits in the number(s) until they are a single digit.': [1, 0.0]
'[c232] subtract the 2nd element from the sum of all elements.': [1, 0.0]
'[c232] subtract the first and third from the second and fourth, then add the results.': [1, 0.0]
'[c232] sum every 3 consecutive elements.': [1, 0.0]
'[c232] sum every second element in the list.': [1, 0.125]
'[c232] sum the 2nd and 3rd element and then subtract the 4th element.': [1, 0.25]
'[c232] sum the digits of all elements, take the modulus 10 of the sum, and multiply the result by 10.': [1, 0.0]
'[c232] sum the digits of each number in the list and return the sum of the digits of the sum.': [1, 0.0]
'[c232] sum the first and second elements then subtract that from the third element.': [1, 0.0]
'[c232] sum the left 2 - right 2 elements.': [1, 0.0]
'[c233] check how many times each unique value occurs in the array.': [1, 0.375]
'[c233] count occurrence of duplicates.': [1, 0.375]
'[c233] count the frequency of each element and then replace the element with the count.': [1, 0.125]
'[c233] count the frequency of each element in the list.': [1, 0.375]
'[c233] count the frequency of every element and return the smallest frequency of the elements.': [1, 0.0]
'[c233] count the number of different elements.': [1, 0.0]
'[c233] count the number of occurences of each unique element.': [1, 0.375]
'[c233] count the number of unique digits in descending order.': [1, 0.0]
'[c233] count the number of unique digits.': [1, 0.0]
'[c233] count the number of unique elements and output these counts.': [1, 0.0]
'[c233] count the number of unique elements, and output 1 if there is only 1 unique element else output 10.': [1, 0.0]
'[c233] count the occurrences of 9,  8, 7,  6, 5, 4, 3, 2 and 1 respectively, and append them to the resulting list.': [1, 0.25]
'[c233] count the occurrences of each element and take [dominant element''s count, number of dominant elements].': [1, 0.25]
'[c233] count the occurrences of each element in the list.': [1, 0.625]
'[c233] count the occurrences of the element on the right.': [1, 0.375]
'[c233] generate a list of 1s with length equal to the number of unique elements in the given list.': [1, 0.0]
'[c233] generate a list of count the elements.': [1, 0.25]
'[c233] replace each element with the count of its occurrences.': [1, 0.125]
'[c234] create a list where each element appears only once.': [1, 0.0]
'[c234] generate the list of unique elements in the input list.': [1, 0.0]
'[c234] keep only the first occurrence of the number.': [1, 0.0]
'[c234] remove adjacent duplicate values.': [1, 0.125]
'[c234] remove all duplicate elements.': [2, 0.0]
'[c234] remove all elements that occur more than once.': [1, 0.0]
'[c234] remove consecutive elements of the same value.': [1, 0.125]
'[c234] remove duplicates.': [3, 0.0]
'[c234] remove the duplicates.': [4, 0.0]
'[c234] retain only the first occurrence of the element in the array.': [1, 0.0]
'[c235] convert the list to a range of inclusive integers.': [1, 0.0]
'[c235] create a list of elements in a decreasing range between the minimum and the maximum elements, inclusive.': [1, 0.0]
? '[c235] create a list starting with the first element and ending with the last element such that next element is the mean of two consecutive elements.'
: [1, 0.0]
? '[c235] decrease the last element by 1 if it''s divisible by 2 and increase the first element by 1 unless it''s divisible by 2.'
: [1, 0.0]
'[c235] generate a list from the minimum to the maximum to the minimum.': [1, 0.125]
'[c235] generate a list in decreasing order from the maximum element.': [1, 0.0]
'[c235] generate a list of elements in between the elements in the input list.': [1, 0.25]
'[c235] generate a range between the smallest element and the highest element.': [1, 0.0]
? '[c235] generate a range from the first to the last element, decreasing the last element by 1, decreasing the 2nd last element by 2, decreasing the 3rd last element by 3, and so on.'
: [1, 0.0]
'[c235] generate a range given start and end points.': [1, 0.125]
'[c235] generate a range of elements from the minimum to maximum.': [1, 0.0]
'[c235] generate a range of elements starting from the first element to the second element.': [1, 0.125]
'[c235] generate a range of numbers between the min and max elements of the list.': [1, 0.0]
'[c235] generate a range starting from the minimum of the list to the maximum of the list.': [1, 0.0]
'[c235] generate a sequence by decrementing every number, given that a number is not preceded by its predecessor.': [1, 0.0]
'[c235] generate the list of all numbers between the first and second elements, excluding the second element.': [1, 0.125]
'[c235] include all the numbers between the largest and smallest elements, both included.': [1, 0.0]
'[c235] repeat each element by decrementing the value by 1 from the adjacent element.': [1, 0.0]
'[c235] subtract 1 from each element until the elements are consecutive (excluding repetitions).': [1, 0.0]
'[c236] add the digits of each element and return the new array.': [1, 0.0]
'[c236] append pairs of consecutive even numbers to the list except the last even number.': [1, 0.0]
'[c236] compute modulo 4 of the sum of each consecutive pair in a list.': [1, 0.0]
'[c236] divide each element by 2, round down to the nearest integer and display the ones place of the result.': [1, 0.0]
'[c236] find pairs where the sum is 40, and list the first element of each pair.': [1, 0.0]
? '[c236] find the average of the numbers that are the multiples of 3 and 5, divide the average by 2, and then find the sum of that result and 2.'
: [1, 0.0]
'[c236] generate a list of elements 2, 1, then every second element.': [1, 0.0]
? '[c236] generate a list of elements that are the result of the modulus operation of the consecutive elements of the original list divided by 3.'
: [1, 0.0]
'[c236] get the maximum of (X // 5) and (X mod 5), and add the results of both.': [1, 0.0]
'[c236] list the quotients when each of the element in the original list is divided by 10.': [1, 0.0]
? '[c236] pick a random number from the list, add them to the end of the list, delete all the elements of the list that are greater than the number picked, divide all the remaining elements by two, and return the list.'
: [1, 0.0]
'[c236] return the number of times the digits 1, 2, 3, and 4 appear in the list (in order).': [1, 0.0]
'[c236] subtract 1 from the even-positioned elements of the list.': [1, 0.0]
'[c236] subtract the odd index elements from even index elements.': [1, 0.0]
'[c236] sum the digits of the product of elements in even positions.': [1, 0.0]
'[c236] take the sum of the elements at index i and i+1 and divide the sum by 2.': [1, 0.0]
'[c236] treat each 9 as 2, 8 as 5, 7 as 4, 6 as 3, 5 as 1, 4 as 0, and 3 as 2.': [1, 0.0]
'[c237] add all elements which appear the same number of times.': [1, 0.0]
'[c237] append the sum of the consecutive equal elements.': [1, 0.0]
'[c237] calculate cumulative sum.': [1, 0.125]
'[c237] find the cumulative sum of each element''s position and value(count).': [1, 0.125]
'[c237] find the sum of consecutive elements that are similar.': [1, 0.0]
'[c237] find the sum of each unique pair of elements and list it in ascending order.': [1, 0.0]
'[c237] recognize consecutive numbers and add their sums.': [1, 0.0]
'[c237] return the cumulative sum for a given group of consecutive duplicates.': [1, 0.125]
'[c238] eliminate (remove) all occurrences of the least number.': [1, 0.75]
'[c238] remove all duplicate elements from the list.': [1, 0.125]
'[c238] remove all duplicate elements.': [2, 0.25]
'[c238] remove all elements that appears more than once.': [1, 0.75]
'[c238] remove all occurrences of first and last elements.': [1, 0.25]
'[c238] remove all occurrences of the first element of the list.': [1, 0.125]
'[c238] remove all occurrences of the first element.': [2, 0.375]
'[c238] remove all repeated elements.': [2, 0.625]
'[c238] remove all the elements which occurs more than once.': [1, 0.75]
? '[c238] remove all the occurrences of the last element if the list contains more than one occurrence of at least one element.'
: [1, 0.375]
'[c238] remove duplicate elements.': [2, 0.25]
'[c238] remove elements that are the same as the next element.': [1, 0.625]
'[c238] remove the duplicates from the list.': [1, 0.125]
'[c238] remove the duplicates.': [1, 0.125]
'[c238] remove the first and last occurrences of a number.': [1, 0.25]
'[c239] check for duplicates, and return 1 if they exist else return 0.': [1, 0.5]
'[c239] check if there is a unique number in the array and return 1 if true or 0 if false.': [1, 0.0]
'[c239] count the number of unique elements in the list.': [3, 0.125]
'[c239] count the number of unique elements.': [2, 0.125]
'[c239] count the unique elements in the array.': [1, 0.125]
'[c239] find the frequency of the lowest element.': [1, 0.375]
'[c239] find the number of unique elements in the list.': [1, 0.0]
'[c239] find the number of unique integers from the list.': [1, 0.0]
'[c239] find whether any element appears exactly once.': [1, 0.0]
'[c239] generate a list of ones if all the elements are the same, else the output should be 0.': [1, 0.375]
'[c239] get the index of the first unique number in increasing order.': [1, 0.0]
'[c239] list the number of unique elements.': [1, 0.0]
'[c239] return 1 if there''s at least two elements equal, 0 otherwise.': [1, 0.5]
'[c239] return a unique element.': [1, 0.0]
'[c239] return the number of unique elements in the list.': [1, 0.0]
'[c240] check and count the total number of duplicate elements in the list.': [1, 0.375]
'[c240] count the number of distinct integers.': [1, 0.125]
'[c240] count the number of non-duplicate elements.': [1, 0.25]
'[c240] count the number of unique elements in the list.': [2, 0.25]
'[c240] count the number of unique non-zero elements in the array.': [1, 0.375]
'[c240] count the occurrences of the 2nd smallest element.': [1, 0.25]
'[c240] count the unique number of times the element 2 appears.': [1, 0.0]
'[c240] count unique elements.': [1, 0.125]
'[c240] find and count all the unique occurrences of the number two.': [1, 0.25]
'[c240] find the frequency of 2.': [1, 0.125]
'[c240] find the number of unique elements in the list.': [2, 0.25]
'[c240] find the number of unique elements.': [2, 0.125]
'[c240] return 2 if all elements are the same, and else return 1.': [1, 0.0]
'[c240] return 2 if the list contains an element repeated at least twice.': [1, 0.125]
'[c240] return the number of distinct elements in the list.': [1, 0.125]
'[c240] subtract 1 from the second most frequent element.': [1, 0.0]
'[c240] take a list and count the number of unique elements.': [1, 0.125]
'[c241] count the number of digits that is divisible by 5.': [1, 0.125]
'[c241] count the number of even numbers in the given list of integers.': [1, 0.0]
'[c241] count the number of times the element 6 appears.': [1, 0.0]
'[c241] count the number of times the number 46 appears.': [1, 0.0]
'[c241] find the 1st distinct number and return it.': [1, 0.0]
'[c241] find the index of the first element in the list which has the lowest value of all the elements.': [1, 0.0]
'[c241] find the number in the given list that repeats the least number of times.': [1, 0.125]
'[c241] find the number of elements in the list that are divisible by 5.': [1, 0.125]
'[c241] find the number of even numbers.': [1, 0.0]
'[c241] find the number of occurrences of the minimum value.': [1, 0.125]
'[c241] find the number of times 3 appears.': [1, 0.125]
'[c241] find the number of unique digits in the list.': [1, 0.0]
'[c241] find the number of unique elements in the list.': [1, 0.0]
'[c241] find the number of unique maximum values.': [1, 0.0]
'[c241] output a list containing only the least value in the list.': [1, 0.0]
'[c241] output the first index where the element is either a 5 or a 4.': [1, 0.0]
'[c241] return the index of the smallest element.': [1, 0.0]
'[c241] return the number of times the mode appears.': [1, 0.125]
'[c242] assort the list into an increasing order of frequency of the numbers.': [1, 0.0]
? '[c242] move all the minimum integers to the front of the list, and then move the maximum integers to the front of the minimum integers.'
: [1, 0.0]
'[c242] rearrange the elements smallest to largest.': [1, 0.0]
'[c242] reorder the elements such that the elements at even indices come first.': [1, 0.0]
'[c242] sort list of elements in ascending order.': [1, 0.0]
'[c242] sort the array in ascending order, but when there''s a tie, they are sorted in descending order.': [1, 0.0]
'[c242] sort the array with the sort(reverse=True) method.': [1, 0.0]
'[c242] sort the elements first in ascending order, then sort the values with the same frequency in ascending order.': [1, 0.0]
'[c242] sort the elements in ascending order.': [1, 0.0]
'[c242] sort the even elements in ascending order and then the odd elements in ascending order.': [1, 0.0]
'[c242] sort the list and then remove the duplicates.': [1, 0.0]
'[c242] sort the list in an ascending order and then remove all the duplicate elements.': [1, 0.0]
'[c242] sort the list in ascending order, and if there are repeated elements, move the repeated elements to the end.': [1, 0.0]
'[c242] sort the list in ascending order.': [1, 0.0]
'[c243] find out the index of last occurence of 9.': [1, 0.0]
'[c243] find the count of odd numbers in the given array.': [1, 0.375]
'[c243] find the index of the lowest distinct value.': [1, 0.0]
'[c243] find the number of unique odd elements in the list.': [1, 0.125]
'[c243] find the second smallest element.': [1, 0.125]
'[c243] find the smallest element in the list.': [1, 0.125]
'[c243] find the third smallest element in the list.': [1, 0.125]
'[c243] find the third smallest value in the list.': [1, 0.0]
'[c243] get the number of elements greater than 7.': [1, 0.125]
'[c243] keep only the elements that are present at an odd index.': [1, 0.0]
'[c243] output the index of the second highest number.': [1, 0.0]
'[c243] output the least element.': [1, 0.125]
'[c243] output the number of occurrences of the minimum value.': [1, 0.0]
'[c243] output the number of odd elements.': [1, 0.125]
'[c243] print the count of positive numbers.': [1, 0.0]
'[c243] print the number of even elements in the list.': [1, 0.0]
'[c243] return all element that is a multiple of 3.': [1, 0.0]
'[c243] return the index of the least element.': [1, 0.0]
'[c243] return the mode of the list.': [1, 0.125]
'[c244] check if the array contains 3.': [1, 0.0]
'[c244] count 0''s and add 1 for every occurrence of 3.': [1, 0.25]
'[c244] count how many zeros are in the list.': [1, 0.25]
'[c244] count the number of 3s.': [1, 0.375]
'[c244] count the number of distinct odd numbers.': [1, 0.25]
'[c244] count the number of elements in the list less than 10.': [1, 0.125]
'[c244] count the number of elements less than 3.': [1, 0.375]
'[c244] count the number of even elements.': [1, 0.125]
'[c244] count the number of even numbers.': [1, 0.0]
'[c244] count the number of integers in the list that are less than 10.': [1, 0.125]
'[c244] count the number of non-divisible numbers by 3.': [1, 0.125]
'[c244] count the number of prime numbers in the list.': [1, 0.0]
'[c244] count the number of zeros.': [1, 0.25]
'[c244] count the unique elements in the list.': [1, 0.0]
'[c244] find the maximum number of consecutive repeated elements.': [1, 0.375]
'[c244] find the number of unique elements in the list.': [1, 0.0]
'[c244] return number of unique digits.': [1, 0.25]
'[c245] count how many elements are 0.': [1, 0.5]
'[c245] count the distinct values in the list.': [1, 0.0]
'[c245] count the number of 0.': [1, 0.375]
'[c245] count the number of occurrences of the smallest element in the list.': [1, 0.375]
'[c245] count the number of unique elements in the list.': [1, 0.0]
'[c245] count the number of unique non-zero elements.': [1, 0.25]
'[c245] count the number of zeroes.': [1, 0.5]
'[c245] count the number of zeros in the array.': [1, 0.625]
'[c245] count the number of zeros.': [2, 1.0]
'[c245] find the count of 0''s in the list.': [1, 0.5]
"[c245] find the number of 0\u2019s in the list.": [1, 0.5]
'[c245] find the number of 26s in the list.': [1, 0.75]
'[c245] find the number of unique elements in the list.': [1, 0.125]
'[c245] find the total number of 1s in the list.': [1, 0.625]
? '[c245] return 0 if a strict increasing subarray of length >= 3 exists, else return the length of longest increasing subarray.'
: [1, 0.0]
'[c245] return the number of 0s contained in the list.': [1, 0.5]
'[c245] return the number of 1''s present in the list.': [1, 0.375]
'[c245] return the number of times the minimum element appears in the list.': [1, 0.0]
'[c246] add all the numbers.': [1, 0.0]
'[c246] calculate the number of zeros in the list.': [1, 0.0]
'[c246] count number of zeros in the number.': [1, 0.0]
'[c246] count the number of digits in the last element.': [1, 0.0]
'[c246] count the number of digits in the list that are greater than 9.': [1, 0.0]
'[c246] count the number of elements greater than 10.': [1, 0.0]
'[c246] count the number of elements in the list.': [1, 0.875]
'[c246] count the number of elements less than 10.': [1, 0.0]
'[c246] count the number of elements that are divisible by 10.': [1, 0.0]
'[c246] count the number of elements that are perfect squares.': [1, 0.0]
'[c246] count the number of even elements.': [1, 0.0]
'[c246] count the number of even numbers in the list.': [2, 0.0]
'[c246] count the number of pairs of elements that sum to 49.': [1, 0.0]
'[c246] count the number of zeros (0) in the list.': [1, 0.0]
'[c246] count the total number of even numbers in the array.': [1, 0.0]
'[c246] find the number of even numbers.': [1, 0.0]
'[c246] find the number of unique elements of the list.': [1, 1.0]
'[c246] find the number of unique integers in the list.': [1, 0.0]
'[c247] eliminate duplicate elements from the list.': [1, 0.0]
'[c247] filter elements, only elements that are not 0 remain.': [1, 0.0]
'[c247] remove all elements except the first element if it is not a 0.': [1, 0.125]
'[c247] remove all instance of 0 in the list.': [1, 0.0]
'[c247] remove all instances of 0.': [1, 0.0]
'[c247] remove all occurrences of 0.': [2, 0.0]
'[c247] remove all occurrences of zero.': [1, 0.0]
'[c247] remove all the elements occurring an even number of times and keeping the ones occurring an odd number of times.': [1, 0.125]
'[c247] remove all the elements that are 0.': [1, 0.0]
'[c247] remove all the occurrences of 0.': [1, 0.0]
'[c247] remove all the zeroes.': [1, 0.0]
'[c247] remove all zeros and duplicate elements.': [1, 0.0]
'[c247] remove duplicate values and only keep the first occurrence.': [1, 0.0]
'[c247] remove duplicate zeros.': [1, 0.0]
'[c247] remove elements that are 0.': [1, 0.0]
'[c247] remove the element that appears twice.': [1, 0.25]
'[c247] remove the last occurrences of 0.': [1, 0.0]
'[c247] remove the zeroes.': [1, 0.0]
'[c247] return a list with elements excluding the zeros.': [1, 0.0]
'[c248] filter out all duplicate elements and non-zero elements.': [1, 0.25]
? '[c248] filter out elements that occur multiple times and to return the remaining elements in the order they appear in the input.'
: [1, 0.125]
'[c248] keep only the first encounter of an element.': [1, 0.125]
'[c248] lists all the unique elements that appear at least twice.': [1, 0.0]
'[c248] remove all duplicate elements then remove elements 0.': [1, 0.125]
'[c248] remove all elements except the last and the ones which share the same last digit as the last element.': [1, 0.25]
'[c248] remove all elements except the last element of each equal consecutive elements.': [1, 0.125]
'[c248] remove all elements except the last element of each group of identical elements.': [1, 0.25]
'[c248] remove all elements except the max element.': [1, 0.125]
'[c248] remove all elements that are not zero.': [1, 0.0]
'[c248] remove all occurrences of the element that appears directly after a zero.': [1, 0.375]
'[c248] remove duplicate elements except the last element.': [1, 0.125]
'[c248] remove duplicate elements.': [1, 0.0]
'[c248] remove duplicates and return the remaining elements.': [1, 0.125]
'[c248] remove the first element in the list, then remove all elements equal to the first element.': [1, 0.125]
'[c248] retain the first occurrence of an element while discarding its subsequent occurrences.': [1, 0.125]
'[c248] retain the non-zero elements.': [1, 0.375]
'[c248] return a list containing only the unique elements from the original list after removing zeros.': [1, 0.0]
'[c249] eliminate the zeros and repeat the neighboring numbers.': [1, 0.0]
'[c249] generate a list which contains only the distinct elements.': [1, 0.0]
'[c249] keep the unique non-zero elements of the list.': [1, 0.125]
'[c249] remove all 32s and all duplicate elements.': [1, 0.125]
'[c249] remove all duplicate elements.': [1, 0.125]
'[c249] remove all duplicates.': [2, 0.125]
'[c249] remove all elements except the first element of each group of consecutive equal elements.': [1, 0.0]
? '[c249] remove all occurrences of 0 and then remove all duplicate occurrences of each element, leaving only one occurrence of each unique element.'
: [1, 0.125]
'[c249] remove all occurrences of 32, if any.': [1, 0.0]
'[c249] remove all the elements except the first one that appears.': [1, 0.0]
'[c249] remove all zeros and duplicate elements.': [1, 0.125]
'[c249] remove duplicate elements in the list.': [1, 0.0]
'[c249] remove duplicate elements.': [1, 0.0]
'[c249] remove the duplicate numbers.': [1, 0.0]
'[c249] remove zero elements.': [1, 0.0]
'[c249] retain only the unique values of a list that are not zero.': [1, 0.125]
'[c249] sort the array and remove the duplicates.': [1, 0.0]
'[c250] group elements in a block of 3, and rearrange the blocks in alternate fashion.': [1, 0.0]
'[c250] group elements together that are equal, in order of first appearance.': [1, 0.0]
'[c250] move all zeros to the end of the list and maintain the relative sequence for all other elements.': [1, 0.0]
'[c250] re-arrange the elements in order of they first appeared.': [1, 0.0]
'[c250] rearrange the list in non-decreasing order of first occurrence of the elements.': [1, 0.0]
'[c250] remove consecutive duplicates and order them in increasing order.': [1, 0.0]
'[c250] remove duplicate adjacent elements.': [1, 0.0]
'[c250] remove duplicate elements.': [1, 0.0]
'[c250] remove duplicates and then arrange the list in ascending order.': [1, 0.0]
'[c250] replace all occurrences of the first element with the last element.': [1, 0.0]
? '[c250] shift all the elements before the first occurrence of 0 by one position to the right, shift other elements by one position to the left.'
: [1, 0.0]
'[c250] sort the elements.': [1, 0.0]
'[c250] sort the list in non-decreasing order.': [1, 0.0]
